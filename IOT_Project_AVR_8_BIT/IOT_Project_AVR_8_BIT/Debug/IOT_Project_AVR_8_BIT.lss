
IOT_Project_AVR_8_BIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800116  00800116  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea1  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a96  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067a  00000000  00000000  00001d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003dc  00000000  00000000  00002b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002f67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	db c0       	rjmp	.+438    	; 0x200 <__vector_18>
  4a:	00 00       	nop
  4c:	9c c0       	rjmp	.+312    	; 0x186 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	cd c0       	rjmp	.+410    	; 0x214 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	b5 c0       	rjmp	.+362    	; 0x1ec <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	09 d0       	rcall	.+18     	; 0xd6 <main>
  c4:	c6 c0       	rjmp	.+396    	; 0x252 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <GPIO_Init>:
#include "GPIO.h"
#include <avr/io.h>
void GPIO_Init(void)
{
	//Configure the LEDS
	PORTB &= ~(( 1 << PB4) | (1 << PB5) | (1 << PB6) | (1 << PB7)); 
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	88 bb       	out	0x18, r24	; 24
	DDRB |= (( 1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7)); 
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	80 6f       	ori	r24, 0xF0	; 240
  d2:	87 bb       	out	0x17, r24	; 23
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
    /* Replace with your application code */
	
	GPIO_Init(); 
  d6:	f8 df       	rcall	.-16     	; 0xc8 <GPIO_Init>
	UART0_Init(); 
  d8:	a7 d0       	rcall	.+334    	; 0x228 <UART0_Init>
  da:	78 94       	sei
	
	//wizchip_init(txBuffer, rxBuffer); 
	
	sei(); //Interrupt global interrupts. 
  dc:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x16>
  ec:	00 00       	nop
  ee:	98 b3       	in	r25, 0x18	; 24
	
    while (1) 
    {
		_delay_ms(100); 
		LED_1_TOGGLE(); 
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	89 27       	eor	r24, r25
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	6d e0       	ldi	r22, 0x0D	; 13
		UART0_write((uint8_t *) "Hello World\r\n", 13);
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	a1 d0       	rcall	.+322    	; 0x240 <UART0_write>
  fe:	ee cf       	rjmp	.-36     	; 0xdc <main+0x6>

00000100 <queue_writeforTx>:
 100:	cf 93       	push	r28
	}

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
 102:	df 93       	push	r29
 104:	fc 01       	movw	r30, r24
 106:	eb 01       	movw	r28, r22
	for(uint8_t cnt = 0; cnt < length; cnt++)
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	1b c0       	rjmp	.+54     	; 0x142 <queue_writeforTx+0x42>
	{
		tx_buffer_index_t i = (ptr->_tx_head + 1) % SERIAL_TX_BUFFER_SIZE;
 10c:	24 81       	ldd	r18, Z+4	; 0x04
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	2f 73       	andi	r18, 0x3F	; 63
 116:	30 78       	andi	r19, 0x80	; 128
 118:	33 23       	and	r19, r19
 11a:	34 f4       	brge	.+12     	; 0x128 <queue_writeforTx+0x28>
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	31 09       	sbc	r19, r1
 120:	20 6c       	ori	r18, 0xC0	; 192
 122:	3f 6f       	ori	r19, 0xFF	; 255
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
		if(i == ptr->_tx_tail)
 128:	95 81       	ldd	r25, Z+5	; 0x05
 12a:	92 17       	cp	r25, r18
 12c:	61 f0       	breq	.+24     	; 0x146 <queue_writeforTx+0x46>
		{
			return; 
		}
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
 12e:	a6 81       	ldd	r26, Z+6	; 0x06
 130:	b7 81       	ldd	r27, Z+7	; 0x07
 132:	94 81       	ldd	r25, Z+4	; 0x04
 134:	a9 0f       	add	r26, r25
 136:	b1 1d       	adc	r27, r1
 138:	98 81       	ld	r25, Y
 13a:	9c 93       	st	X, r25
		ptr->_tx_head = i;
 13c:	24 83       	std	Z+4, r18	; 0x04

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
	for(uint8_t cnt = 0; cnt < length; cnt++)
 13e:	8f 5f       	subi	r24, 0xFF	; 255
		tx_buffer_index_t i = (ptr->_tx_head + 1) % SERIAL_TX_BUFFER_SIZE;
		if(i == ptr->_tx_tail)
		{
			return; 
		}
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
 140:	21 96       	adiw	r28, 0x01	; 1

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
	for(uint8_t cnt = 0; cnt < length; cnt++)
 142:	84 17       	cp	r24, r20
 144:	18 f3       	brcs	.-58     	; 0x10c <queue_writeforTx+0xc>
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
		ptr->_tx_head = i;
		
	}
	return; 
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <queue_availableForTx>:

int8_t	queue_availableForTx(queue_struct * ptr)
{
 14c:	fc 01       	movw	r30, r24
	return ((int8_t) (SERIAL_RX_BUFFER_SIZE + ptr->_tx_head - ptr->_tx_tail)) % SERIAL_RX_BUFFER_SIZE;
 14e:	84 81       	ldd	r24, Z+4	; 0x04
 150:	95 81       	ldd	r25, Z+5	; 0x05
 152:	89 1b       	sub	r24, r25
 154:	80 5c       	subi	r24, 0xC0	; 192
 156:	8f 7b       	andi	r24, 0xBF	; 191
 158:	1c f4       	brge	.+6      	; 0x160 <queue_availableForTx+0x14>
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	80 6c       	ori	r24, 0xC0	; 192
 15e:	8f 5f       	subi	r24, 0xFF	; 255
}
 160:	08 95       	ret

00000162 <queue_readForTx>:

uint8_t queue_readForTx(queue_struct * ptr)
{
 162:	fc 01       	movw	r30, r24
	// if the head isn't ahead of the tail, we don't have any characters
	if (ptr->_tx_head == ptr->_tx_tail)
 164:	94 81       	ldd	r25, Z+4	; 0x04
 166:	85 81       	ldd	r24, Z+5	; 0x05
 168:	98 17       	cp	r25, r24
 16a:	59 f0       	breq	.+22     	; 0x182 <queue_readForTx+0x20>
	{
		return -1;
	} else
	{
		unsigned char c = *(ptr->pTxBuffer  + ptr->_tx_tail);
 16c:	a6 81       	ldd	r26, Z+6	; 0x06
 16e:	b7 81       	ldd	r27, Z+7	; 0x07
 170:	85 81       	ldd	r24, Z+5	; 0x05
 172:	a8 0f       	add	r26, r24
 174:	b1 1d       	adc	r27, r1
 176:	8c 91       	ld	r24, X
		ptr->_tx_tail = (tx_buffer_index_t) (ptr->_tx_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 178:	95 81       	ldd	r25, Z+5	; 0x05
 17a:	9f 5f       	subi	r25, 0xFF	; 255
 17c:	9f 73       	andi	r25, 0x3F	; 63
 17e:	95 83       	std	Z+5, r25	; 0x05
		return (int8_t)c;
 180:	08 95       	ret
uint8_t queue_readForTx(queue_struct * ptr)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (ptr->_tx_head == ptr->_tx_tail)
	{
		return -1;
 182:	8f ef       	ldi	r24, 0xFF	; 255
	{
		unsigned char c = *(ptr->pTxBuffer  + ptr->_tx_tail);
		ptr->_tx_tail = (tx_buffer_index_t) (ptr->_tx_tail + 1) % SERIAL_RX_BUFFER_SIZE;
		return (int8_t)c;
	}
 184:	08 95       	ret

00000186 <__vector_19>:
#define UART0_TX_START()	UCSR0B |=  (1 << UDRIE0) 
#define UART0_TX_STOP()		UCSR0B &= ~((1 << UDRIE0)) 
#define TX_REGISTER			UDR0

ISR(USART0_UDRE_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	0b b6       	in	r0, 0x3b	; 59
 192:	0f 92       	push	r0
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	//Check if there is data pending to be written
	if(queue_availableForTx(&queueForUart0) == 0)
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	cd df       	rcall	.-102    	; 0x14c <queue_availableForTx>
 1b2:	81 11       	cpse	r24, r1
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <__vector_19+0x38>
	{
		//No More data to transmit
		UART0_TX_STOP();
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	8f 7d       	andi	r24, 0xDF	; 223
 1ba:	8a b9       	out	0x0a, r24	; 10
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <__vector_19+0x40>
	}else
	{
		TX_REGISTER = queue_readForTx(&queueForUart0);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	cf df       	rcall	.-98     	; 0x162 <queue_readForTx>
 1c4:	8c b9       	out	0x0c, r24	; 12
	}
	
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0b be       	out	0x3b, r0	; 59
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <__vector_32>:

ISR(USART1_TX_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
	
}
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_18>:

ISR(USART0_RX_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
	
	
}
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_30>:

ISR(USART1_RX_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
	
}
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <UART0_Init>:

void UART0_Init(void)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(8>>8); //8 for 115200
 228:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)8;
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = (1 << U2X);
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	8b b9       	out	0x0b, r24	; 11
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
 234:	88 e1       	ldi	r24, 0x18	; 24
 236:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C = (3<<UCSZ0);
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 23e:	08 95       	ret

00000240 <UART0_write>:
}
void UART0_write(const uint8_t * data, const uint8_t numbOfBytes)
{
 240:	46 2f       	mov	r20, r22
	queue_writeforTx(&queueForUart0, data, numbOfBytes); 
 242:	bc 01       	movw	r22, r24
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	5b df       	rcall	.-330    	; 0x100 <queue_writeforTx>
	//Generate Interrupt on UDRIEN UDRIEn: USART Data Register Empty Interrupt Enable
	UART0_TX_START(); 
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	8a b9       	out	0x0a, r24	; 10
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
