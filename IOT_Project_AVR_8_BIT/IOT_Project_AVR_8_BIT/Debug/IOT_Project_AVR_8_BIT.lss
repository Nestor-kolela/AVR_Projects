
IOT_Project_AVR_8_BIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000288  00800100  00003230  000032c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000038b  00800388  00800388  0000354c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000354c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000035a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005fb0  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018fb  00000000  00000000  00009a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034bb  00000000  00000000  0000b34f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001010  00000000  00000000  0000e80c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001990  00000000  00000000  0000f81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004b0b  00000000  00000000  000111ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  00015cb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c0       	rjmp	.+238    	; 0x104 <__vector_5>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__vector_12>
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__vector_18>
      4c:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__vector_19>
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__vector_30>
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__vector_32>
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	f2 e3       	ldi	r31, 0x32	; 50
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 38       	cpi	r26, 0x88	; 136
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a8 e8       	ldi	r26, 0x88	; 136
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 31       	cpi	r26, 0x13	; 19
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 14 	call	0x28ce	; 0x28ce <main>
      c6:	0c 94 16 19 	jmp	0x322c	; 0x322c <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <Blinky_Init>:
#include "BlinkyTask.h"
#include "GPIO.h"
#include "UART_PERIPHERALs.h"
void Blinky_Init(void)
{
	sysTimerSubModuleStart(&myTimers[0], 50); 
      cc:	42 e3       	ldi	r20, 0x32	; 50
      ce:	50 e0       	ldi	r21, 0x00	; 0
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	70 e0       	ldi	r23, 0x00	; 0
      d4:	88 ec       	ldi	r24, 0xC8	; 200
      d6:	94 e0       	ldi	r25, 0x04	; 4
      d8:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <sysTimerSubModuleStart>
      dc:	08 95       	ret

000000de <BlinkyTask>:
}
void BlinkyTask(void)
{
	if(sysTimerSubModuleExpired(&myTimers[0]) == true)
      de:	88 ec       	ldi	r24, 0xC8	; 200
      e0:	94 e0       	ldi	r25, 0x04	; 4
      e2:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <sysTimerSubModuleExpired>
      e6:	88 23       	and	r24, r24
      e8:	61 f0       	breq	.+24     	; 0x102 <BlinkyTask+0x24>
	{
		sysTimerSubModuleStart(&myTimers[0], 50);
      ea:	42 e3       	ldi	r20, 0x32	; 50
      ec:	50 e0       	ldi	r21, 0x00	; 0
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	88 ec       	ldi	r24, 0xC8	; 200
      f4:	94 e0       	ldi	r25, 0x04	; 4
      f6:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <sysTimerSubModuleStart>
		LED_1_TOGGLE();
      fa:	98 b3       	in	r25, 0x18	; 24
      fc:	80 e1       	ldi	r24, 0x10	; 16
      fe:	89 27       	eor	r24, r25
     100:	88 bb       	out	0x18, r24	; 24
     102:	08 95       	ret

00000104 <__vector_5>:
#include "GPIO.h"
#include <avr/interrupt.h>

volatile uint16_t VALUE = 0; 
ISR(INT4_vect)
{
     104:	1f 92       	push	r1
     106:	0f 92       	push	r0
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	0f 92       	push	r0
     10c:	11 24       	eor	r1, r1
     10e:	8f 93       	push	r24
     110:	9f 93       	push	r25
	VALUE++; 
     112:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <__data_end>
     116:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <__data_end+0x1>
     11a:	01 96       	adiw	r24, 0x01	; 1
     11c:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <__data_end+0x1>
     120:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <__data_end>
     124:	9f 91       	pop	r25
     126:	8f 91       	pop	r24
     128:	0f 90       	pop	r0
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	0f 90       	pop	r0
     12e:	1f 90       	pop	r1
     130:	18 95       	reti

00000132 <External_Mem_Inter_Init>:

#include "externMemInterface.h"
#include <avr/io.h>
void External_Mem_Inter_Init(void)
{
	MCUCR |= 1 << SRE;
     132:	85 b7       	in	r24, 0x35	; 53
     134:	80 68       	ori	r24, 0x80	; 128
     136:	85 bf       	out	0x35, r24	; 53
	XMCRB = (1<<XMM1) | (1<<XMM0);
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     13e:	08 95       	ret

00000140 <GPIO_Init>:
#include "GPIO.h"
#include <avr/io.h>
void GPIO_Init(void)
{
	//Configure the LEDS
	PORTB &= ~(( 1 << PB4) | (1 << PB5) | (1 << PB6) | (1 << PB7)); 
     140:	88 b3       	in	r24, 0x18	; 24
     142:	8f 70       	andi	r24, 0x0F	; 15
     144:	88 bb       	out	0x18, r24	; 24
	DDRB |= (( 1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7)); 
     146:	87 b3       	in	r24, 0x17	; 23
     148:	80 6f       	ori	r24, 0xF0	; 240
     14a:	87 bb       	out	0x17, r24	; 23
	
	//Initial the output pins for controlling buffer, SRAM and Ethernet chip. 
	//Turn them off
	PORTA &= ~((1 << PA7) | (1 << PA6) | (1 << PA5) | (1 << PA4) | (1 << PA3) | (1 << PA2) | (1 << PA1) | (1 << PA0)); 
     14c:	8b b3       	in	r24, 0x1b	; 27
     14e:	1b ba       	out	0x1b, r1	; 27
	DDRA |= (1 << DDA7) | (1 << DDA6) | (1 << DDA5) | (1 << DDA4) | (1 << DDA3) | (1 << DDA2) | (1 << DDA2) | (1 << DDA1); //Configure them as output
     150:	8a b3       	in	r24, 0x1a	; 26
     152:	8e 6f       	ori	r24, 0xFE	; 254
     154:	8a bb       	out	0x1a, r24	; 26
	
	//More pins for output 
	PORTC &= ~((1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4) | (1 << PC3) | (1 << PC2) | (1 << PC1) | (1 << PC0));
     156:	85 b3       	in	r24, 0x15	; 21
     158:	15 ba       	out	0x15, r1	; 21
	DDRC |= (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0);
     15a:	84 b3       	in	r24, 0x14	; 20
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	84 bb       	out	0x14, r24	; 20
	
	//Configure the ALE PIN which is responsible for latching inputs to output in the D Flip Flop
	
	PORTG |= (1 << PG4) | (1 << PG3) | (1 << PG1) | (1 << PG0); //Start these pins as normally high as they are active low
     160:	e5 e6       	ldi	r30, 0x65	; 101
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	8b 61       	ori	r24, 0x1B	; 27
     168:	80 83       	st	Z, r24
	PORTG &= ~(1 << PG2); //Start this bit as normally low as it is active high
     16a:	80 81       	ld	r24, Z
     16c:	8b 7f       	andi	r24, 0xFB	; 251
     16e:	80 83       	st	Z, r24
	
	//Configure the pins for PORT G as output
	DDRG |= (1 << DDG4) | (1 << DDG3) | (1 << DDG2) | (1 << DDG1) | (1 << DDG0);
     170:	e4 e6       	ldi	r30, 0x64	; 100
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	8f 61       	ori	r24, 0x1F	; 31
     178:	80 83       	st	Z, r24
	
	//Configure PORTD
	
	
	//Configure PORTE
	PORTE |= 1 << PE4;
     17a:	83 b1       	in	r24, 0x03	; 3
     17c:	80 61       	ori	r24, 0x10	; 16
     17e:	83 b9       	out	0x03, r24	; 3
	DDRE &= ~(1 << DDE4); 
     180:	82 b1       	in	r24, 0x02	; 2
     182:	8f 7e       	andi	r24, 0xEF	; 239
     184:	82 b9       	out	0x02, r24	; 2
	SFIOR &= ~(1 << PUD); 
     186:	80 b5       	in	r24, 0x20	; 32
     188:	8b 7f       	andi	r24, 0xFB	; 251
     18a:	80 bd       	out	0x20, r24	; 32
	
	//External Interrupt control byte
	EIMSK &= ~(1 << INT4); //Stop the interrupts for now. 
     18c:	89 b7       	in	r24, 0x39	; 57
     18e:	8f 7e       	andi	r24, 0xEF	; 239
     190:	89 bf       	out	0x39, r24	; 57
	
	EICRB &= ~(1 << ISC40); 
     192:	8a b7       	in	r24, 0x3a	; 58
     194:	8e 7f       	andi	r24, 0xFE	; 254
     196:	8a bf       	out	0x3a, r24	; 58
	EICRB |= (1 << ISC41); 
     198:	8a b7       	in	r24, 0x3a	; 58
     19a:	82 60       	ori	r24, 0x02	; 2
     19c:	8a bf       	out	0x3a, r24	; 58
	
	//Enable the interrupts
	EIMSK |= 1 << INT4; 
     19e:	89 b7       	in	r24, 0x39	; 57
     1a0:	80 61       	ori	r24, 0x10	; 16
     1a2:	89 bf       	out	0x39, r24	; 57
     1a4:	08 95       	ret

000001a6 <sendto>:
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     1a6:	2f 92       	push	r2
     1a8:	3f 92       	push	r3
     1aa:	4f 92       	push	r4
     1ac:	5f 92       	push	r5
     1ae:	6f 92       	push	r6
     1b0:	7f 92       	push	r7
     1b2:	9f 92       	push	r9
     1b4:	af 92       	push	r10
     1b6:	bf 92       	push	r11
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <sendto+0x24>
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <sendto+0x26>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <sendto+0x28>
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	89 30       	cpi	r24, 0x09	; 9
     1d4:	08 f0       	brcs	.+2      	; 0x1d8 <sendto+0x32>
     1d6:	99 c1       	rjmp	.+818    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     1d8:	78 01       	movw	r14, r16
     1da:	89 01       	movw	r16, r18
     1dc:	1a 01       	movw	r2, r20
     1de:	7e 83       	std	Y+6, r23	; 0x06
     1e0:	6d 83       	std	Y+5, r22	; 0x05
     1e2:	98 2e       	mov	r9, r24
     1e4:	c8 2e       	mov	r12, r24
     1e6:	d1 2c       	mov	r13, r1
     1e8:	56 01       	movw	r10, r12
     1ea:	88 e0       	ldi	r24, 0x08	; 8
     1ec:	a8 0e       	add	r10, r24
     1ee:	b1 1c       	adc	r11, r1
     1f0:	00 24       	eor	r0, r0
     1f2:	b6 94       	lsr	r11
     1f4:	a7 94       	ror	r10
     1f6:	07 94       	ror	r0
     1f8:	b6 94       	lsr	r11
     1fa:	a7 94       	ror	r10
     1fc:	07 94       	ror	r0
     1fe:	ba 2c       	mov	r11, r10
     200:	a0 2c       	mov	r10, r0
     202:	25 01       	movw	r4, r10
     204:	e0 e8       	ldi	r30, 0x80	; 128
     206:	5e 1a       	sub	r5, r30
     208:	61 2c       	mov	r6, r1
     20a:	71 2c       	mov	r7, r1
     20c:	c3 01       	movw	r24, r6
     20e:	b2 01       	movw	r22, r4
     210:	50 d6       	rcall	.+3232   	; 0xeb2 <WIZCHIP_READ>
     212:	8f 70       	andi	r24, 0x0F	; 15
     214:	99 27       	eor	r25, r25
     216:	02 97       	sbiw	r24, 0x02	; 2
     218:	03 97       	sbiw	r24, 0x03	; 3
     21a:	08 f0       	brcs	.+2      	; 0x21e <sendto+0x78>
     21c:	7a c1       	rjmp	.+756    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     21e:	21 14       	cp	r2, r1
     220:	31 04       	cpc	r3, r1
     222:	09 f4       	brne	.+2      	; 0x226 <sendto+0x80>
     224:	7b c1       	rjmp	.+758    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     226:	f8 01       	movw	r30, r16
     228:	80 81       	ld	r24, Z
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	ba 2f       	mov	r27, r26
     232:	a9 2f       	mov	r26, r25
     234:	98 2f       	mov	r25, r24
     236:	88 27       	eor	r24, r24
     238:	21 81       	ldd	r18, Z+1	; 0x01
     23a:	82 0f       	add	r24, r18
     23c:	91 1d       	adc	r25, r1
     23e:	a1 1d       	adc	r26, r1
     240:	b1 1d       	adc	r27, r1
     242:	ba 2f       	mov	r27, r26
     244:	a9 2f       	mov	r26, r25
     246:	98 2f       	mov	r25, r24
     248:	88 27       	eor	r24, r24
     24a:	22 81       	ldd	r18, Z+2	; 0x02
     24c:	82 0f       	add	r24, r18
     24e:	91 1d       	adc	r25, r1
     250:	a1 1d       	adc	r26, r1
     252:	b1 1d       	adc	r27, r1
     254:	ba 2f       	mov	r27, r26
     256:	a9 2f       	mov	r26, r25
     258:	98 2f       	mov	r25, r24
     25a:	88 27       	eor	r24, r24
     25c:	23 81       	ldd	r18, Z+3	; 0x03
     25e:	82 0f       	add	r24, r18
     260:	91 1d       	adc	r25, r1
     262:	a1 1d       	adc	r26, r1
     264:	b1 1d       	adc	r27, r1
     266:	89 83       	std	Y+1, r24	; 0x01
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	ab 83       	std	Y+3, r26	; 0x03
     26c:	bc 83       	std	Y+4, r27	; 0x04
     26e:	89 2b       	or	r24, r25
     270:	8a 2b       	or	r24, r26
     272:	8b 2b       	or	r24, r27
     274:	29 f4       	brne	.+10     	; 0x280 <sendto+0xda>
     276:	c3 01       	movw	r24, r6
     278:	b2 01       	movw	r22, r4
     27a:	1b d6       	rcall	.+3126   	; 0xeb2 <WIZCHIP_READ>
     27c:	82 ff       	sbrs	r24, 2
     27e:	53 c1       	rjmp	.+678    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     280:	e1 14       	cp	r14, r1
     282:	f1 04       	cpc	r15, r1
     284:	29 f4       	brne	.+10     	; 0x290 <sendto+0xea>
     286:	c3 01       	movw	r24, r6
     288:	b2 01       	movw	r22, r4
     28a:	13 d6       	rcall	.+3110   	; 0xeb2 <WIZCHIP_READ>
     28c:	82 ff       	sbrs	r24, 2
     28e:	50 c1       	rjmp	.+672    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     290:	25 01       	movw	r4, r10
     292:	f8 ef       	ldi	r31, 0xF8	; 248
     294:	4f 1a       	sub	r4, r31
     296:	ff e7       	ldi	r31, 0x7F	; 127
     298:	5f 0a       	sbc	r5, r31
     29a:	61 2c       	mov	r6, r1
     29c:	71 2c       	mov	r7, r1
     29e:	c3 01       	movw	r24, r6
     2a0:	b2 01       	movw	r22, r4
     2a2:	07 d6       	rcall	.+3086   	; 0xeb2 <WIZCHIP_READ>
     2a4:	82 34       	cpi	r24, 0x42	; 66
     2a6:	29 f0       	breq	.+10     	; 0x2b2 <sendto+0x10c>
     2a8:	82 32       	cpi	r24, 0x22	; 34
     2aa:	19 f0       	breq	.+6      	; 0x2b2 <sendto+0x10c>
     2ac:	82 33       	cpi	r24, 0x32	; 50
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <sendto+0x10c>
     2b0:	44 c1       	rjmp	.+648    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     2b2:	f8 01       	movw	r30, r16
     2b4:	40 81       	ld	r20, Z
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	54 2f       	mov	r21, r20
     2ba:	44 27       	eor	r20, r20
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	48 0f       	add	r20, r24
     2c0:	51 1d       	adc	r21, r1
     2c2:	b5 01       	movw	r22, r10
     2c4:	6c 5e       	subi	r22, 0xEC	; 236
     2c6:	7f 47       	sbci	r23, 0x7F	; 127
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	bf d5       	rcall	.+2942   	; 0xe4c <WIZCHIP_WRITE>
     2ce:	f8 01       	movw	r30, r16
     2d0:	42 81       	ldd	r20, Z+2	; 0x02
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	54 2f       	mov	r21, r20
     2d6:	44 27       	eor	r20, r20
     2d8:	83 81       	ldd	r24, Z+3	; 0x03
     2da:	48 0f       	add	r20, r24
     2dc:	51 1d       	adc	r21, r1
     2de:	b5 01       	movw	r22, r10
     2e0:	6a 5e       	subi	r22, 0xEA	; 234
     2e2:	7f 47       	sbci	r23, 0x7F	; 127
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	b1 d5       	rcall	.+2914   	; 0xe4c <WIZCHIP_WRITE>
     2ea:	b5 01       	movw	r22, r10
     2ec:	6e 5e       	subi	r22, 0xEE	; 238
     2ee:	7f 47       	sbci	r23, 0x7F	; 127
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	a7 01       	movw	r20, r14
     2f6:	aa d5       	rcall	.+2900   	; 0xe4c <WIZCHIP_WRITE>
     2f8:	89 2d       	mov	r24, r9
     2fa:	4b d6       	rcall	.+3222   	; 0xf92 <getTMSR>
     2fc:	e8 2e       	mov	r14, r24
     2fe:	f1 2c       	mov	r15, r1
     300:	fe 2c       	mov	r15, r14
     302:	ee 24       	eor	r14, r14
     304:	ff 0c       	add	r15, r15
     306:	ff 0c       	add	r15, r15
     308:	e2 14       	cp	r14, r2
     30a:	f3 04       	cpc	r15, r3
     30c:	08 f0       	brcs	.+2      	; 0x310 <sendto+0x16a>
     30e:	71 01       	movw	r14, r2
     310:	89 2d       	mov	r24, r9
     312:	7d d6       	rcall	.+3322   	; 0x100e <getSn_TX_FSR>
     314:	8b 01       	movw	r16, r22
     316:	c3 01       	movw	r24, r6
     318:	b2 01       	movw	r22, r4
     31a:	cb d5       	rcall	.+2966   	; 0xeb2 <WIZCHIP_READ>
     31c:	88 23       	and	r24, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <sendto+0x17c>
     320:	11 c1       	rjmp	.+546    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0c 2c       	mov	r0, r12
     328:	02 c0       	rjmp	.+4      	; 0x32e <sendto+0x188>
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <sendto+0x184>
     332:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <sock_io_mode>
     336:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <sock_io_mode+0x1>
     33a:	82 23       	and	r24, r18
     33c:	93 23       	and	r25, r19
     33e:	89 2b       	or	r24, r25
     340:	21 f0       	breq	.+8      	; 0x34a <sendto+0x1a4>
     342:	0e 15       	cp	r16, r14
     344:	1f 05       	cpc	r17, r15
     346:	08 f4       	brcc	.+2      	; 0x34a <sendto+0x1a4>
     348:	02 c1       	rjmp	.+516    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     34a:	0e 15       	cp	r16, r14
     34c:	1f 05       	cpc	r17, r15
     34e:	00 f3       	brcs	.-64     	; 0x310 <sendto+0x16a>
     350:	27 01       	movw	r4, r14
     352:	61 2c       	mov	r6, r1
     354:	71 2c       	mov	r7, r1
     356:	a3 01       	movw	r20, r6
     358:	92 01       	movw	r18, r4
     35a:	6d 81       	ldd	r22, Y+5	; 0x05
     35c:	7e 81       	ldd	r23, Y+6	; 0x06
     35e:	89 2d       	mov	r24, r9
     360:	02 d7       	rcall	.+3588   	; 0x1166 <wiz_send_data>
     362:	68 e1       	ldi	r22, 0x18	; 24
     364:	70 e8       	ldi	r23, 0x80	; 128
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	a3 d5       	rcall	.+2886   	; 0xeb2 <WIZCHIP_READ>
     36c:	99 83       	std	Y+1, r25	; 0x01
     36e:	68 e1       	ldi	r22, 0x18	; 24
     370:	70 e8       	ldi	r23, 0x80	; 128
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9d d5       	rcall	.+2874   	; 0xeb2 <WIZCHIP_READ>
     378:	8a 83       	std	Y+2, r24	; 0x02
     37a:	6a e1       	ldi	r22, 0x1A	; 26
     37c:	70 e8       	ldi	r23, 0x80	; 128
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	97 d5       	rcall	.+2862   	; 0xeb2 <WIZCHIP_READ>
     384:	9b 83       	std	Y+3, r25	; 0x03
     386:	6a e1       	ldi	r22, 0x1A	; 26
     388:	70 e8       	ldi	r23, 0x80	; 128
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	91 d5       	rcall	.+2850   	; 0xeb2 <WIZCHIP_READ>
     390:	8c 83       	std	Y+4, r24	; 0x04
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	ab 81       	ldd	r26, Y+3	; 0x03
     398:	bc 81       	ldd	r27, Y+4	; 0x04
     39a:	89 2b       	or	r24, r25
     39c:	8a 2b       	or	r24, r26
     39e:	8b 2b       	or	r24, r27
     3a0:	39 f5       	brne	.+78     	; 0x3f0 <sendto+0x24a>
     3a2:	64 e1       	ldi	r22, 0x14	; 20
     3a4:	70 e8       	ldi	r23, 0x80	; 128
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	83 d5       	rcall	.+2822   	; 0xeb2 <WIZCHIP_READ>
     3ac:	99 83       	std	Y+1, r25	; 0x01
     3ae:	64 e1       	ldi	r22, 0x14	; 20
     3b0:	70 e8       	ldi	r23, 0x80	; 128
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	7d d5       	rcall	.+2810   	; 0xeb2 <WIZCHIP_READ>
     3b8:	8a 83       	std	Y+2, r24	; 0x02
     3ba:	66 e1       	ldi	r22, 0x16	; 22
     3bc:	70 e8       	ldi	r23, 0x80	; 128
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	77 d5       	rcall	.+2798   	; 0xeb2 <WIZCHIP_READ>
     3c4:	9b 83       	std	Y+3, r25	; 0x03
     3c6:	66 e1       	ldi	r22, 0x16	; 22
     3c8:	70 e8       	ldi	r23, 0x80	; 128
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	71 d5       	rcall	.+2786   	; 0xeb2 <WIZCHIP_READ>
     3d0:	8c 83       	std	Y+4, r24	; 0x04
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	64 e1       	ldi	r22, 0x14	; 20
     3d8:	70 e8       	ldi	r23, 0x80	; 128
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	36 d5       	rcall	.+2668   	; 0xe4c <WIZCHIP_WRITE>
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	66 e1       	ldi	r22, 0x16	; 22
     3e6:	70 e8       	ldi	r23, 0x80	; 128
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	2f d5       	rcall	.+2654   	; 0xe4c <WIZCHIP_WRITE>
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <sendto+0x252>
     3f0:	19 82       	std	Y+1, r1	; 0x01
     3f2:	1a 82       	std	Y+2, r1	; 0x02
     3f4:	1b 82       	std	Y+3, r1	; 0x03
     3f6:	1c 82       	std	Y+4, r1	; 0x04
     3f8:	83 01       	movw	r16, r6
     3fa:	22 27       	eor	r18, r18
     3fc:	33 27       	eor	r19, r19
     3fe:	c5 01       	movw	r24, r10
     400:	80 5e       	subi	r24, 0xE0	; 224
     402:	9f 47       	sbci	r25, 0x7F	; 127
     404:	bc 01       	movw	r22, r24
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	a8 01       	movw	r20, r16
     40c:	1f d5       	rcall	.+2622   	; 0xe4c <WIZCHIP_WRITE>
     40e:	b5 01       	movw	r22, r10
     410:	6e 5d       	subi	r22, 0xDE	; 222
     412:	7f 47       	sbci	r23, 0x7F	; 127
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	a7 01       	movw	r20, r14
     41a:	18 d5       	rcall	.+2608   	; 0xe4c <WIZCHIP_WRITE>
     41c:	25 01       	movw	r4, r10
     41e:	fe ef       	ldi	r31, 0xFE	; 254
     420:	4f 1a       	sub	r4, r31
     422:	ff e7       	ldi	r31, 0x7F	; 127
     424:	5f 0a       	sbc	r5, r31
     426:	61 2c       	mov	r6, r1
     428:	71 2c       	mov	r7, r1
     42a:	40 e2       	ldi	r20, 0x20	; 32
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	c3 01       	movw	r24, r6
     430:	b2 01       	movw	r22, r4
     432:	0c d5       	rcall	.+2584   	; 0xe4c <WIZCHIP_WRITE>
     434:	c3 01       	movw	r24, r6
     436:	b2 01       	movw	r22, r4
     438:	3c d5       	rcall	.+2680   	; 0xeb2 <WIZCHIP_READ>
     43a:	81 11       	cpse	r24, r1
     43c:	fb cf       	rjmp	.-10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43e:	25 01       	movw	r4, r10
     440:	8a ef       	ldi	r24, 0xFA	; 250
     442:	48 1a       	sub	r4, r24
     444:	8f e7       	ldi	r24, 0x7F	; 127
     446:	58 0a       	sbc	r5, r24
     448:	61 2c       	mov	r6, r1
     44a:	71 2c       	mov	r7, r1
     44c:	c3 01       	movw	r24, r6
     44e:	b2 01       	movw	r22, r4
     450:	30 d5       	rcall	.+2656   	; 0xeb2 <WIZCHIP_READ>
     452:	9c 01       	movw	r18, r24
     454:	33 27       	eor	r19, r19
     456:	84 ff       	sbrs	r24, 4
     458:	0f c0       	rjmp	.+30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     45a:	40 e1       	ldi	r20, 0x10	; 16
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	c3 01       	movw	r24, r6
     460:	b2 01       	movw	r22, r4
     462:	f4 d4       	rcall	.+2536   	; 0xe4c <WIZCHIP_WRITE>
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	ab 81       	ldd	r26, Y+3	; 0x03
     46a:	bc 81       	ldd	r27, Y+4	; 0x04
     46c:	89 2b       	or	r24, r25
     46e:	8a 2b       	or	r24, r26
     470:	8b 2b       	or	r24, r27
     472:	09 f4       	brne	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     474:	46 c0       	rjmp	.+140    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     476:	2d c0       	rjmp	.+90     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     478:	23 ff       	sbrs	r18, 3
     47a:	e1 cf       	rjmp	.-62     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     47c:	48 e0       	ldi	r20, 0x08	; 8
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	c3 01       	movw	r24, r6
     482:	b2 01       	movw	r22, r4
     484:	e3 d4       	rcall	.+2502   	; 0xe4c <WIZCHIP_WRITE>
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	ab 81       	ldd	r26, Y+3	; 0x03
     48c:	bc 81       	ldd	r27, Y+4	; 0x04
     48e:	89 2b       	or	r24, r25
     490:	8a 2b       	or	r24, r26
     492:	8b 2b       	or	r24, r27
     494:	09 f4       	brne	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	5f c0       	rjmp	.+190    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     498:	49 81       	ldd	r20, Y+1	; 0x01
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	54 2f       	mov	r21, r20
     49e:	44 27       	eor	r20, r20
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	48 0f       	add	r20, r24
     4a4:	51 1d       	adc	r21, r1
     4a6:	64 e1       	ldi	r22, 0x14	; 20
     4a8:	70 e8       	ldi	r23, 0x80	; 128
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	ce d4       	rcall	.+2460   	; 0xe4c <WIZCHIP_WRITE>
     4b0:	4b 81       	ldd	r20, Y+3	; 0x03
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	54 2f       	mov	r21, r20
     4b6:	44 27       	eor	r20, r20
     4b8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ba:	48 0f       	add	r20, r24
     4bc:	51 1d       	adc	r21, r1
     4be:	66 e1       	ldi	r22, 0x16	; 22
     4c0:	70 e8       	ldi	r23, 0x80	; 128
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	c2 d4       	rcall	.+2436   	; 0xe4c <WIZCHIP_WRITE>
     4c8:	63 ef       	ldi	r22, 0xF3	; 243
     4ca:	7f ef       	ldi	r23, 0xFF	; 255
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	9f ef       	ldi	r25, 0xFF	; 255
     4d0:	46 c0       	rjmp	.+140    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     4d2:	49 81       	ldd	r20, Y+1	; 0x01
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	54 2f       	mov	r21, r20
     4d8:	44 27       	eor	r20, r20
     4da:	8a 81       	ldd	r24, Y+2	; 0x02
     4dc:	48 0f       	add	r20, r24
     4de:	51 1d       	adc	r21, r1
     4e0:	64 e1       	ldi	r22, 0x14	; 20
     4e2:	70 e8       	ldi	r23, 0x80	; 128
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	b1 d4       	rcall	.+2402   	; 0xe4c <WIZCHIP_WRITE>
     4ea:	4b 81       	ldd	r20, Y+3	; 0x03
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	54 2f       	mov	r21, r20
     4f0:	44 27       	eor	r20, r20
     4f2:	8c 81       	ldd	r24, Y+4	; 0x04
     4f4:	48 0f       	add	r20, r24
     4f6:	51 1d       	adc	r21, r1
     4f8:	66 e1       	ldi	r22, 0x16	; 22
     4fa:	70 e8       	ldi	r23, 0x80	; 128
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a5 d4       	rcall	.+2378   	; 0xe4c <WIZCHIP_WRITE>
     502:	b7 01       	movw	r22, r14
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	2a c0       	rjmp	.+84     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     50a:	6f ef       	ldi	r22, 0xFF	; 255
     50c:	7f ef       	ldi	r23, 0xFF	; 255
     50e:	cb 01       	movw	r24, r22
     510:	26 c0       	rjmp	.+76     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     512:	6b ef       	ldi	r22, 0xFB	; 251
     514:	7f ef       	ldi	r23, 0xFF	; 255
     516:	8f ef       	ldi	r24, 0xFF	; 255
     518:	9f ef       	ldi	r25, 0xFF	; 255
     51a:	21 c0       	rjmp	.+66     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     51c:	62 ef       	ldi	r22, 0xF2	; 242
     51e:	7f ef       	ldi	r23, 0xFF	; 255
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	9f ef       	ldi	r25, 0xFF	; 255
     524:	1c c0       	rjmp	.+56     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     526:	64 ef       	ldi	r22, 0xF4	; 244
     528:	7f ef       	ldi	r23, 0xFF	; 255
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	9f ef       	ldi	r25, 0xFF	; 255
     52e:	17 c0       	rjmp	.+46     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     530:	65 ef       	ldi	r22, 0xF5	; 245
     532:	7f ef       	ldi	r23, 0xFF	; 255
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	12 c0       	rjmp	.+36     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     53a:	69 ef       	ldi	r22, 0xF9	; 249
     53c:	7f ef       	ldi	r23, 0xFF	; 255
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	0d c0       	rjmp	.+26     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     544:	6c ef       	ldi	r22, 0xFC	; 252
     546:	7f ef       	ldi	r23, 0xFF	; 255
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	9f ef       	ldi	r25, 0xFF	; 255
     54c:	08 c0       	rjmp	.+16     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	cb 01       	movw	r24, r22
     554:	04 c0       	rjmp	.+8      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     556:	63 ef       	ldi	r22, 0xF3	; 243
     558:	7f ef       	ldi	r23, 0xFF	; 255
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	9f ef       	ldi	r25, 0xFF	; 255
     55e:	26 96       	adiw	r28, 0x06	; 6
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	bf 90       	pop	r11
     57c:	af 90       	pop	r10
     57e:	9f 90       	pop	r9
     580:	7f 90       	pop	r7
     582:	6f 90       	pop	r6
     584:	5f 90       	pop	r5
     586:	4f 90       	pop	r4
     588:	3f 90       	pop	r3
     58a:	2f 90       	pop	r2
     58c:	08 95       	ret

0000058e <close>:
     58e:	2f 92       	push	r2
     590:	3f 92       	push	r3
     592:	4f 92       	push	r4
     594:	5f 92       	push	r5
     596:	7f 92       	push	r7
     598:	8f 92       	push	r8
     59a:	9f 92       	push	r9
     59c:	af 92       	push	r10
     59e:	bf 92       	push	r11
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <close+0x24>
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <close+0x26>
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	89 30       	cpi	r24, 0x09	; 9
     5ba:	08 f0       	brcs	.+2      	; 0x5be <close+0x30>
     5bc:	b4 c0       	rjmp	.+360    	; 0x726 <close+0x198>
     5be:	78 2e       	mov	r7, r24
     5c0:	c8 2e       	mov	r12, r24
     5c2:	d1 2c       	mov	r13, r1
     5c4:	76 01       	movw	r14, r12
     5c6:	88 e0       	ldi	r24, 0x08	; 8
     5c8:	e8 0e       	add	r14, r24
     5ca:	f1 1c       	adc	r15, r1
     5cc:	00 24       	eor	r0, r0
     5ce:	f6 94       	lsr	r15
     5d0:	e7 94       	ror	r14
     5d2:	07 94       	ror	r0
     5d4:	f6 94       	lsr	r15
     5d6:	e7 94       	ror	r14
     5d8:	07 94       	ror	r0
     5da:	fe 2c       	mov	r15, r14
     5dc:	e0 2c       	mov	r14, r0
     5de:	47 01       	movw	r8, r14
     5e0:	80 e8       	ldi	r24, 0x80	; 128
     5e2:	98 1a       	sub	r9, r24
     5e4:	a1 2c       	mov	r10, r1
     5e6:	b1 2c       	mov	r11, r1
     5e8:	c5 01       	movw	r24, r10
     5ea:	b4 01       	movw	r22, r8
     5ec:	62 d4       	rcall	.+2244   	; 0xeb2 <WIZCHIP_READ>
     5ee:	8f 70       	andi	r24, 0x0F	; 15
     5f0:	99 27       	eor	r25, r25
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <close+0x6a>
     5f6:	4c c0       	rjmp	.+152    	; 0x690 <close+0x102>
     5f8:	87 2d       	mov	r24, r7
     5fa:	09 d5       	rcall	.+2578   	; 0x100e <getSn_TX_FSR>
     5fc:	1b 01       	movw	r2, r22
     5fe:	2c 01       	movw	r4, r24
     600:	87 2d       	mov	r24, r7
     602:	c7 d4       	rcall	.+2446   	; 0xf92 <getTMSR>
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	a0 e0       	ldi	r26, 0x00	; 0
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	07 2e       	mov	r0, r23
     60c:	7a e0       	ldi	r23, 0x0A	; 10
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	aa 1f       	adc	r26, r26
     614:	bb 1f       	adc	r27, r27
     616:	7a 95       	dec	r23
     618:	d1 f7       	brne	.-12     	; 0x60e <close+0x80>
     61a:	70 2d       	mov	r23, r0
     61c:	28 16       	cp	r2, r24
     61e:	39 06       	cpc	r3, r25
     620:	4a 06       	cpc	r4, r26
     622:	5b 06       	cpc	r5, r27
     624:	a9 f1       	breq	.+106    	; 0x690 <close+0x102>
     626:	19 82       	std	Y+1, r1	; 0x01
     628:	1a 82       	std	Y+2, r1	; 0x02
     62a:	1b 82       	std	Y+3, r1	; 0x03
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	8c 83       	std	Y+4, r24	; 0x04
     630:	42 e0       	ldi	r20, 0x02	; 2
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	c5 01       	movw	r24, r10
     636:	b4 01       	movw	r22, r8
     638:	09 d4       	rcall	.+2066   	; 0xe4c <WIZCHIP_WRITE>
     63a:	b7 01       	movw	r22, r14
     63c:	66 5f       	subi	r22, 0xF6	; 246
     63e:	7f 47       	sbci	r23, 0x7F	; 127
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e3       	ldi	r21, 0x30	; 48
     648:	01 d4       	rcall	.+2050   	; 0xe4c <WIZCHIP_WRITE>
     64a:	47 01       	movw	r8, r14
     64c:	8e ef       	ldi	r24, 0xFE	; 254
     64e:	88 1a       	sub	r8, r24
     650:	8f e7       	ldi	r24, 0x7F	; 127
     652:	98 0a       	sbc	r9, r24
     654:	a1 2c       	mov	r10, r1
     656:	b1 2c       	mov	r11, r1
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	c5 01       	movw	r24, r10
     65e:	b4 01       	movw	r22, r8
     660:	f5 d3       	rcall	.+2026   	; 0xe4c <WIZCHIP_WRITE>
     662:	c5 01       	movw	r24, r10
     664:	b4 01       	movw	r22, r8
     666:	25 d4       	rcall	.+2122   	; 0xeb2 <WIZCHIP_READ>
     668:	81 11       	cpse	r24, r1
     66a:	fb cf       	rjmp	.-10     	; 0x662 <close+0xd4>
     66c:	b7 01       	movw	r22, r14
     66e:	68 5f       	subi	r22, 0xF8	; 248
     670:	7f 47       	sbci	r23, 0x7F	; 127
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	1d d4       	rcall	.+2106   	; 0xeb2 <WIZCHIP_READ>
     678:	82 32       	cpi	r24, 0x22	; 34
     67a:	c1 f7       	brne	.-16     	; 0x66c <close+0xde>
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	10 e3       	ldi	r17, 0x30	; 48
     680:	9e 01       	movw	r18, r28
     682:	2f 5f       	subi	r18, 0xFF	; 255
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	b9 01       	movw	r22, r18
     68c:	87 2d       	mov	r24, r7
     68e:	8b dd       	rcall	.-1258   	; 0x1a6 <sendto>
     690:	47 01       	movw	r8, r14
     692:	8e ef       	ldi	r24, 0xFE	; 254
     694:	88 1a       	sub	r8, r24
     696:	8f e7       	ldi	r24, 0x7F	; 127
     698:	98 0a       	sbc	r9, r24
     69a:	a1 2c       	mov	r10, r1
     69c:	b1 2c       	mov	r11, r1
     69e:	40 e1       	ldi	r20, 0x10	; 16
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	c5 01       	movw	r24, r10
     6a4:	b4 01       	movw	r22, r8
     6a6:	d2 d3       	rcall	.+1956   	; 0xe4c <WIZCHIP_WRITE>
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	02 d4       	rcall	.+2052   	; 0xeb2 <WIZCHIP_READ>
     6ae:	81 11       	cpse	r24, r1
     6b0:	fb cf       	rjmp	.-10     	; 0x6a8 <close+0x11a>
     6b2:	b7 01       	movw	r22, r14
     6b4:	6a 5f       	subi	r22, 0xFA	; 250
     6b6:	7f 47       	sbci	r23, 0x7F	; 127
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	4f ef       	ldi	r20, 0xFF	; 255
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	c5 d3       	rcall	.+1930   	; 0xe4c <WIZCHIP_WRITE>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <close+0x13e>
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	7a 94       	dec	r7
     6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <close+0x13a>
     6d0:	80 95       	com	r24
     6d2:	90 95       	com	r25
     6d4:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <sock_io_mode>
     6d8:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <sock_io_mode+0x1>
     6dc:	28 23       	and	r18, r24
     6de:	39 23       	and	r19, r25
     6e0:	30 93 ad 03 	sts	0x03AD, r19	; 0x8003ad <sock_io_mode+0x1>
     6e4:	20 93 ac 03 	sts	0x03AC, r18	; 0x8003ac <sock_io_mode>
     6e8:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <sock_is_sending>
     6ec:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <sock_is_sending+0x1>
     6f0:	82 23       	and	r24, r18
     6f2:	93 23       	and	r25, r19
     6f4:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <sock_is_sending+0x1>
     6f8:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <sock_is_sending>
     6fc:	f6 01       	movw	r30, r12
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	e6 56       	subi	r30, 0x66	; 102
     704:	fc 4f       	sbci	r31, 0xFC	; 252
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	10 82       	st	Z, r1
     70a:	f6 01       	movw	r30, r12
     70c:	ee 56       	subi	r30, 0x6E	; 110
     70e:	fc 4f       	sbci	r31, 0xFC	; 252
     710:	10 82       	st	Z, r1
     712:	b7 01       	movw	r22, r14
     714:	68 5f       	subi	r22, 0xF8	; 248
     716:	7f 47       	sbci	r23, 0x7F	; 127
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	ca d3       	rcall	.+1940   	; 0xeb2 <WIZCHIP_READ>
     71e:	81 11       	cpse	r24, r1
     720:	f8 cf       	rjmp	.-16     	; 0x712 <close+0x184>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	01 c0       	rjmp	.+2      	; 0x728 <close+0x19a>
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	bf 90       	pop	r11
     742:	af 90       	pop	r10
     744:	9f 90       	pop	r9
     746:	8f 90       	pop	r8
     748:	7f 90       	pop	r7
     74a:	5f 90       	pop	r5
     74c:	4f 90       	pop	r4
     74e:	3f 90       	pop	r3
     750:	2f 90       	pop	r2
     752:	08 95       	ret

00000754 <socket>:
     754:	4f 92       	push	r4
     756:	5f 92       	push	r5
     758:	6f 92       	push	r6
     75a:	7f 92       	push	r7
     75c:	af 92       	push	r10
     75e:	bf 92       	push	r11
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	00 d0       	rcall	.+0      	; 0x772 <socket+0x1e>
     772:	00 d0       	rcall	.+0      	; 0x774 <socket+0x20>
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	f8 2e       	mov	r15, r24
     77a:	16 2f       	mov	r17, r22
     77c:	3a 01       	movw	r6, r20
     77e:	e2 2e       	mov	r14, r18
     780:	28 e0       	ldi	r18, 0x08	; 8
     782:	28 17       	cp	r18, r24
     784:	08 f4       	brcc	.+2      	; 0x788 <socket+0x34>
     786:	c8 c0       	rjmp	.+400    	; 0x918 <socket+0x1c4>
     788:	61 30       	cpi	r22, 0x01	; 1
     78a:	29 f0       	breq	.+10     	; 0x796 <socket+0x42>
     78c:	08 f4       	brcc	.+2      	; 0x790 <socket+0x3c>
     78e:	c6 c0       	rjmp	.+396    	; 0x91c <socket+0x1c8>
     790:	65 30       	cpi	r22, 0x05	; 5
     792:	18 f1       	brcs	.+70     	; 0x7da <socket+0x86>
     794:	c3 c0       	rjmp	.+390    	; 0x91c <socket+0x1c8>
     796:	68 e1       	ldi	r22, 0x18	; 24
     798:	70 e8       	ldi	r23, 0x80	; 128
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	89 d3       	rcall	.+1810   	; 0xeb2 <WIZCHIP_READ>
     7a0:	99 83       	std	Y+1, r25	; 0x01
     7a2:	68 e1       	ldi	r22, 0x18	; 24
     7a4:	70 e8       	ldi	r23, 0x80	; 128
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	83 d3       	rcall	.+1798   	; 0xeb2 <WIZCHIP_READ>
     7ac:	8a 83       	std	Y+2, r24	; 0x02
     7ae:	6a e1       	ldi	r22, 0x1A	; 26
     7b0:	70 e8       	ldi	r23, 0x80	; 128
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	7d d3       	rcall	.+1786   	; 0xeb2 <WIZCHIP_READ>
     7b8:	9b 83       	std	Y+3, r25	; 0x03
     7ba:	6a e1       	ldi	r22, 0x1A	; 26
     7bc:	70 e8       	ldi	r23, 0x80	; 128
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	77 d3       	rcall	.+1774   	; 0xeb2 <WIZCHIP_READ>
     7c4:	8c 83       	std	Y+4, r24	; 0x04
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	ab 81       	ldd	r26, Y+3	; 0x03
     7cc:	bc 81       	ldd	r27, Y+4	; 0x04
     7ce:	89 2b       	or	r24, r25
     7d0:	8a 2b       	or	r24, r26
     7d2:	8b 2b       	or	r24, r27
     7d4:	11 f4       	brne	.+4      	; 0x7da <socket+0x86>
     7d6:	8d ef       	ldi	r24, 0xFD	; 253
     7d8:	a8 c0       	rjmp	.+336    	; 0x92a <socket+0x1d6>
     7da:	e2 fc       	sbrc	r14, 2
     7dc:	a1 c0       	rjmp	.+322    	; 0x920 <socket+0x1cc>
     7de:	ee 20       	and	r14, r14
     7e0:	71 f0       	breq	.+28     	; 0x7fe <socket+0xaa>
     7e2:	11 30       	cpi	r17, 0x01	; 1
     7e4:	19 f0       	breq	.+6      	; 0x7ec <socket+0x98>
     7e6:	12 30       	cpi	r17, 0x02	; 2
     7e8:	29 f0       	breq	.+10     	; 0x7f4 <socket+0xa0>
     7ea:	09 c0       	rjmp	.+18     	; 0x7fe <socket+0xaa>
     7ec:	8e 2d       	mov	r24, r14
     7ee:	83 72       	andi	r24, 0x23	; 35
     7f0:	31 f4       	brne	.+12     	; 0x7fe <socket+0xaa>
     7f2:	98 c0       	rjmp	.+304    	; 0x924 <socket+0x1d0>
     7f4:	e5 fe       	sbrs	r14, 5
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <socket+0xaa>
     7f8:	ee 20       	and	r14, r14
     7fa:	0c f0       	brlt	.+2      	; 0x7fe <socket+0xaa>
     7fc:	95 c0       	rjmp	.+298    	; 0x928 <socket+0x1d4>
     7fe:	8f 2d       	mov	r24, r15
     800:	c6 de       	rcall	.-628    	; 0x58e <close>
     802:	8e 2d       	mov	r24, r14
     804:	80 7f       	andi	r24, 0xF0	; 240
     806:	81 2b       	or	r24, r17
     808:	4e 2d       	mov	r20, r14
     80a:	42 70       	andi	r20, 0x02	; 2
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	56 95       	lsr	r21
     810:	54 2f       	mov	r21, r20
     812:	44 27       	eor	r20, r20
     814:	57 95       	ror	r21
     816:	47 95       	ror	r20
     818:	cf 2c       	mov	r12, r15
     81a:	d1 2c       	mov	r13, r1
     81c:	86 01       	movw	r16, r12
     81e:	08 5f       	subi	r16, 0xF8	; 248
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	00 24       	eor	r0, r0
     824:	16 95       	lsr	r17
     826:	07 95       	ror	r16
     828:	07 94       	ror	r0
     82a:	16 95       	lsr	r17
     82c:	07 95       	ror	r16
     82e:	07 94       	ror	r0
     830:	10 2f       	mov	r17, r16
     832:	00 2d       	mov	r16, r0
     834:	b8 01       	movw	r22, r16
     836:	70 58       	subi	r23, 0x80	; 128
     838:	48 2b       	or	r20, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	06 d3       	rcall	.+1548   	; 0xe4c <WIZCHIP_WRITE>
     840:	61 14       	cp	r6, r1
     842:	71 04       	cpc	r7, r1
     844:	91 f4       	brne	.+36     	; 0x86a <socket+0x116>
     846:	60 90 00 01 	lds	r6, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     84a:	70 90 01 01 	lds	r7, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     84e:	c3 01       	movw	r24, r6
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     856:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     85a:	40 96       	adiw	r24, 0x10	; 16
     85c:	31 f4       	brne	.+12     	; 0x86a <socket+0x116>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 ec       	ldi	r25, 0xC0	; 192
     862:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     866:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     86a:	b8 01       	movw	r22, r16
     86c:	66 5f       	subi	r22, 0xF6	; 246
     86e:	7f 47       	sbci	r23, 0x7F	; 127
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	a3 01       	movw	r20, r6
     876:	ea d2       	rcall	.+1492   	; 0xe4c <WIZCHIP_WRITE>
     878:	28 01       	movw	r4, r16
     87a:	8e ef       	ldi	r24, 0xFE	; 254
     87c:	48 1a       	sub	r4, r24
     87e:	8f e7       	ldi	r24, 0x7F	; 127
     880:	58 0a       	sbc	r5, r24
     882:	61 2c       	mov	r6, r1
     884:	71 2c       	mov	r7, r1
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	c3 01       	movw	r24, r6
     88c:	b2 01       	movw	r22, r4
     88e:	de d2       	rcall	.+1468   	; 0xe4c <WIZCHIP_WRITE>
     890:	c3 01       	movw	r24, r6
     892:	b2 01       	movw	r22, r4
     894:	0e d3       	rcall	.+1564   	; 0xeb2 <WIZCHIP_READ>
     896:	81 11       	cpse	r24, r1
     898:	fb cf       	rjmp	.-10     	; 0x890 <socket+0x13c>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0f 2c       	mov	r0, r15
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <socket+0x152>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <socket+0x14e>
     8aa:	80 95       	com	r24
     8ac:	90 95       	com	r25
     8ae:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <sock_io_mode>
     8b2:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <sock_io_mode+0x1>
     8b6:	28 23       	and	r18, r24
     8b8:	39 23       	and	r19, r25
     8ba:	e0 fa       	bst	r14, 0
     8bc:	aa 24       	eor	r10, r10
     8be:	a0 f8       	bld	r10, 0
     8c0:	b1 2c       	mov	r11, r1
     8c2:	0f 2c       	mov	r0, r15
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <socket+0x176>
     8c6:	aa 0c       	add	r10, r10
     8c8:	bb 1c       	adc	r11, r11
     8ca:	0a 94       	dec	r0
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <socket+0x172>
     8ce:	a2 2a       	or	r10, r18
     8d0:	b3 2a       	or	r11, r19
     8d2:	b0 92 ad 03 	sts	0x03AD, r11	; 0x8003ad <sock_io_mode+0x1>
     8d6:	a0 92 ac 03 	sts	0x03AC, r10	; 0x8003ac <sock_io_mode>
     8da:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <sock_is_sending>
     8de:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <sock_is_sending+0x1>
     8e2:	82 23       	and	r24, r18
     8e4:	93 23       	and	r25, r19
     8e6:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <sock_is_sending+0x1>
     8ea:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <sock_is_sending>
     8ee:	f6 01       	movw	r30, r12
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e6 56       	subi	r30, 0x66	; 102
     8f6:	fc 4f       	sbci	r31, 0xFC	; 252
     8f8:	11 82       	std	Z+1, r1	; 0x01
     8fa:	10 82       	st	Z, r1
     8fc:	f6 01       	movw	r30, r12
     8fe:	ee 56       	subi	r30, 0x6E	; 110
     900:	fc 4f       	sbci	r31, 0xFC	; 252
     902:	10 82       	st	Z, r1
     904:	b8 01       	movw	r22, r16
     906:	68 5f       	subi	r22, 0xF8	; 248
     908:	7f 47       	sbci	r23, 0x7F	; 127
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	d1 d2       	rcall	.+1442   	; 0xeb2 <WIZCHIP_READ>
     910:	88 23       	and	r24, r24
     912:	c1 f3       	breq	.-16     	; 0x904 <socket+0x1b0>
     914:	8f 2d       	mov	r24, r15
     916:	09 c0       	rjmp	.+18     	; 0x92a <socket+0x1d6>
     918:	8f ef       	ldi	r24, 0xFF	; 255
     91a:	07 c0       	rjmp	.+14     	; 0x92a <socket+0x1d6>
     91c:	8b ef       	ldi	r24, 0xFB	; 251
     91e:	05 c0       	rjmp	.+10     	; 0x92a <socket+0x1d6>
     920:	8a ef       	ldi	r24, 0xFA	; 250
     922:	03 c0       	rjmp	.+6      	; 0x92a <socket+0x1d6>
     924:	8a ef       	ldi	r24, 0xFA	; 250
     926:	01 c0       	rjmp	.+2      	; 0x92a <socket+0x1d6>
     928:	8a ef       	ldi	r24, 0xFA	; 250
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	bf 90       	pop	r11
     944:	af 90       	pop	r10
     946:	7f 90       	pop	r7
     948:	6f 90       	pop	r6
     94a:	5f 90       	pop	r5
     94c:	4f 90       	pop	r4
     94e:	08 95       	ret

00000950 <recvfrom>:
}



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
     950:	2f 92       	push	r2
     952:	3f 92       	push	r3
     954:	4f 92       	push	r4
     956:	5f 92       	push	r5
     958:	6f 92       	push	r6
     95a:	7f 92       	push	r7
     95c:	8f 92       	push	r8
     95e:	9f 92       	push	r9
     960:	af 92       	push	r10
     962:	bf 92       	push	r11
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	64 97       	sbiw	r28, 0x14	; 20
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	58 2e       	mov	r5, r24
     986:	3b 01       	movw	r6, r22
     988:	5a 01       	movw	r10, r20
     98a:	3a 87       	std	Y+10, r19	; 0x0a
     98c:	29 87       	std	Y+9, r18	; 0x09
     98e:	1e 87       	std	Y+14, r17	; 0x0e
     990:	0d 87       	std	Y+13, r16	; 0x0d
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
     992:	28 e0       	ldi	r18, 0x08	; 8
     994:	28 17       	cp	r18, r24
     996:	08 f4       	brcc	.+2      	; 0x99a <recvfrom+0x4a>
     998:	2a c2       	rjmp	.+1108   	; 0xdee <recvfrom+0x49e>
   //CHECK_SOCKMODE(Sn_MR_UDP);
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
     99a:	80 91 00 80 	lds	r24, 0x8000	; 0x808000 <__bss_end+0x78ed>
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	98 2f       	mov	r25, r24
     9a2:	88 27       	eor	r24, r24
     9a4:	20 91 01 80 	lds	r18, 0x8001	; 0x808001 <__bss_end+0x78ee>
     9a8:	1c 01       	movw	r2, r24
     9aa:	22 0e       	add	r2, r18
     9ac:	31 1c       	adc	r3, r1
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
     9ae:	c5 2c       	mov	r12, r5
     9b0:	d1 2c       	mov	r13, r1
     9b2:	76 01       	movw	r14, r12
     9b4:	38 e0       	ldi	r19, 0x08	; 8
     9b6:	e3 0e       	add	r14, r19
     9b8:	f1 1c       	adc	r15, r1
     9ba:	00 24       	eor	r0, r0
     9bc:	f6 94       	lsr	r15
     9be:	e7 94       	ror	r14
     9c0:	07 94       	ror	r0
     9c2:	f6 94       	lsr	r15
     9c4:	e7 94       	ror	r14
     9c6:	07 94       	ror	r0
     9c8:	fe 2c       	mov	r15, r14
     9ca:	e0 2c       	mov	r14, r0
     9cc:	b7 01       	movw	r22, r14
     9ce:	70 58       	subi	r23, 0x80	; 128
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	6e d2       	rcall	.+1244   	; 0xeb2 <WIZCHIP_READ>
     9d6:	4c 01       	movw	r8, r24
     9d8:	8f 70       	andi	r24, 0x0F	; 15
     9da:	99 27       	eor	r25, r25
     9dc:	02 97       	sbiw	r24, 0x02	; 2
     9de:	03 97       	sbiw	r24, 0x03	; 3
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <recvfrom+0x94>
     9e2:	09 c2       	rjmp	.+1042   	; 0xdf6 <recvfrom+0x4a6>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
     9e4:	a1 14       	cp	r10, r1
     9e6:	b1 04       	cpc	r11, r1
     9e8:	09 f4       	brne	.+2      	; 0x9ec <recvfrom+0x9c>
     9ea:	0a c2       	rjmp	.+1044   	; 0xe00 <recvfrom+0x4b0>
   if(sock_remained_size[sn] == 0)
     9ec:	f6 01       	movw	r30, r12
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	e6 56       	subi	r30, 0x66	; 102
     9f4:	fc 4f       	sbci	r31, 0xFC	; 252
     9f6:	80 81       	ld	r24, Z
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	89 2b       	or	r24, r25
     9fc:	21 f5       	brne	.+72     	; 0xa46 <recvfrom+0xf6>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
     9fe:	85 2d       	mov	r24, r5
     a00:	50 d3       	rcall	.+1696   	; 0x10a2 <getSn_RX_RSR>
     a02:	8b 01       	movw	r16, r22
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     a04:	b7 01       	movw	r22, r14
     a06:	68 5f       	subi	r22, 0xF8	; 248
     a08:	7f 47       	sbci	r23, 0x7F	; 127
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	51 d2       	rcall	.+1186   	; 0xeb2 <WIZCHIP_READ>
     a10:	88 23       	and	r24, r24
     a12:	09 f4       	brne	.+2      	; 0xa16 <recvfrom+0xc6>
     a14:	fa c1       	rjmp	.+1012   	; 0xe0a <recvfrom+0x4ba>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0c 2c       	mov	r0, r12
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <recvfrom+0xd2>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	0a 94       	dec	r0
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <recvfrom+0xce>
     a26:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <sock_io_mode>
     a2a:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <sock_io_mode+0x1>
     a2e:	82 23       	and	r24, r18
     a30:	93 23       	and	r25, r19
     a32:	89 2b       	or	r24, r25
     a34:	21 f0       	breq	.+8      	; 0xa3e <recvfrom+0xee>
     a36:	01 15       	cp	r16, r1
     a38:	11 05       	cpc	r17, r1
     a3a:	09 f4       	brne	.+2      	; 0xa3e <recvfrom+0xee>
     a3c:	eb c1       	rjmp	.+982    	; 0xe14 <recvfrom+0x4c4>
         if(pack_len != 0) break;
     a3e:	01 15       	cp	r16, r1
     a40:	11 05       	cpc	r17, r1
     a42:	e9 f2       	breq	.-70     	; 0x9fe <recvfrom+0xae>
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <recvfrom+0xfa>
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
     a46:	00 e0       	ldi	r16, 0x00	; 0
     a48:	10 e0       	ldi	r17, 0x00	; 0
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
     a4a:	47 e0       	ldi	r20, 0x07	; 7
     a4c:	84 22       	and	r8, r20
     a4e:	99 24       	eor	r9, r9
     a50:	53 e0       	ldi	r21, 0x03	; 3
     a52:	85 16       	cp	r8, r21
     a54:	91 04       	cpc	r9, r1
     a56:	09 f4       	brne	.+2      	; 0xa5a <recvfrom+0x10a>
     a58:	30 c1       	rjmp	.+608    	; 0xcba <recvfrom+0x36a>
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	88 16       	cp	r8, r24
     a5e:	91 04       	cpc	r9, r1
     a60:	09 f4       	brne	.+2      	; 0xa64 <recvfrom+0x114>
     a62:	b6 c0       	rjmp	.+364    	; 0xbd0 <recvfrom+0x280>
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	89 16       	cp	r8, r25
     a68:	91 04       	cpc	r9, r1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <recvfrom+0x11e>
     a6c:	80 c1       	rjmp	.+768    	; 0xd6e <recvfrom+0x41e>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
     a6e:	f6 01       	movw	r30, r12
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	e6 56       	subi	r30, 0x66	; 102
     a76:	fc 4f       	sbci	r31, 0xFC	; 252
     a78:	80 81       	ld	r24, Z
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
     a7c:	89 2b       	or	r24, r25
     a7e:	09 f0       	breq	.+2      	; 0xa82 <recvfrom+0x132>
     a80:	6f c0       	rjmp	.+222    	; 0xb60 <recvfrom+0x210>
	      {
   			wiz_recv_data(sn, head, 8);
     a82:	28 e0       	ldi	r18, 0x08	; 8
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	be 01       	movw	r22, r28
     a8c:	6f 5f       	subi	r22, 0xFF	; 255
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	85 2d       	mov	r24, r5
     a92:	b2 d3       	rcall	.+1892   	; 0x11f8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
     a94:	c7 01       	movw	r24, r14
     a96:	8e 5f       	subi	r24, 0xFE	; 254
     a98:	9f 47       	sbci	r25, 0x7F	; 127
     a9a:	9c 01       	movw	r18, r24
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	29 8b       	std	Y+17, r18	; 0x11
     aa2:	3a 8b       	std	Y+18, r19	; 0x12
     aa4:	4b 8b       	std	Y+19, r20	; 0x13
     aa6:	5c 8b       	std	Y+20, r21	; 0x14
     aa8:	40 e4       	ldi	r20, 0x40	; 64
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	69 89       	ldd	r22, Y+17	; 0x11
     aae:	7a 89       	ldd	r23, Y+18	; 0x12
     ab0:	8b 89       	ldd	r24, Y+19	; 0x13
     ab2:	9c 89       	ldd	r25, Y+20	; 0x14
     ab4:	cb d1       	rcall	.+918    	; 0xe4c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
     ab6:	69 89       	ldd	r22, Y+17	; 0x11
     ab8:	7a 89       	ldd	r23, Y+18	; 0x12
     aba:	8b 89       	ldd	r24, Y+19	; 0x13
     abc:	9c 89       	ldd	r25, Y+20	; 0x14
     abe:	f9 d1       	rcall	.+1010   	; 0xeb2 <WIZCHIP_READ>
     ac0:	81 11       	cpse	r24, r1
     ac2:	f9 cf       	rjmp	.-14     	; 0xab6 <recvfrom+0x166>
     ac4:	30 fe       	sbrs	r3, 0
   			// read peer's IP address, port number & packet length
   	   //A20150601 : For W5300
   		#if _WIZCHIP_ == 5300
   		   if(mr1 & MR_FS)
     ac6:	24 c0       	rjmp	.+72     	; 0xb10 <recvfrom+0x1c0>
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
   		   {
   		      addr[0] = head[1];
     aca:	e9 85       	ldd	r30, Y+9	; 0x09
     acc:	fa 85       	ldd	r31, Y+10	; 0x0a
     ace:	80 83       	st	Z, r24
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
   		      addr[1] = head[0];
     ad2:	81 83       	std	Z+1, r24	; 0x01
     ad4:	8c 81       	ldd	r24, Y+4	; 0x04
   		      addr[2] = head[3];
     ad6:	82 83       	std	Z+2, r24	; 0x02
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
   		      addr[3] = head[2];
     ada:	83 83       	std	Z+3, r24	; 0x03
     adc:	8e 81       	ldd	r24, Y+6	; 0x06
   		      *port = head[5];
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	98 2f       	mov	r25, r24
   		      *port = (*port << 8) + head[4];
     ae2:	88 27       	eor	r24, r24
     ae4:	2d 81       	ldd	r18, Y+5	; 0x05
     ae6:	82 0f       	add	r24, r18
     ae8:	91 1d       	adc	r25, r1
     aea:	ed 85       	ldd	r30, Y+13	; 0x0d
     aec:	fe 85       	ldd	r31, Y+14	; 0x0e
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	80 83       	st	Z, r24
     af2:	88 85       	ldd	r24, Y+8	; 0x08
      			sock_remained_size[sn] = head[7];
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	f6 01       	movw	r30, r12
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	e6 56       	subi	r30, 0x66	; 102
     afe:	fc 4f       	sbci	r31, 0xFC	; 252
     b00:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
     b02:	88 27       	eor	r24, r24
     b04:	2f 81       	ldd	r18, Y+7	; 0x07
     b06:	82 0f       	add	r24, r18
     b08:	91 1d       	adc	r25, r1
     b0a:	91 83       	std	Z+1, r25	; 0x01
     b0c:	80 83       	st	Z, r24
     b0e:	23 c0       	rjmp	.+70     	; 0xb56 <recvfrom+0x206>
     b10:	89 81       	ldd	r24, Y+1	; 0x01
   		   }
            else
            {
         #endif
               addr[0] = head[0];
     b12:	e9 85       	ldd	r30, Y+9	; 0x09
     b14:	fa 85       	ldd	r31, Y+10	; 0x0a
     b16:	80 83       	st	Z, r24
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
      			addr[1] = head[1];
     b1a:	81 83       	std	Z+1, r24	; 0x01
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
      			addr[2] = head[2];
     b1e:	82 83       	std	Z+2, r24	; 0x02
     b20:	8c 81       	ldd	r24, Y+4	; 0x04
      			addr[3] = head[3];
     b22:	83 83       	std	Z+3, r24	; 0x03
     b24:	8d 81       	ldd	r24, Y+5	; 0x05
      			*port = head[4];
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	98 2f       	mov	r25, r24
      			*port = (*port << 8) + head[5];
     b2a:	88 27       	eor	r24, r24
     b2c:	2e 81       	ldd	r18, Y+6	; 0x06
     b2e:	82 0f       	add	r24, r18
     b30:	91 1d       	adc	r25, r1
     b32:	ed 85       	ldd	r30, Y+13	; 0x0d
     b34:	fe 85       	ldd	r31, Y+14	; 0x0e
     b36:	91 83       	std	Z+1, r25	; 0x01
     b38:	80 83       	st	Z, r24
     b3a:	8f 81       	ldd	r24, Y+7	; 0x07
      			sock_remained_size[sn] = head[6];
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	f6 01       	movw	r30, r12
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e6 56       	subi	r30, 0x66	; 102
     b46:	fc 4f       	sbci	r31, 0xFC	; 252
     b48:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
     b4a:	88 27       	eor	r24, r24
     b4c:	28 85       	ldd	r18, Y+8	; 0x08
     b4e:	82 0f       	add	r24, r18
     b50:	91 1d       	adc	r25, r1
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
     b56:	80 e8       	ldi	r24, 0x80	; 128
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
     b58:	f6 01       	movw	r30, r12
     b5a:	ee 56       	subi	r30, 0x6E	; 110
     b5c:	fc 4f       	sbci	r31, 0xFC	; 252
     b5e:	80 83       	st	Z, r24
     b60:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
     b62:	ee 0f       	add	r30, r30
     b64:	ff 1f       	adc	r31, r31
     b66:	e6 56       	subi	r30, 0x66	; 102
     b68:	fc 4f       	sbci	r31, 0xFC	; 252
     b6a:	80 80       	ld	r8, Z
     b6c:	91 80       	ldd	r9, Z+1	; 0x01
     b6e:	a8 14       	cp	r10, r8
     b70:	b9 04       	cpc	r11, r9
     b72:	08 f4       	brcc	.+2      	; 0xb76 <recvfrom+0x226>
     b74:	45 01       	movw	r8, r10
     b76:	f6 01       	movw	r30, r12
			else pack_len = sock_remained_size[sn];
			//A20150601 : For W5300
			len = pack_len;
			#if _WIZCHIP_ == 5300
			   if(sock_pack_info[sn] & PACK_FIFOBYTE)
     b78:	ee 56       	subi	r30, 0x6E	; 110
     b7a:	fc 4f       	sbci	r31, 0xFC	; 252
     b7c:	80 81       	ld	r24, Z
     b7e:	81 ff       	sbrs	r24, 1
     b80:	1e c0       	rjmp	.+60     	; 0xbbe <recvfrom+0x26e>
     b82:	f6 01       	movw	r30, r12
			   {
			      *buf++ = sock_remained_byte[sn];
     b84:	e6 57       	subi	r30, 0x76	; 118
     b86:	fc 4f       	sbci	r31, 0xFC	; 252
     b88:	80 81       	ld	r24, Z
     b8a:	f3 01       	movw	r30, r6
     b8c:	80 83       	st	Z, r24
     b8e:	84 01       	movw	r16, r8
			      pack_len -= 1;
     b90:	01 50       	subi	r16, 0x01	; 1
     b92:	11 09       	sbc	r17, r1
     b94:	f6 01       	movw	r30, r12
			      sock_remained_size[sn] -= 1;
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	e6 56       	subi	r30, 0x66	; 102
     b9c:	fc 4f       	sbci	r31, 0xFC	; 252
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	80 83       	st	Z, r24
     ba8:	f6 01       	movw	r30, r12
			      sock_pack_info[sn] &= ~PACK_FIFOBYTE;
     baa:	ee 56       	subi	r30, 0x6E	; 110
     bac:	fc 4f       	sbci	r31, 0xFC	; 252
     bae:	80 81       	ld	r24, Z
     bb0:	8d 7f       	andi	r24, 0xFD	; 253
     bb2:	80 83       	st	Z, r24
     bb4:	93 01       	movw	r18, r6
			//A20150601 : For W5300
			len = pack_len;
			#if _WIZCHIP_ == 5300
			   if(sock_pack_info[sn] & PACK_FIFOBYTE)
			   {
			      *buf++ = sock_remained_byte[sn];
     bb6:	2f 5f       	subi	r18, 0xFF	; 255
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	39 01       	movw	r6, r18
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <recvfrom+0x270>
     bbe:	84 01       	movw	r16, r8
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
     bc0:	98 01       	movw	r18, r16
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	b3 01       	movw	r22, r6
     bc8:	85 2d       	mov	r24, r5
     bca:	16 d3       	rcall	.+1580   	; 0x11f8 <wiz_recv_data>
     bcc:	54 01       	movw	r10, r8
   			sock_pack_info[sn] = PACK_FIRST;
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
			else pack_len = sock_remained_size[sn];
			//A20150601 : For W5300
			len = pack_len;
     bce:	db c0       	rjmp	.+438    	; 0xd86 <recvfrom+0x436>
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
     bd0:	f6 01       	movw	r30, r12
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	e6 56       	subi	r30, 0x66	; 102
     bd8:	fc 4f       	sbci	r31, 0xFC	; 252
     bda:	80 81       	ld	r24, Z
     bdc:	91 81       	ldd	r25, Z+1	; 0x01
     bde:	89 2b       	or	r24, r25
     be0:	09 f0       	breq	.+2      	; 0xbe4 <recvfrom+0x294>
     be2:	59 c0       	rjmp	.+178    	; 0xc96 <recvfrom+0x346>
     be4:	22 e0       	ldi	r18, 0x02	; 2
	      {
   			wiz_recv_data(sn, head, 2);
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	be 01       	movw	r22, r28
     bee:	6f 5f       	subi	r22, 0xFF	; 255
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	85 2d       	mov	r24, r5
     bf4:	01 d3       	rcall	.+1538   	; 0x11f8 <wiz_recv_data>
     bf6:	c7 01       	movw	r24, r14
   			setSn_CR(sn,Sn_CR_RECV);
     bf8:	8e 5f       	subi	r24, 0xFE	; 254
     bfa:	9f 47       	sbci	r25, 0x7F	; 127
     bfc:	9c 01       	movw	r18, r24
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	29 87       	std	Y+9, r18	; 0x09
     c04:	3a 87       	std	Y+10, r19	; 0x0a
     c06:	4b 87       	std	Y+11, r20	; 0x0b
     c08:	5c 87       	std	Y+12, r21	; 0x0c
     c0a:	40 e4       	ldi	r20, 0x40	; 64
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	69 85       	ldd	r22, Y+9	; 0x09
     c10:	7a 85       	ldd	r23, Y+10	; 0x0a
     c12:	8b 85       	ldd	r24, Y+11	; 0x0b
     c14:	9c 85       	ldd	r25, Y+12	; 0x0c
     c16:	1a d1       	rcall	.+564    	; 0xe4c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
     c18:	69 85       	ldd	r22, Y+9	; 0x09
     c1a:	7a 85       	ldd	r23, Y+10	; 0x0a
     c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c20:	48 d1       	rcall	.+656    	; 0xeb2 <WIZCHIP_READ>
     c22:	81 11       	cpse	r24, r1
     c24:	f9 cf       	rjmp	.-14     	; 0xc18 <recvfrom+0x2c8>
     c26:	89 81       	ldd	r24, Y+1	; 0x01
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	f6 01       	movw	r30, r12
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e6 56       	subi	r30, 0x66	; 102
     c32:	fc 4f       	sbci	r31, 0xFC	; 252
     c34:	98 2f       	mov	r25, r24
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
     c36:	88 27       	eor	r24, r24
     c38:	2a 81       	ldd	r18, Y+2	; 0x02
     c3a:	82 0f       	add	r24, r18
     c3c:	91 1d       	adc	r25, r1
     c3e:	02 97       	sbiw	r24, 0x02	; 2
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
     c44:	80 ff       	sbrs	r24, 0
   			#if _WIZCHIP_ == W5300
   			if(sock_remained_size[sn] & 0x01)
     c46:	09 c0       	rjmp	.+18     	; 0xc5a <recvfrom+0x30a>
     c48:	03 97       	sbiw	r24, 0x03	; 3
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
     c4a:	f6 01       	movw	r30, r12
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	e6 56       	subi	r30, 0x66	; 102
     c52:	fc 4f       	sbci	r31, 0xFC	; 252
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <recvfrom+0x31a>
     c5a:	f6 01       	movw	r30, r12
   			else
   				sock_remained_size[sn] -= 4;
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e6 56       	subi	r30, 0x66	; 102
     c62:	fc 4f       	sbci	r31, 0xFC	; 252
     c64:	04 97       	sbiw	r24, 0x04	; 4
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	80 83       	st	Z, r24
     c6a:	f6 01       	movw	r30, r12
			#endif
   			if(sock_remained_size[sn] > 1514) 
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	e6 56       	subi	r30, 0x66	; 102
     c72:	fc 4f       	sbci	r31, 0xFC	; 252
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	8b 3e       	cpi	r24, 0xEB	; 235
     c7a:	95 40       	sbci	r25, 0x05	; 5
     c7c:	38 f0       	brcs	.+14     	; 0xc8c <recvfrom+0x33c>
   			{
   			   close(sn);
     c7e:	85 2d       	mov	r24, r5
     c80:	86 dc       	rcall	.-1780   	; 0x58e <close>
     c82:	67 e1       	ldi	r22, 0x17	; 23
   			   return SOCKFATAL_PACKLEN;
     c84:	7c ef       	ldi	r23, 0xFC	; 252
     c86:	8f ef       	ldi	r24, 0xFF	; 255
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	c7 c0       	rjmp	.+398    	; 0xe1a <recvfrom+0x4ca>
     c8c:	80 e8       	ldi	r24, 0x80	; 128
   			}
   			sock_pack_info[sn] = PACK_FIRST;
     c8e:	f6 01       	movw	r30, r12
     c90:	ee 56       	subi	r30, 0x6E	; 110
     c92:	fc 4f       	sbci	r31, 0xFC	; 252
     c94:	80 83       	st	Z, r24
     c96:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	e6 56       	subi	r30, 0x66	; 102
     c9e:	fc 4f       	sbci	r31, 0xFC	; 252
     ca0:	00 81       	ld	r16, Z
     ca2:	11 81       	ldd	r17, Z+1	; 0x01
     ca4:	a0 16       	cp	r10, r16
     ca6:	b1 06       	cpc	r11, r17
     ca8:	08 f4       	brcc	.+2      	; 0xcac <recvfrom+0x35c>
     caa:	85 01       	movw	r16, r10
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
     cac:	98 01       	movw	r18, r16
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	b3 01       	movw	r22, r6
     cb4:	85 2d       	mov	r24, r5
     cb6:	a0 d2       	rcall	.+1344   	; 0x11f8 <wiz_recv_data>
     cb8:	66 c0       	rjmp	.+204    	; 0xd86 <recvfrom+0x436>
		   break;
     cba:	f6 01       	movw	r30, r12
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	e6 56       	subi	r30, 0x66	; 102
     cc2:	fc 4f       	sbci	r31, 0xFC	; 252
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	89 2b       	or	r24, r25
     cca:	09 f0       	breq	.+2      	; 0xcce <recvfrom+0x37e>
     ccc:	3e c0       	rjmp	.+124    	; 0xd4a <recvfrom+0x3fa>
		   {
   			wiz_recv_data(sn, head, 6);
     cce:	26 e0       	ldi	r18, 0x06	; 6
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	be 01       	movw	r22, r28
     cd8:	6f 5f       	subi	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	85 2d       	mov	r24, r5
     cde:	8c d2       	rcall	.+1304   	; 0x11f8 <wiz_recv_data>
     ce0:	c7 01       	movw	r24, r14
   			setSn_CR(sn,Sn_CR_RECV);
     ce2:	8e 5f       	subi	r24, 0xFE	; 254
     ce4:	9f 47       	sbci	r25, 0x7F	; 127
     ce6:	9c 01       	movw	r18, r24
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	2d 87       	std	Y+13, r18	; 0x0d
     cee:	3e 87       	std	Y+14, r19	; 0x0e
     cf0:	4f 87       	std	Y+15, r20	; 0x0f
     cf2:	58 8b       	std	Y+16, r21	; 0x10
     cf4:	40 e4       	ldi	r20, 0x40	; 64
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	6d 85       	ldd	r22, Y+13	; 0x0d
     cfa:	7e 85       	ldd	r23, Y+14	; 0x0e
     cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     cfe:	98 89       	ldd	r25, Y+16	; 0x10
     d00:	a5 d0       	rcall	.+330    	; 0xe4c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
     d02:	6d 85       	ldd	r22, Y+13	; 0x0d
     d04:	7e 85       	ldd	r23, Y+14	; 0x0e
     d06:	8f 85       	ldd	r24, Y+15	; 0x0f
     d08:	98 89       	ldd	r25, Y+16	; 0x10
     d0a:	d3 d0       	rcall	.+422    	; 0xeb2 <WIZCHIP_READ>
     d0c:	81 11       	cpse	r24, r1
     d0e:	f9 cf       	rjmp	.-14     	; 0xd02 <recvfrom+0x3b2>
     d10:	89 81       	ldd	r24, Y+1	; 0x01
   			addr[0] = head[0];
     d12:	e9 85       	ldd	r30, Y+9	; 0x09
     d14:	fa 85       	ldd	r31, Y+10	; 0x0a
     d16:	80 83       	st	Z, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
   			addr[1] = head[1];
     d1a:	81 83       	std	Z+1, r24	; 0x01
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
   			addr[2] = head[2];
     d1e:	82 83       	std	Z+2, r24	; 0x02
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
   			addr[3] = head[3];
     d22:	83 83       	std	Z+3, r24	; 0x03
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
   			sock_remained_size[sn] = head[4];
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	f6 01       	movw	r30, r12
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	e6 56       	subi	r30, 0x66	; 102
     d30:	fc 4f       	sbci	r31, 0xFC	; 252
     d32:	98 2f       	mov	r25, r24
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
     d34:	88 27       	eor	r24, r24
     d36:	2e 81       	ldd	r18, Y+6	; 0x06
     d38:	82 0f       	add	r24, r18
     d3a:	91 1d       	adc	r25, r1
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	80 83       	st	Z, r24
     d40:	80 e8       	ldi	r24, 0x80	; 128
   			sock_pack_info[sn] = PACK_FIRST;
     d42:	f6 01       	movw	r30, r12
     d44:	ee 56       	subi	r30, 0x6E	; 110
     d46:	fc 4f       	sbci	r31, 0xFC	; 252
     d48:	80 83       	st	Z, r24
     d4a:	f6 01       	movw	r30, r12
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
     d4c:	ee 0f       	add	r30, r30
     d4e:	ff 1f       	adc	r31, r31
     d50:	e6 56       	subi	r30, 0x66	; 102
     d52:	fc 4f       	sbci	r31, 0xFC	; 252
     d54:	00 81       	ld	r16, Z
     d56:	11 81       	ldd	r17, Z+1	; 0x01
     d58:	a0 16       	cp	r10, r16
     d5a:	b1 06       	cpc	r11, r17
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <recvfrom+0x410>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
     d5e:	85 01       	movw	r16, r10
     d60:	98 01       	movw	r18, r16
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	b3 01       	movw	r22, r6
     d68:	85 2d       	mov	r24, r5
     d6a:	46 d2       	rcall	.+1164   	; 0x11f8 <wiz_recv_data>
			break;
     d6c:	0c c0       	rjmp	.+24     	; 0xd86 <recvfrom+0x436>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
     d6e:	a8 01       	movw	r20, r16
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	85 2d       	mov	r24, r5
     d76:	91 d2       	rcall	.+1314   	; 0x129a <wiz_recv_ignore>
     d78:	f6 01       	movw	r30, r12
         sock_remained_size[sn] = pack_len;
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	e6 56       	subi	r30, 0x66	; 102
     d80:	fc 4f       	sbci	r31, 0xFC	; 252
     d82:	11 83       	std	Z+1, r17	; 0x01
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
     d84:	00 83       	st	Z, r16
     d86:	27 01       	movw	r4, r14
     d88:	fe ef       	ldi	r31, 0xFE	; 254
     d8a:	4f 1a       	sub	r4, r31
     d8c:	ff e7       	ldi	r31, 0x7F	; 127
     d8e:	5f 0a       	sbc	r5, r31
     d90:	61 2c       	mov	r6, r1
     d92:	71 2c       	mov	r7, r1
     d94:	40 e4       	ldi	r20, 0x40	; 64
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	c3 01       	movw	r24, r6
     d9a:	b2 01       	movw	r22, r4
     d9c:	57 d0       	rcall	.+174    	; 0xe4c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
     d9e:	c3 01       	movw	r24, r6
     da0:	b2 01       	movw	r22, r4
     da2:	87 d0       	rcall	.+270    	; 0xeb2 <WIZCHIP_READ>
     da4:	81 11       	cpse	r24, r1
     da6:	fb cf       	rjmp	.-10     	; 0xd9e <recvfrom+0x44e>
     da8:	f6 01       	movw	r30, r12
	sock_remained_size[sn] -= pack_len;
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	e6 56       	subi	r30, 0x66	; 102
     db0:	fc 4f       	sbci	r31, 0xFC	; 252
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	80 1b       	sub	r24, r16
     db8:	91 0b       	sbc	r25, r17
     dba:	91 83       	std	Z+1, r25	; 0x01
     dbc:	80 83       	st	Z, r24
     dbe:	89 2b       	or	r24, r25
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
     dc0:	71 f0       	breq	.+28     	; 0xdde <recvfrom+0x48e>
     dc2:	f6 01       	movw	r30, r12
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
     dc4:	ee 56       	subi	r30, 0x6E	; 110
     dc6:	fc 4f       	sbci	r31, 0xFC	; 252
     dc8:	80 81       	ld	r24, Z
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	80 83       	st	Z, r24
     dce:	00 ff       	sbrs	r16, 0
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <recvfrom+0x496>
     dd2:	f6 01       	movw	r30, r12
     dd4:	ee 56       	subi	r30, 0x6E	; 110
     dd6:	fc 4f       	sbci	r31, 0xFC	; 252
     dd8:	82 60       	ori	r24, 0x02	; 2
     dda:	80 83       	st	Z, r24
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <recvfrom+0x496>
     dde:	f6 01       	movw	r30, r12
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
     de0:	ee 56       	subi	r30, 0x6E	; 110
     de2:	fc 4f       	sbci	r31, 0xFC	; 252
     de4:	10 82       	st	Z, r1
     de6:	b5 01       	movw	r22, r10
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	16 c0       	rjmp	.+44     	; 0xe1a <recvfrom+0x4ca>
     dee:	6f ef       	ldi	r22, 0xFF	; 255
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
     df0:	7f ef       	ldi	r23, 0xFF	; 255
     df2:	cb 01       	movw	r24, r22
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <recvfrom+0x4ca>
     df6:	6b ef       	ldi	r22, 0xFB	; 251
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
     df8:	7f ef       	ldi	r23, 0xFF	; 255
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	9f ef       	ldi	r25, 0xFF	; 255
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <recvfrom+0x4ca>
     e00:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
     e02:	7f ef       	ldi	r23, 0xFF	; 255
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	9f ef       	ldi	r25, 0xFF	; 255
     e08:	08 c0       	rjmp	.+16     	; 0xe1a <recvfrom+0x4ca>
     e0a:	6c ef       	ldi	r22, 0xFC	; 252
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     e0c:	7f ef       	ldi	r23, 0xFF	; 255
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	9f ef       	ldi	r25, 0xFF	; 255
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <recvfrom+0x4ca>
     e14:	60 e0       	ldi	r22, 0x00	; 0
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	64 96       	adiw	r28, 0x14	; 20
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	af 90       	pop	r10
     e3a:	9f 90       	pop	r9
     e3c:	8f 90       	pop	r8
     e3e:	7f 90       	pop	r7
     e40:	6f 90       	pop	r6
     e42:	5f 90       	pop	r5
     e44:	4f 90       	pop	r4
     e46:	3f 90       	pop	r3
     e48:	2f 90       	pop	r2
     e4a:	08 95       	ret

00000e4c <WIZCHIP_WRITE>:
     e4c:	cf 92       	push	r12
uint8_t getRMSR(uint8_t sn)
{
   if(sn & 0x01)
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
}
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	6b 01       	movw	r12, r22
     e5e:	7c 01       	movw	r14, r24
     e60:	14 2f       	mov	r17, r20
     e62:	05 2f       	mov	r16, r21
     e64:	c2 e0       	ldi	r28, 0x02	; 2
     e66:	d1 e0       	ldi	r29, 0x01	; 1
     e68:	ea 85       	ldd	r30, Y+10	; 0x0a
     e6a:	fb 85       	ldd	r31, Y+11	; 0x0b
     e6c:	09 95       	icall
     e6e:	ee 85       	ldd	r30, Y+14	; 0x0e
     e70:	ff 85       	ldd	r31, Y+15	; 0x0f
     e72:	09 95       	icall
     e74:	ec 89       	ldd	r30, Y+20	; 0x14
     e76:	fd 89       	ldd	r31, Y+21	; 0x15
     e78:	40 2f       	mov	r20, r16
     e7a:	c7 01       	movw	r24, r14
     e7c:	b6 01       	movw	r22, r12
     e7e:	09 95       	icall
     e80:	ec 89       	ldd	r30, Y+20	; 0x14
     e82:	fd 89       	ldd	r31, Y+21	; 0x15
     e84:	c7 01       	movw	r24, r14
     e86:	b6 01       	movw	r22, r12
     e88:	6f 5f       	subi	r22, 0xFF	; 255
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	41 2f       	mov	r20, r17
     e92:	09 95       	icall
     e94:	e8 89       	ldd	r30, Y+16	; 0x10
     e96:	f9 89       	ldd	r31, Y+17	; 0x11
     e98:	09 95       	icall
     e9a:	ec 85       	ldd	r30, Y+12	; 0x0c
     e9c:	fd 85       	ldd	r31, Y+13	; 0x0d
     e9e:	09 95       	icall
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	08 95       	ret

00000eb2 <WIZCHIP_READ>:
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	6b 01       	movw	r12, r22
     ec4:	7c 01       	movw	r14, r24
     ec6:	02 e0       	ldi	r16, 0x02	; 2
     ec8:	11 e0       	ldi	r17, 0x01	; 1
     eca:	d8 01       	movw	r26, r16
     ecc:	1a 96       	adiw	r26, 0x0a	; 10
     ece:	ed 91       	ld	r30, X+
     ed0:	fc 91       	ld	r31, X
     ed2:	1b 97       	sbiw	r26, 0x0b	; 11
     ed4:	09 95       	icall
     ed6:	d8 01       	movw	r26, r16
     ed8:	1e 96       	adiw	r26, 0x0e	; 14
     eda:	ed 91       	ld	r30, X+
     edc:	fc 91       	ld	r31, X
     ede:	1f 97       	sbiw	r26, 0x0f	; 15
     ee0:	09 95       	icall
     ee2:	d8 01       	movw	r26, r16
     ee4:	52 96       	adiw	r26, 0x12	; 18
     ee6:	ed 91       	ld	r30, X+
     ee8:	fc 91       	ld	r31, X
     eea:	53 97       	sbiw	r26, 0x13	; 19
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	09 95       	icall
     ef2:	c8 2f       	mov	r28, r24
     ef4:	d0 e0       	ldi	r29, 0x00	; 0
     ef6:	dc 2f       	mov	r29, r28
     ef8:	cc 27       	eor	r28, r28
     efa:	d8 01       	movw	r26, r16
     efc:	52 96       	adiw	r26, 0x12	; 18
     efe:	ed 91       	ld	r30, X+
     f00:	fc 91       	ld	r31, X
     f02:	53 97       	sbiw	r26, 0x13	; 19
     f04:	c7 01       	movw	r24, r14
     f06:	b6 01       	movw	r22, r12
     f08:	6f 5f       	subi	r22, 0xFF	; 255
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	09 95       	icall
     f12:	c8 2b       	or	r28, r24
     f14:	d8 01       	movw	r26, r16
     f16:	50 96       	adiw	r26, 0x10	; 16
     f18:	ed 91       	ld	r30, X+
     f1a:	fc 91       	ld	r31, X
     f1c:	51 97       	sbiw	r26, 0x11	; 17
     f1e:	09 95       	icall
     f20:	d8 01       	movw	r26, r16
     f22:	1c 96       	adiw	r26, 0x0c	; 12
     f24:	ed 91       	ld	r30, X+
     f26:	fc 91       	ld	r31, X
     f28:	1d 97       	sbiw	r26, 0x0d	; 13
     f2a:	09 95       	icall
     f2c:	ce 01       	movw	r24, r28
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	08 95       	ret

00000f40 <setTMSR>:
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	d8 2f       	mov	r29, r24
     f4e:	c6 2f       	mov	r28, r22
     f50:	8e 7f       	andi	r24, 0xFE	; 254
     f52:	c8 2e       	mov	r12, r24
     f54:	d1 2c       	mov	r13, r1
     f56:	80 ee       	ldi	r24, 0xE0	; 224
     f58:	c8 1a       	sub	r12, r24
     f5a:	8f e7       	ldi	r24, 0x7F	; 127
     f5c:	d8 0a       	sbc	r13, r24
     f5e:	e1 2c       	mov	r14, r1
     f60:	f1 2c       	mov	r15, r1
     f62:	c7 01       	movw	r24, r14
     f64:	b6 01       	movw	r22, r12
     f66:	a5 df       	rcall	.-182    	; 0xeb2 <WIZCHIP_READ>
     f68:	d0 ff       	sbrs	r29, 0
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <setTMSR+0x34>
     f6c:	ac 01       	movw	r20, r24
     f6e:	44 27       	eor	r20, r20
     f70:	4c 2b       	or	r20, r28
     f72:	05 c0       	rjmp	.+10     	; 0xf7e <setTMSR+0x3e>
     f74:	4c 2f       	mov	r20, r28
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	54 2f       	mov	r21, r20
     f7a:	44 27       	eor	r20, r20
     f7c:	48 2b       	or	r20, r24
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	64 df       	rcall	.-312    	; 0xe4c <WIZCHIP_WRITE>
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	08 95       	ret

00000f92 <getTMSR>:
     f92:	80 ff       	sbrs	r24, 0
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <getTMSR+0x16>
     f96:	8e 7f       	andi	r24, 0xFE	; 254
     f98:	68 2f       	mov	r22, r24
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	60 5e       	subi	r22, 0xE0	; 224
     f9e:	7f 47       	sbci	r23, 0x7F	; 127
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	86 cf       	rjmp	.-244    	; 0xeb2 <WIZCHIP_READ>
     fa6:	08 95       	ret
     fa8:	8e 7f       	andi	r24, 0xFE	; 254
     faa:	68 2f       	mov	r22, r24
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	60 5e       	subi	r22, 0xE0	; 224
     fb0:	7f 47       	sbci	r23, 0x7F	; 127
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	7d df       	rcall	.-262    	; 0xeb2 <WIZCHIP_READ>
     fb8:	89 2f       	mov	r24, r25
     fba:	08 95       	ret

00000fbc <setRMSR>:
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	d8 2f       	mov	r29, r24
     fca:	c6 2f       	mov	r28, r22
     fcc:	8e 7f       	andi	r24, 0xFE	; 254
     fce:	c8 2e       	mov	r12, r24
     fd0:	d1 2c       	mov	r13, r1
     fd2:	88 ed       	ldi	r24, 0xD8	; 216
     fd4:	c8 1a       	sub	r12, r24
     fd6:	8f e7       	ldi	r24, 0x7F	; 127
     fd8:	d8 0a       	sbc	r13, r24
     fda:	e1 2c       	mov	r14, r1
     fdc:	f1 2c       	mov	r15, r1
     fde:	c7 01       	movw	r24, r14
     fe0:	b6 01       	movw	r22, r12
     fe2:	67 df       	rcall	.-306    	; 0xeb2 <WIZCHIP_READ>
     fe4:	d0 ff       	sbrs	r29, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <setRMSR+0x34>
     fe8:	ac 01       	movw	r20, r24
     fea:	44 27       	eor	r20, r20
     fec:	4c 2b       	or	r20, r28
     fee:	05 c0       	rjmp	.+10     	; 0xffa <setRMSR+0x3e>
     ff0:	4c 2f       	mov	r20, r28
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	54 2f       	mov	r21, r20
     ff6:	44 27       	eor	r20, r20
     ff8:	48 2b       	or	r20, r24
     ffa:	c7 01       	movw	r24, r14
     ffc:	b6 01       	movw	r22, r12
     ffe:	26 df       	rcall	.-436    	; 0xe4c <WIZCHIP_WRITE>
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	08 95       	ret

0000100e <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	c8 2f       	mov	r28, r24
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
    1026:	c1 2c       	mov	r12, r1
    1028:	d1 2c       	mov	r13, r1
    102a:	76 01       	movw	r14, r12
    102c:	c3 94       	inc	r12
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <getSn_TX_FSR+0x26>
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
    1030:	6b 01       	movw	r12, r22
    1032:	7c 01       	movw	r14, r24
{
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
    1034:	0c 2f       	mov	r16, r28
    1036:	10 e0       	ldi	r17, 0x00	; 0
    1038:	08 5f       	subi	r16, 0xF8	; 248
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
    103c:	00 24       	eor	r0, r0
    103e:	16 95       	lsr	r17
    1040:	07 95       	ror	r16
    1042:	07 94       	ror	r0
    1044:	16 95       	lsr	r17
    1046:	07 95       	ror	r16
    1048:	07 94       	ror	r0
    104a:	10 2f       	mov	r17, r16
    104c:	00 2d       	mov	r16, r0
    104e:	b8 01       	movw	r22, r16
    1050:	6c 5d       	subi	r22, 0xDC	; 220
    1052:	7f 47       	sbci	r23, 0x7F	; 127
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	2c df       	rcall	.-424    	; 0xeb2 <WIZCHIP_READ>
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	5c 01       	movw	r10, r24
    1060:	99 24       	eor	r9, r9
    1062:	88 24       	eor	r8, r8
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
    1064:	b8 01       	movw	r22, r16
    1066:	6a 5d       	subi	r22, 0xDA	; 218
    1068:	7f 47       	sbci	r23, 0x7F	; 127
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	21 df       	rcall	.-446    	; 0xeb2 <WIZCHIP_READ>
    1070:	a0 e0       	ldi	r26, 0x00	; 0
    1072:	b0 e0       	ldi	r27, 0x00	; 0
{
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	68 29       	or	r22, r8
    107a:	79 29       	or	r23, r9
    107c:	8a 29       	or	r24, r10
    107e:	9b 29       	or	r25, r11
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
    1080:	c6 16       	cp	r12, r22
    1082:	d7 06       	cpc	r13, r23
    1084:	e8 06       	cpc	r14, r24
    1086:	f9 06       	cpc	r15, r25
    1088:	99 f6       	brne	.-90     	; 0x1030 <getSn_TX_FSR+0x22>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
   }                                                                       
   return free_tx_size;                                                    
}                                                                          
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	9f 90       	pop	r9
    109e:	8f 90       	pop	r8
    10a0:	08 95       	ret

000010a2 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
    10a2:	7f 92       	push	r7
    10a4:	8f 92       	push	r8
    10a6:	9f 92       	push	r9
    10a8:	af 92       	push	r10
    10aa:	bf 92       	push	r11
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	78 2e       	mov	r7, r24
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
    10be:	c1 2c       	mov	r12, r1
    10c0:	d1 2c       	mov	r13, r1
    10c2:	76 01       	movw	r14, r12
    10c4:	c3 94       	inc	r12
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <getSn_RX_RSR+0x2a>
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
      if(received_rx_size == received_rx_size1) break;                                                                         
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
    10c8:	6c 01       	movw	r12, r24
    10ca:	7d 01       	movw	r14, r26
{
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
    10cc:	07 2d       	mov	r16, r7
    10ce:	10 e0       	ldi	r17, 0x00	; 0
    10d0:	e8 01       	movw	r28, r16
    10d2:	28 96       	adiw	r28, 0x08	; 8
    10d4:	00 24       	eor	r0, r0
    10d6:	d6 95       	lsr	r29
    10d8:	c7 95       	ror	r28
    10da:	07 94       	ror	r0
    10dc:	d6 95       	lsr	r29
    10de:	c7 95       	ror	r28
    10e0:	07 94       	ror	r0
    10e2:	dc 2f       	mov	r29, r28
    10e4:	c0 2d       	mov	r28, r0
    10e6:	be 01       	movw	r22, r28
    10e8:	68 5d       	subi	r22, 0xD8	; 216
    10ea:	7f 47       	sbci	r23, 0x7F	; 127
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	e0 de       	rcall	.-576    	; 0xeb2 <WIZCHIP_READ>
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	5c 01       	movw	r10, r24
    10f8:	99 24       	eor	r9, r9
    10fa:	88 24       	eor	r8, r8
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
    10fc:	c6 5d       	subi	r28, 0xD6	; 214
    10fe:	df 47       	sbci	r29, 0x7F	; 127
    1100:	be 01       	movw	r22, r28
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	d5 de       	rcall	.-598    	; 0xeb2 <WIZCHIP_READ>
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
{
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
    110c:	88 29       	or	r24, r8
    110e:	99 29       	or	r25, r9
    1110:	aa 29       	or	r26, r10
    1112:	bb 29       	or	r27, r11
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
      if(received_rx_size == received_rx_size1) break;                                                                         
    1114:	c8 16       	cp	r12, r24
    1116:	d9 06       	cpc	r13, r25
    1118:	ea 06       	cpc	r14, r26
    111a:	fb 06       	cpc	r15, r27
    111c:	a9 f6       	brne	.-86     	; 0x10c8 <getSn_RX_RSR+0x26>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
    111e:	f8 01       	movw	r30, r16
    1120:	ee 56       	subi	r30, 0x6E	; 110
    1122:	fc 4f       	sbci	r31, 0xFC	; 252
    1124:	20 81       	ld	r18, Z
    1126:	21 ff       	sbrs	r18, 1
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <__stack+0x35>
    112a:	41 e0       	ldi	r20, 0x01	; 1
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	03 c0       	rjmp	.+6      	; 0x113a <__stack+0x3b>
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	ba 01       	movw	r22, r20
    113a:	8a 01       	movw	r16, r20
    113c:	9b 01       	movw	r18, r22
    113e:	08 0f       	add	r16, r24
    1140:	19 1f       	adc	r17, r25
    1142:	2a 1f       	adc	r18, r26
    1144:	3b 1f       	adc	r19, r27
    1146:	c9 01       	movw	r24, r18
    1148:	b8 01       	movw	r22, r16
}
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	9f 90       	pop	r9
    1160:	8f 90       	pop	r8
    1162:	7f 90       	pop	r7
    1164:	08 95       	ret

00001166 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
    1166:	8f 92       	push	r8
    1168:	9f 92       	push	r9
    116a:	af 92       	push	r10
    116c:	bf 92       	push	r11
    116e:	cf 92       	push	r12
    1170:	df 92       	push	r13
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
   uint32_t i = 0;
   if(len == 0)  return;
    117c:	21 15       	cp	r18, r1
    117e:	31 05       	cpc	r19, r1
    1180:	41 05       	cpc	r20, r1
    1182:	51 05       	cpc	r21, r1
    1184:	69 f1       	breq	.+90     	; 0x11e0 <wiz_send_data+0x7a>
    1186:	49 01       	movw	r8, r18
    1188:	5a 01       	movw	r10, r20
    118a:	eb 01       	movw	r28, r22
    118c:	18 2f       	mov	r17, r24
    118e:	c1 2c       	mov	r12, r1
    1190:	d1 2c       	mov	r13, r1
    1192:	76 01       	movw	r14, r12
    1194:	20 c0       	rjmp	.+64     	; 0x11d6 <wiz_send_data+0x70>
   
   for(i = 0; i < len ; i += 2)
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
    1196:	fe 01       	movw	r30, r28
    1198:	ec 0d       	add	r30, r12
    119a:	fd 1d       	adc	r31, r13
    119c:	40 81       	ld	r20, Z
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	54 2f       	mov	r21, r20
    11a2:	44 27       	eor	r20, r20
    11a4:	81 81       	ldd	r24, Z+1	; 0x01
    11a6:	61 2f       	mov	r22, r17
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	68 5f       	subi	r22, 0xF8	; 248
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	00 24       	eor	r0, r0
    11b0:	76 95       	lsr	r23
    11b2:	67 95       	ror	r22
    11b4:	07 94       	ror	r0
    11b6:	76 95       	lsr	r23
    11b8:	67 95       	ror	r22
    11ba:	07 94       	ror	r0
    11bc:	76 2f       	mov	r23, r22
    11be:	60 2d       	mov	r22, r0
    11c0:	62 5d       	subi	r22, 0xD2	; 210
    11c2:	7f 47       	sbci	r23, 0x7F	; 127
    11c4:	48 2b       	or	r20, r24
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	40 de       	rcall	.-896    	; 0xe4c <WIZCHIP_WRITE>
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint32_t i = 0;
   if(len == 0)  return;
   
   for(i = 0; i < len ; i += 2)
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	c8 0e       	add	r12, r24
    11d0:	d1 1c       	adc	r13, r1
    11d2:	e1 1c       	adc	r14, r1
    11d4:	f1 1c       	adc	r15, r1
    11d6:	c8 14       	cp	r12, r8
    11d8:	d9 04       	cpc	r13, r9
    11da:	ea 04       	cpc	r14, r10
    11dc:	fb 04       	cpc	r15, r11
    11de:	d8 f2       	brcs	.-74     	; 0x1196 <wiz_send_data+0x30>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	9f 90       	pop	r9
    11f4:	8f 90       	pop	r8
    11f6:	08 95       	ret

000011f8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
    120e:	21 15       	cp	r18, r1
    1210:	31 05       	cpc	r19, r1
    1212:	41 05       	cpc	r20, r1
    1214:	51 05       	cpc	r21, r1
    1216:	a9 f1       	breq	.+106    	; 0x1282 <wiz_recv_data+0x8a>
    1218:	49 01       	movw	r8, r18
    121a:	5a 01       	movw	r10, r20
    121c:	eb 01       	movw	r28, r22
    121e:	18 2f       	mov	r17, r24
    1220:	c1 2c       	mov	r12, r1
    1222:	d1 2c       	mov	r13, r1
    1224:	76 01       	movw	r14, r12
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	22 c0       	rjmp	.+68     	; 0x126e <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
   {
      if((i & 0x01)==0)
    122a:	c0 fc       	sbrc	r12, 0
    122c:	17 c0       	rjmp	.+46     	; 0x125c <wiz_recv_data+0x64>
      {
         rd = getSn_RX_FIFOR(sn);
    122e:	61 2f       	mov	r22, r17
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	68 5f       	subi	r22, 0xF8	; 248
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	00 24       	eor	r0, r0
    1238:	76 95       	lsr	r23
    123a:	67 95       	ror	r22
    123c:	07 94       	ror	r0
    123e:	76 95       	lsr	r23
    1240:	67 95       	ror	r22
    1242:	07 94       	ror	r0
    1244:	76 2f       	mov	r23, r22
    1246:	60 2d       	mov	r22, r0
    1248:	60 5d       	subi	r22, 0xD0	; 208
    124a:	7f 47       	sbci	r23, 0x7F	; 127
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	30 de       	rcall	.-928    	; 0xeb2 <WIZCHIP_READ>
         wizdata[i]   = (uint8_t)(rd >> 8);
    1252:	fe 01       	movw	r30, r28
    1254:	ec 0d       	add	r30, r12
    1256:	fd 1d       	adc	r31, r13
    1258:	90 83       	st	Z, r25
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <wiz_recv_data+0x6c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
    125c:	fe 01       	movw	r30, r28
    125e:	ec 0d       	add	r30, r12
    1260:	fd 1d       	adc	r31, r13
    1262:	80 83       	st	Z, r24
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
      
   for(i = 0; i < len; i++)
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	c9 1a       	sub	r12, r25
    1268:	d9 0a       	sbc	r13, r25
    126a:	e9 0a       	sbc	r14, r25
    126c:	f9 0a       	sbc	r15, r25
    126e:	c8 14       	cp	r12, r8
    1270:	d9 04       	cpc	r13, r9
    1272:	ea 04       	cpc	r14, r10
    1274:	fb 04       	cpc	r15, r11
    1276:	c8 f2       	brcs	.-78     	; 0x122a <wiz_recv_data+0x32>
         rd = getSn_RX_FIFOR(sn);
         wizdata[i]   = (uint8_t)(rd >> 8);
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
    1278:	e1 2f       	mov	r30, r17
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	e6 57       	subi	r30, 0x76	; 118
    127e:	fc 4f       	sbci	r31, 0xFC	; 252
    1280:	80 83       	st	Z, r24
}
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	9f 90       	pop	r9
    1296:	8f 90       	pop	r8
    1298:	08 95       	ret

0000129a <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint32_t len)
{
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	cf 93       	push	r28
    12ac:	c8 2f       	mov	r28, r24
    12ae:	6a 01       	movw	r12, r20
    12b0:	7b 01       	movw	r14, r22
   uint32_t i = 0;
   for(i = 0; i < len ; i += 2) getSn_RX_FIFOR(sn);
    12b2:	81 2c       	mov	r8, r1
    12b4:	91 2c       	mov	r9, r1
    12b6:	54 01       	movw	r10, r8
    12b8:	17 c0       	rjmp	.+46     	; 0x12e8 <wiz_recv_ignore+0x4e>
    12ba:	6c 2f       	mov	r22, r28
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	68 5f       	subi	r22, 0xF8	; 248
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	00 24       	eor	r0, r0
    12c4:	76 95       	lsr	r23
    12c6:	67 95       	ror	r22
    12c8:	07 94       	ror	r0
    12ca:	76 95       	lsr	r23
    12cc:	67 95       	ror	r22
    12ce:	07 94       	ror	r0
    12d0:	76 2f       	mov	r23, r22
    12d2:	60 2d       	mov	r22, r0
    12d4:	60 5d       	subi	r22, 0xD0	; 208
    12d6:	7f 47       	sbci	r23, 0x7F	; 127
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	ea dd       	rcall	.-1068   	; 0xeb2 <WIZCHIP_READ>
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	88 0e       	add	r8, r24
    12e2:	91 1c       	adc	r9, r1
    12e4:	a1 1c       	adc	r10, r1
    12e6:	b1 1c       	adc	r11, r1
    12e8:	8c 14       	cp	r8, r12
    12ea:	9d 04       	cpc	r9, r13
    12ec:	ae 04       	cpc	r10, r14
    12ee:	bf 04       	cpc	r11, r15
    12f0:	20 f3       	brcs	.-56     	; 0x12ba <wiz_recv_ignore+0x20>
}
    12f2:	cf 91       	pop	r28
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	df 90       	pop	r13
    12fa:	cf 90       	pop	r12
    12fc:	bf 90       	pop	r11
    12fe:	af 90       	pop	r10
    1300:	9f 90       	pop	r9
    1302:	8f 90       	pop	r8
    1304:	08 95       	ret

00001306 <wizchip_cris_enter>:
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
    1306:	08 95       	ret

00001308 <wizchip_cris_exit>:
    1308:	08 95       	ret

0000130a <wizchip_cs_select>:
    130a:	08 95       	ret

0000130c <wizchip_cs_deselect>:
    130c:	08 95       	ret

0000130e <wizchip_bus_readdata>:
    130e:	fb 01       	movw	r30, r22
    1310:	80 81       	ld	r24, Z
    1312:	08 95       	ret

00001314 <wizchip_bus_writedata>:
    1314:	fb 01       	movw	r30, r22
    1316:	40 83       	st	Z, r20
    1318:	08 95       	ret

0000131a <reg_wizchip_cris_cbfunc>:
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	19 f0       	breq	.+6      	; 0x1324 <reg_wizchip_cris_cbfunc+0xa>
    131e:	61 15       	cp	r22, r1
    1320:	71 05       	cpc	r23, r1
    1322:	59 f4       	brne	.+22     	; 0x133a <reg_wizchip_cris_cbfunc+0x20>
    1324:	e2 e0       	ldi	r30, 0x02	; 2
    1326:	f1 e0       	ldi	r31, 0x01	; 1
    1328:	83 e8       	ldi	r24, 0x83	; 131
    132a:	99 e0       	ldi	r25, 0x09	; 9
    132c:	93 87       	std	Z+11, r25	; 0x0b
    132e:	82 87       	std	Z+10, r24	; 0x0a
    1330:	84 e8       	ldi	r24, 0x84	; 132
    1332:	99 e0       	ldi	r25, 0x09	; 9
    1334:	95 87       	std	Z+13, r25	; 0x0d
    1336:	84 87       	std	Z+12, r24	; 0x0c
    1338:	08 95       	ret
    133a:	e2 e0       	ldi	r30, 0x02	; 2
    133c:	f1 e0       	ldi	r31, 0x01	; 1
    133e:	93 87       	std	Z+11, r25	; 0x0b
    1340:	82 87       	std	Z+10, r24	; 0x0a
    1342:	75 87       	std	Z+13, r23	; 0x0d
    1344:	64 87       	std	Z+12, r22	; 0x0c
    1346:	08 95       	ret

00001348 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
    1348:	6f 92       	push	r6
    134a:	7f 92       	push	r7
    134c:	8f 92       	push	r8
    134e:	9f 92       	push	r9
    1350:	af 92       	push	r10
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	00 d0       	rcall	.+0      	; 0x1366 <wizchip_sw_reset+0x1e>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <wizchip_sw_reset+0x20>
    1368:	00 d0       	rcall	.+0      	; 0x136a <wizchip_sw_reset+0x22>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
    136e:	68 e0       	ldi	r22, 0x08	; 8
    1370:	70 e8       	ldi	r23, 0x80	; 128
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9d dd       	rcall	.-1222   	; 0xeb2 <WIZCHIP_READ>
    1378:	99 83       	std	Y+1, r25	; 0x01
    137a:	68 e0       	ldi	r22, 0x08	; 8
    137c:	70 e8       	ldi	r23, 0x80	; 128
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	97 dd       	rcall	.-1234   	; 0xeb2 <WIZCHIP_READ>
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	6a e0       	ldi	r22, 0x0A	; 10
    1388:	70 e8       	ldi	r23, 0x80	; 128
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	91 dd       	rcall	.-1246   	; 0xeb2 <WIZCHIP_READ>
    1390:	9b 83       	std	Y+3, r25	; 0x03
    1392:	6a e0       	ldi	r22, 0x0A	; 10
    1394:	70 e8       	ldi	r23, 0x80	; 128
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	8b dd       	rcall	.-1258   	; 0xeb2 <WIZCHIP_READ>
    139c:	8c 83       	std	Y+4, r24	; 0x04
    139e:	6c e0       	ldi	r22, 0x0C	; 12
    13a0:	70 e8       	ldi	r23, 0x80	; 128
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	85 dd       	rcall	.-1270   	; 0xeb2 <WIZCHIP_READ>
    13a8:	9d 83       	std	Y+5, r25	; 0x05
    13aa:	6c e0       	ldi	r22, 0x0C	; 12
    13ac:	70 e8       	ldi	r23, 0x80	; 128
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	7f dd       	rcall	.-1282   	; 0xeb2 <WIZCHIP_READ>
    13b4:	8e 83       	std	Y+6, r24	; 0x06
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
    13b6:	60 e1       	ldi	r22, 0x10	; 16
    13b8:	70 e8       	ldi	r23, 0x80	; 128
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	79 dd       	rcall	.-1294   	; 0xeb2 <WIZCHIP_READ>
    13c0:	79 2e       	mov	r7, r25
    13c2:	60 e1       	ldi	r22, 0x10	; 16
    13c4:	70 e8       	ldi	r23, 0x80	; 128
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	73 dd       	rcall	.-1306   	; 0xeb2 <WIZCHIP_READ>
    13cc:	68 2e       	mov	r6, r24
    13ce:	62 e1       	ldi	r22, 0x12	; 18
    13d0:	70 e8       	ldi	r23, 0x80	; 128
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	6d dd       	rcall	.-1318   	; 0xeb2 <WIZCHIP_READ>
    13d8:	99 2e       	mov	r9, r25
    13da:	62 e1       	ldi	r22, 0x12	; 18
    13dc:	70 e8       	ldi	r23, 0x80	; 128
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	67 dd       	rcall	.-1330   	; 0xeb2 <WIZCHIP_READ>
    13e4:	88 2e       	mov	r8, r24
    13e6:	64 e1       	ldi	r22, 0x14	; 20
    13e8:	70 e8       	ldi	r23, 0x80	; 128
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	61 dd       	rcall	.-1342   	; 0xeb2 <WIZCHIP_READ>
    13f0:	b9 2e       	mov	r11, r25
    13f2:	64 e1       	ldi	r22, 0x14	; 20
    13f4:	70 e8       	ldi	r23, 0x80	; 128
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	5b dd       	rcall	.-1354   	; 0xeb2 <WIZCHIP_READ>
    13fc:	a8 2e       	mov	r10, r24
    13fe:	66 e1       	ldi	r22, 0x16	; 22
    1400:	70 e8       	ldi	r23, 0x80	; 128
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	55 dd       	rcall	.-1366   	; 0xeb2 <WIZCHIP_READ>
    1408:	e9 2e       	mov	r14, r25
    140a:	66 e1       	ldi	r22, 0x16	; 22
    140c:	70 e8       	ldi	r23, 0x80	; 128
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	4f dd       	rcall	.-1378   	; 0xeb2 <WIZCHIP_READ>
    1414:	c8 2e       	mov	r12, r24
    1416:	68 e1       	ldi	r22, 0x18	; 24
    1418:	70 e8       	ldi	r23, 0x80	; 128
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	49 dd       	rcall	.-1390   	; 0xeb2 <WIZCHIP_READ>
    1420:	09 2f       	mov	r16, r25
    1422:	68 e1       	ldi	r22, 0x18	; 24
    1424:	70 e8       	ldi	r23, 0x80	; 128
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	43 dd       	rcall	.-1402   	; 0xeb2 <WIZCHIP_READ>
    142c:	d8 2e       	mov	r13, r24
    142e:	6a e1       	ldi	r22, 0x1A	; 26
    1430:	70 e8       	ldi	r23, 0x80	; 128
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	3d dd       	rcall	.-1414   	; 0xeb2 <WIZCHIP_READ>
    1438:	19 2f       	mov	r17, r25
    143a:	6a e1       	ldi	r22, 0x1A	; 26
    143c:	70 e8       	ldi	r23, 0x80	; 128
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	37 dd       	rcall	.-1426   	; 0xeb2 <WIZCHIP_READ>
    1444:	f8 2e       	mov	r15, r24
    1446:	10 92 00 80 	sts	0x8000, r1	; 0x808000 <__bss_end+0x78ed>
   setMR(MR_RST);
    144a:	80 e8       	ldi	r24, 0x80	; 128
    144c:	80 93 01 80 	sts	0x8001, r24	; 0x808001 <__bss_end+0x78ee>
    1450:	49 81       	ldd	r20, Y+1	; 0x01
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	54 2f       	mov	r21, r20
    1456:	44 27       	eor	r20, r20
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	48 0f       	add	r20, r24
    145c:	51 1d       	adc	r21, r1
    145e:	68 e0       	ldi	r22, 0x08	; 8
    1460:	70 e8       	ldi	r23, 0x80	; 128
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	f2 dc       	rcall	.-1564   	; 0xe4c <WIZCHIP_WRITE>
    1468:	4b 81       	ldd	r20, Y+3	; 0x03
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	54 2f       	mov	r21, r20
    146e:	44 27       	eor	r20, r20
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	48 0f       	add	r20, r24
    1474:	51 1d       	adc	r21, r1
    1476:	6a e0       	ldi	r22, 0x0A	; 10
    1478:	70 e8       	ldi	r23, 0x80	; 128
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	e6 dc       	rcall	.-1588   	; 0xe4c <WIZCHIP_WRITE>
    1480:	4d 81       	ldd	r20, Y+5	; 0x05
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	54 2f       	mov	r21, r20
    1486:	44 27       	eor	r20, r20
    1488:	8e 81       	ldd	r24, Y+6	; 0x06
    148a:	48 0f       	add	r20, r24
    148c:	51 1d       	adc	r21, r1
    148e:	6c e0       	ldi	r22, 0x0C	; 12
    1490:	70 e8       	ldi	r23, 0x80	; 128
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	da dc       	rcall	.-1612   	; 0xe4c <WIZCHIP_WRITE>
    1498:	47 2d       	mov	r20, r7
   setGAR(gw);
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	54 2f       	mov	r21, r20
    149e:	44 27       	eor	r20, r20
    14a0:	46 0d       	add	r20, r6
    14a2:	51 1d       	adc	r21, r1
    14a4:	60 e1       	ldi	r22, 0x10	; 16
    14a6:	70 e8       	ldi	r23, 0x80	; 128
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	cf dc       	rcall	.-1634   	; 0xe4c <WIZCHIP_WRITE>
    14ae:	49 2d       	mov	r20, r9
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	54 2f       	mov	r21, r20
    14b4:	44 27       	eor	r20, r20
    14b6:	48 0d       	add	r20, r8
    14b8:	51 1d       	adc	r21, r1
    14ba:	62 e1       	ldi	r22, 0x12	; 18
    14bc:	70 e8       	ldi	r23, 0x80	; 128
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	c4 dc       	rcall	.-1656   	; 0xe4c <WIZCHIP_WRITE>
    14c4:	4b 2d       	mov	r20, r11
   setSUBR(sn);
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	54 2f       	mov	r21, r20
    14ca:	44 27       	eor	r20, r20
    14cc:	4a 0d       	add	r20, r10
    14ce:	51 1d       	adc	r21, r1
    14d0:	64 e1       	ldi	r22, 0x14	; 20
    14d2:	70 e8       	ldi	r23, 0x80	; 128
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	b9 dc       	rcall	.-1678   	; 0xe4c <WIZCHIP_WRITE>
    14da:	4e 2d       	mov	r20, r14
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	54 2f       	mov	r21, r20
    14e0:	44 27       	eor	r20, r20
    14e2:	4c 0d       	add	r20, r12
    14e4:	51 1d       	adc	r21, r1
    14e6:	66 e1       	ldi	r22, 0x16	; 22
    14e8:	70 e8       	ldi	r23, 0x80	; 128
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	ae dc       	rcall	.-1700   	; 0xe4c <WIZCHIP_WRITE>
    14f0:	40 2f       	mov	r20, r16
   setSIPR(sip);
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	54 2f       	mov	r21, r20
    14f6:	44 27       	eor	r20, r20
    14f8:	4d 0d       	add	r20, r13
    14fa:	51 1d       	adc	r21, r1
    14fc:	68 e1       	ldi	r22, 0x18	; 24
    14fe:	70 e8       	ldi	r23, 0x80	; 128
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a3 dc       	rcall	.-1722   	; 0xe4c <WIZCHIP_WRITE>
    1506:	41 2f       	mov	r20, r17
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	54 2f       	mov	r21, r20
    150c:	44 27       	eor	r20, r20
    150e:	4f 0d       	add	r20, r15
    1510:	51 1d       	adc	r21, r1
    1512:	6a e1       	ldi	r22, 0x1A	; 26
    1514:	70 e8       	ldi	r23, 0x80	; 128
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	98 dc       	rcall	.-1744   	; 0xe4c <WIZCHIP_WRITE>
    151c:	26 96       	adiw	r28, 0x06	; 6
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
}
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	08 95       	ret

00001546 <wizchip_init>:
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	7c 01       	movw	r14, r24
    1552:	8b 01       	movw	r16, r22
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
    1554:	f9 de       	rcall	.-526    	; 0x1348 <wizchip_sw_reset>
   if(txsize)
    1556:	e1 14       	cp	r14, r1
    1558:	f1 04       	cpc	r15, r1
    155a:	69 f4       	brne	.+26     	; 0x1576 <wizchip_init+0x30>
    155c:	1f c0       	rjmp	.+62     	; 0x159c <wizchip_init+0x56>
      tmp = 0;
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] > 64) 
    155e:	f7 01       	movw	r30, r14
    1560:	e8 0f       	add	r30, r24
    1562:	f1 1d       	adc	r31, r1
    1564:	87 fd       	sbrc	r24, 7
    1566:	fa 95       	dec	r31
    1568:	90 81       	ld	r25, Z
    156a:	91 34       	cpi	r25, 0x41	; 65
    156c:	08 f0       	brcs	.+2      	; 0x1570 <wizchip_init+0x2a>
    156e:	3b c0       	rjmp	.+118    	; 0x15e6 <wizchip_init+0xa0>
				return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
			tmp += txsize[i];
    1570:	29 0f       	add	r18, r25
   if(txsize)
   {
      tmp = 0;
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	02 c0       	rjmp	.+4      	; 0x157a <wizchip_init+0x34>
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	84 f3       	brlt	.-32     	; 0x155e <wizchip_init+0x18>
				return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
			tmp += txsize[i];
			if(tmp > 128) 
				return -1;
		}
		if(tmp % 8) return -1;
    157e:	27 70       	andi	r18, 0x07	; 7
    1580:	a1 f5       	brne	.+104    	; 0x15ea <wizchip_init+0xa4>
    1582:	c0 e0       	ldi	r28, 0x00	; 0
    1584:	09 c0       	rjmp	.+18     	; 0x1598 <wizchip_init+0x52>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
    1586:	f7 01       	movw	r30, r14
    1588:	ec 0f       	add	r30, r28
    158a:	f1 1d       	adc	r31, r1
    158c:	c7 fd       	sbrc	r28, 7
    158e:	fa 95       	dec	r31
    1590:	60 81       	ld	r22, Z
    1592:	8c 2f       	mov	r24, r28
    1594:	d5 dc       	rcall	.-1622   	; 0xf40 <setTMSR>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    1596:	cf 5f       	subi	r28, 0xFF	; 255
    1598:	c8 30       	cpi	r28, 0x08	; 8
    159a:	ac f3       	brlt	.-22     	; 0x1586 <wizchip_init+0x40>
			setSn_TXBUF_SIZE(i, txsize[i]);
#endif
		}	
   }

   if(rxsize)
    159c:	01 15       	cp	r16, r1
    159e:	11 05       	cpc	r17, r1
    15a0:	69 f4       	brne	.+26     	; 0x15bc <wizchip_init+0x76>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <wizchip_init+0xae>
   {
      tmp = 0;
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
    15a6:	f8 01       	movw	r30, r16
    15a8:	e8 0f       	add	r30, r24
    15aa:	f1 1d       	adc	r31, r1
    15ac:	87 fd       	sbrc	r24, 7
    15ae:	fa 95       	dec	r31
    15b0:	90 81       	ld	r25, Z
    15b2:	91 34       	cpi	r25, 0x41	; 65
    15b4:	e0 f4       	brcc	.+56     	; 0x15ee <wizchip_init+0xa8>
			tmp += rxsize[i];
    15b6:	29 0f       	add	r18, r25

   if(rxsize)
   {
      tmp = 0;
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <wizchip_init+0x7a>
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	8c f3       	brlt	.-30     	; 0x15a6 <wizchip_init+0x60>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
    15c4:	27 70       	andi	r18, 0x07	; 7
    15c6:	a9 f4       	brne	.+42     	; 0x15f2 <wizchip_init+0xac>
    15c8:	c0 e0       	ldi	r28, 0x00	; 0
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <wizchip_init+0x98>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
    15cc:	f8 01       	movw	r30, r16
    15ce:	ec 0f       	add	r30, r28
    15d0:	f1 1d       	adc	r31, r1
    15d2:	c7 fd       	sbrc	r28, 7
    15d4:	fa 95       	dec	r31
    15d6:	60 81       	ld	r22, Z
    15d8:	8c 2f       	mov	r24, r28
    15da:	f0 dc       	rcall	.-1568   	; 0xfbc <setRMSR>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    15dc:	cf 5f       	subi	r28, 0xFF	; 255
    15de:	c8 30       	cpi	r28, 0x08	; 8
    15e0:	ac f3       	brlt	.-22     	; 0x15cc <wizchip_init+0x86>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <wizchip_init+0xae>
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] > 64) 
				return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <wizchip_init+0xae>
			tmp += txsize[i];
			if(tmp > 128) 
				return -1;
		}
		if(tmp % 8) return -1;
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <wizchip_init+0xae>
   {
      tmp = 0;
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <wizchip_init+0xae>
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
}
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	08 95       	ret

00001600 <default_ip_assign>:
}

uint32_t getDHCPLeasetime(void)
{
	return dhcp_lease_time;
}
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	c0 ec       	ldi	r28, 0xC0	; 192
    1606:	d3 e0       	ldi	r29, 0x03	; 3
    1608:	48 81       	ld	r20, Y
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	54 2f       	mov	r21, r20
    160e:	44 27       	eor	r20, r20
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	48 0f       	add	r20, r24
    1614:	51 1d       	adc	r21, r1
    1616:	68 e1       	ldi	r22, 0x18	; 24
    1618:	70 e8       	ldi	r23, 0x80	; 128
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	16 dc       	rcall	.-2004   	; 0xe4c <WIZCHIP_WRITE>
    1620:	4a 81       	ldd	r20, Y+2	; 0x02
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	54 2f       	mov	r21, r20
    1626:	44 27       	eor	r20, r20
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	48 0f       	add	r20, r24
    162c:	51 1d       	adc	r21, r1
    162e:	6a e1       	ldi	r22, 0x1A	; 26
    1630:	70 e8       	ldi	r23, 0x80	; 128
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0a dc       	rcall	.-2028   	; 0xe4c <WIZCHIP_WRITE>
    1638:	c8 eb       	ldi	r28, 0xB8	; 184
    163a:	d3 e0       	ldi	r29, 0x03	; 3
    163c:	48 81       	ld	r20, Y
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	54 2f       	mov	r21, r20
    1642:	44 27       	eor	r20, r20
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	48 0f       	add	r20, r24
    1648:	51 1d       	adc	r21, r1
    164a:	64 e1       	ldi	r22, 0x14	; 20
    164c:	70 e8       	ldi	r23, 0x80	; 128
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	fc db       	rcall	.-2056   	; 0xe4c <WIZCHIP_WRITE>
    1654:	4a 81       	ldd	r20, Y+2	; 0x02
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	54 2f       	mov	r21, r20
    165a:	44 27       	eor	r20, r20
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	48 0f       	add	r20, r24
    1660:	51 1d       	adc	r21, r1
    1662:	66 e1       	ldi	r22, 0x16	; 22
    1664:	70 e8       	ldi	r23, 0x80	; 128
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	f0 db       	rcall	.-2080   	; 0xe4c <WIZCHIP_WRITE>
    166c:	cc eb       	ldi	r28, 0xBC	; 188
    166e:	d3 e0       	ldi	r29, 0x03	; 3
    1670:	48 81       	ld	r20, Y
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	54 2f       	mov	r21, r20
    1676:	44 27       	eor	r20, r20
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	48 0f       	add	r20, r24
    167c:	51 1d       	adc	r21, r1
    167e:	60 e1       	ldi	r22, 0x10	; 16
    1680:	70 e8       	ldi	r23, 0x80	; 128
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	e2 db       	rcall	.-2108   	; 0xe4c <WIZCHIP_WRITE>
    1688:	4a 81       	ldd	r20, Y+2	; 0x02
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	54 2f       	mov	r21, r20
    168e:	44 27       	eor	r20, r20
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	48 0f       	add	r20, r24
    1694:	51 1d       	adc	r21, r1
    1696:	62 e1       	ldi	r22, 0x12	; 18
    1698:	70 e8       	ldi	r23, 0x80	; 128
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	d6 db       	rcall	.-2132   	; 0xe4c <WIZCHIP_WRITE>
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <default_ip_update>:
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	10 92 00 80 	sts	0x8000, r1	; 0x808000 <__bss_end+0x78ed>
    16ae:	80 e8       	ldi	r24, 0x80	; 128
    16b0:	80 93 01 80 	sts	0x8001, r24	; 0x808001 <__bss_end+0x78ee>
    16b4:	a5 df       	rcall	.-182    	; 0x1600 <default_ip_assign>
    16b6:	c0 ef       	ldi	r28, 0xF0	; 240
    16b8:	d4 e0       	ldi	r29, 0x04	; 4
    16ba:	48 81       	ld	r20, Y
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	54 2f       	mov	r21, r20
    16c0:	44 27       	eor	r20, r20
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	48 0f       	add	r20, r24
    16c6:	51 1d       	adc	r21, r1
    16c8:	68 e0       	ldi	r22, 0x08	; 8
    16ca:	70 e8       	ldi	r23, 0x80	; 128
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	bd db       	rcall	.-2182   	; 0xe4c <WIZCHIP_WRITE>
    16d2:	4a 81       	ldd	r20, Y+2	; 0x02
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	54 2f       	mov	r21, r20
    16d8:	44 27       	eor	r20, r20
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	48 0f       	add	r20, r24
    16de:	51 1d       	adc	r21, r1
    16e0:	6a e0       	ldi	r22, 0x0A	; 10
    16e2:	70 e8       	ldi	r23, 0x80	; 128
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	b1 db       	rcall	.-2206   	; 0xe4c <WIZCHIP_WRITE>
    16ea:	4c 81       	ldd	r20, Y+4	; 0x04
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	54 2f       	mov	r21, r20
    16f0:	44 27       	eor	r20, r20
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	48 0f       	add	r20, r24
    16f6:	51 1d       	adc	r21, r1
    16f8:	6c e0       	ldi	r22, 0x0C	; 12
    16fa:	70 e8       	ldi	r23, 0x80	; 128
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a5 db       	rcall	.-2230   	; 0xe4c <WIZCHIP_WRITE>
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <default_ip_conflict>:
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	10 92 00 80 	sts	0x8000, r1	; 0x808000 <__bss_end+0x78ed>
    1710:	80 e8       	ldi	r24, 0x80	; 128
    1712:	80 93 01 80 	sts	0x8001, r24	; 0x808001 <__bss_end+0x78ee>
    1716:	c0 ef       	ldi	r28, 0xF0	; 240
    1718:	d4 e0       	ldi	r29, 0x04	; 4
    171a:	48 81       	ld	r20, Y
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	54 2f       	mov	r21, r20
    1720:	44 27       	eor	r20, r20
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	48 0f       	add	r20, r24
    1726:	51 1d       	adc	r21, r1
    1728:	68 e0       	ldi	r22, 0x08	; 8
    172a:	70 e8       	ldi	r23, 0x80	; 128
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	8d db       	rcall	.-2278   	; 0xe4c <WIZCHIP_WRITE>
    1732:	4a 81       	ldd	r20, Y+2	; 0x02
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	54 2f       	mov	r21, r20
    1738:	44 27       	eor	r20, r20
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	48 0f       	add	r20, r24
    173e:	51 1d       	adc	r21, r1
    1740:	6a e0       	ldi	r22, 0x0A	; 10
    1742:	70 e8       	ldi	r23, 0x80	; 128
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	81 db       	rcall	.-2302   	; 0xe4c <WIZCHIP_WRITE>
    174a:	4c 81       	ldd	r20, Y+4	; 0x04
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	54 2f       	mov	r21, r20
    1750:	44 27       	eor	r20, r20
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	48 0f       	add	r20, r24
    1756:	51 1d       	adc	r21, r1
    1758:	6c e0       	ldi	r22, 0x0C	; 12
    175a:	70 e8       	ldi	r23, 0x80	; 128
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	75 db       	rcall	.-2326   	; 0xe4c <WIZCHIP_WRITE>
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <makeDHCPMSG>:
    1768:	68 e0       	ldi	r22, 0x08	; 8
    176a:	70 e8       	ldi	r23, 0x80	; 128
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 db       	rcall	.-2240   	; 0xeb2 <WIZCHIP_READ>
    1772:	68 e0       	ldi	r22, 0x08	; 8
    1774:	70 e8       	ldi	r23, 0x80	; 128
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9b db       	rcall	.-2250   	; 0xeb2 <WIZCHIP_READ>
    177c:	6a e0       	ldi	r22, 0x0A	; 10
    177e:	70 e8       	ldi	r23, 0x80	; 128
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	96 db       	rcall	.-2260   	; 0xeb2 <WIZCHIP_READ>
    1786:	6a e0       	ldi	r22, 0x0A	; 10
    1788:	70 e8       	ldi	r23, 0x80	; 128
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	91 db       	rcall	.-2270   	; 0xeb2 <WIZCHIP_READ>
    1790:	6c e0       	ldi	r22, 0x0C	; 12
    1792:	70 e8       	ldi	r23, 0x80	; 128
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	8c db       	rcall	.-2280   	; 0xeb2 <WIZCHIP_READ>
    179a:	6c e0       	ldi	r22, 0x0C	; 12
    179c:	70 e8       	ldi	r23, 0x80	; 128
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	87 db       	rcall	.-2290   	; 0xeb2 <WIZCHIP_READ>
    17a4:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <pDHCPMSG>
    17a8:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	80 83       	st	Z, r24
    17b0:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <pDHCPMSG>
    17b4:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    17b8:	81 83       	std	Z+1, r24	; 0x01
    17ba:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <pDHCPMSG>
    17be:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    17c2:	86 e0       	ldi	r24, 0x06	; 6
    17c4:	12 96       	adiw	r26, 0x02	; 2
    17c6:	8c 93       	st	X, r24
    17c8:	12 97       	sbiw	r26, 0x02	; 2
    17ca:	13 96       	adiw	r26, 0x03	; 3
    17cc:	1c 92       	st	X, r1
    17ce:	13 97       	sbiw	r26, 0x03	; 3
    17d0:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <DHCP_XID>
    17d4:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <DHCP_XID+0x1>
    17d8:	20 91 f8 04 	lds	r18, 0x04F8	; 0x8004f8 <DHCP_XID+0x2>
    17dc:	30 91 f9 04 	lds	r19, 0x04F9	; 0x8004f9 <DHCP_XID+0x3>
    17e0:	14 96       	adiw	r26, 0x04	; 4
    17e2:	3c 93       	st	X, r19
    17e4:	14 97       	sbiw	r26, 0x04	; 4
    17e6:	15 96       	adiw	r26, 0x05	; 5
    17e8:	2c 93       	st	X, r18
    17ea:	15 97       	sbiw	r26, 0x05	; 5
    17ec:	16 96       	adiw	r26, 0x06	; 6
    17ee:	9c 93       	st	X, r25
    17f0:	16 97       	sbiw	r26, 0x06	; 6
    17f2:	17 96       	adiw	r26, 0x07	; 7
    17f4:	8c 93       	st	X, r24
    17f6:	17 97       	sbiw	r26, 0x07	; 7
    17f8:	19 96       	adiw	r26, 0x09	; 9
    17fa:	1c 92       	st	X, r1
    17fc:	1e 92       	st	-X, r1
    17fe:	18 97       	sbiw	r26, 0x08	; 8
    1800:	80 e8       	ldi	r24, 0x80	; 128
    1802:	1a 96       	adiw	r26, 0x0a	; 10
    1804:	8c 93       	st	X, r24
    1806:	1a 97       	sbiw	r26, 0x0a	; 10
    1808:	1b 96       	adiw	r26, 0x0b	; 11
    180a:	1c 92       	st	X, r1
    180c:	1b 97       	sbiw	r26, 0x0b	; 11
    180e:	1c 96       	adiw	r26, 0x0c	; 12
    1810:	1c 92       	st	X, r1
    1812:	1c 97       	sbiw	r26, 0x0c	; 12
    1814:	1d 96       	adiw	r26, 0x0d	; 13
    1816:	1c 92       	st	X, r1
    1818:	1d 97       	sbiw	r26, 0x0d	; 13
    181a:	1e 96       	adiw	r26, 0x0e	; 14
    181c:	1c 92       	st	X, r1
    181e:	1e 97       	sbiw	r26, 0x0e	; 14
    1820:	1f 96       	adiw	r26, 0x0f	; 15
    1822:	1c 92       	st	X, r1
    1824:	1f 97       	sbiw	r26, 0x0f	; 15
    1826:	50 96       	adiw	r26, 0x10	; 16
    1828:	1c 92       	st	X, r1
    182a:	50 97       	sbiw	r26, 0x10	; 16
    182c:	51 96       	adiw	r26, 0x11	; 17
    182e:	1c 92       	st	X, r1
    1830:	51 97       	sbiw	r26, 0x11	; 17
    1832:	52 96       	adiw	r26, 0x12	; 18
    1834:	1c 92       	st	X, r1
    1836:	52 97       	sbiw	r26, 0x12	; 18
    1838:	53 96       	adiw	r26, 0x13	; 19
    183a:	1c 92       	st	X, r1
    183c:	53 97       	sbiw	r26, 0x13	; 19
    183e:	54 96       	adiw	r26, 0x14	; 20
    1840:	1c 92       	st	X, r1
    1842:	54 97       	sbiw	r26, 0x14	; 20
    1844:	55 96       	adiw	r26, 0x15	; 21
    1846:	1c 92       	st	X, r1
    1848:	55 97       	sbiw	r26, 0x15	; 21
    184a:	56 96       	adiw	r26, 0x16	; 22
    184c:	1c 92       	st	X, r1
    184e:	56 97       	sbiw	r26, 0x16	; 22
    1850:	57 96       	adiw	r26, 0x17	; 23
    1852:	1c 92       	st	X, r1
    1854:	57 97       	sbiw	r26, 0x17	; 23
    1856:	58 96       	adiw	r26, 0x18	; 24
    1858:	1c 92       	st	X, r1
    185a:	58 97       	sbiw	r26, 0x18	; 24
    185c:	59 96       	adiw	r26, 0x19	; 25
    185e:	1c 92       	st	X, r1
    1860:	59 97       	sbiw	r26, 0x19	; 25
    1862:	5a 96       	adiw	r26, 0x1a	; 26
    1864:	1c 92       	st	X, r1
    1866:	5a 97       	sbiw	r26, 0x1a	; 26
    1868:	5b 96       	adiw	r26, 0x1b	; 27
    186a:	1c 92       	st	X, r1
    186c:	5b 97       	sbiw	r26, 0x1b	; 27
    186e:	e0 ef       	ldi	r30, 0xF0	; 240
    1870:	f4 e0       	ldi	r31, 0x04	; 4
    1872:	80 81       	ld	r24, Z
    1874:	5c 96       	adiw	r26, 0x1c	; 28
    1876:	8c 93       	st	X, r24
    1878:	5c 97       	sbiw	r26, 0x1c	; 28
    187a:	81 81       	ldd	r24, Z+1	; 0x01
    187c:	5d 96       	adiw	r26, 0x1d	; 29
    187e:	8c 93       	st	X, r24
    1880:	5d 97       	sbiw	r26, 0x1d	; 29
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	5e 96       	adiw	r26, 0x1e	; 30
    1886:	8c 93       	st	X, r24
    1888:	5e 97       	sbiw	r26, 0x1e	; 30
    188a:	83 81       	ldd	r24, Z+3	; 0x03
    188c:	5f 96       	adiw	r26, 0x1f	; 31
    188e:	8c 93       	st	X, r24
    1890:	5f 97       	sbiw	r26, 0x1f	; 31
    1892:	84 81       	ldd	r24, Z+4	; 0x04
    1894:	90 96       	adiw	r26, 0x20	; 32
    1896:	8c 93       	st	X, r24
    1898:	90 97       	sbiw	r26, 0x20	; 32
    189a:	85 81       	ldd	r24, Z+5	; 0x05
    189c:	91 96       	adiw	r26, 0x21	; 33
    189e:	8c 93       	st	X, r24
    18a0:	91 97       	sbiw	r26, 0x21	; 33
    18a2:	86 e0       	ldi	r24, 0x06	; 6
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <makeDHCPMSG+0x148>
    18a6:	fd 01       	movw	r30, r26
    18a8:	e8 0f       	add	r30, r24
    18aa:	f1 1d       	adc	r31, r1
    18ac:	14 8e       	std	Z+28, r1	; 0x1c
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
    18b0:	80 31       	cpi	r24, 0x10	; 16
    18b2:	c8 f3       	brcs	.-14     	; 0x18a6 <makeDHCPMSG+0x13e>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <makeDHCPMSG+0x15a>
    18b8:	fd 01       	movw	r30, r26
    18ba:	e8 0f       	add	r30, r24
    18bc:	f1 1d       	adc	r31, r1
    18be:	14 a6       	std	Z+44, r1	; 0x2c
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 34       	cpi	r24, 0x40	; 64
    18c4:	c8 f3       	brcs	.-14     	; 0x18b8 <makeDHCPMSG+0x150>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	07 c0       	rjmp	.+14     	; 0x18d8 <makeDHCPMSG+0x170>
    18ca:	fd 01       	movw	r30, r26
    18cc:	e8 0f       	add	r30, r24
    18ce:	f1 1d       	adc	r31, r1
    18d0:	e4 59       	subi	r30, 0x94	; 148
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	10 82       	st	Z, r1
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	88 23       	and	r24, r24
    18da:	bc f7       	brge	.-18     	; 0x18ca <makeDHCPMSG+0x162>
    18dc:	fd 01       	movw	r30, r26
    18de:	e4 51       	subi	r30, 0x14	; 20
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	83 e6       	ldi	r24, 0x63	; 99
    18e4:	80 83       	st	Z, r24
    18e6:	31 96       	adiw	r30, 0x01	; 1
    18e8:	92 e8       	ldi	r25, 0x82	; 130
    18ea:	90 83       	st	Z, r25
    18ec:	31 96       	adiw	r30, 0x01	; 1
    18ee:	93 e5       	ldi	r25, 0x53	; 83
    18f0:	90 83       	st	Z, r25
    18f2:	a1 51       	subi	r26, 0x11	; 17
    18f4:	bf 4f       	sbci	r27, 0xFF	; 255
    18f6:	8c 93       	st	X, r24
    18f8:	08 95       	ret

000018fa <send_DHCP_DECLINE>:
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	00 d0       	rcall	.+0      	; 0x1904 <send_DHCP_DECLINE+0xa>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <send_DHCP_DECLINE+0xc>
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	2e df       	rcall	.-420    	; 0x1768 <makeDHCPMSG>
    190c:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <pDHCPMSG>
    1910:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    1914:	1a 96       	adiw	r26, 0x0a	; 10
    1916:	1c 92       	st	X, r1
    1918:	1a 97       	sbiw	r26, 0x0a	; 10
    191a:	1b 96       	adiw	r26, 0x0b	; 11
    191c:	1c 92       	st	X, r1
    191e:	1b 97       	sbiw	r26, 0x0b	; 11
    1920:	fd 01       	movw	r30, r26
    1922:	e0 51       	subi	r30, 0x10	; 16
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	85 e3       	ldi	r24, 0x35	; 53
    1928:	80 83       	st	Z, r24
    192a:	31 96       	adiw	r30, 0x01	; 1
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	90 83       	st	Z, r25
    1930:	31 96       	adiw	r30, 0x01	; 1
    1932:	84 e0       	ldi	r24, 0x04	; 4
    1934:	80 83       	st	Z, r24
    1936:	31 96       	adiw	r30, 0x01	; 1
    1938:	2d e3       	ldi	r18, 0x3D	; 61
    193a:	20 83       	st	Z, r18
    193c:	31 96       	adiw	r30, 0x01	; 1
    193e:	27 e0       	ldi	r18, 0x07	; 7
    1940:	20 83       	st	Z, r18
    1942:	31 96       	adiw	r30, 0x01	; 1
    1944:	90 83       	st	Z, r25
    1946:	40 ef       	ldi	r20, 0xF0	; 240
    1948:	54 e0       	ldi	r21, 0x04	; 4
    194a:	fa 01       	movw	r30, r20
    194c:	90 81       	ld	r25, Z
    194e:	9d 01       	movw	r18, r26
    1950:	2a 50       	subi	r18, 0x0A	; 10
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	f9 01       	movw	r30, r18
    1956:	90 83       	st	Z, r25
    1958:	fa 01       	movw	r30, r20
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	2f 5f       	subi	r18, 0xFF	; 255
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	f9 01       	movw	r30, r18
    1962:	90 83       	st	Z, r25
    1964:	fa 01       	movw	r30, r20
    1966:	92 81       	ldd	r25, Z+2	; 0x02
    1968:	2f 5f       	subi	r18, 0xFF	; 255
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	f9 01       	movw	r30, r18
    196e:	90 83       	st	Z, r25
    1970:	fa 01       	movw	r30, r20
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	2f 5f       	subi	r18, 0xFF	; 255
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	f9 01       	movw	r30, r18
    197a:	90 83       	st	Z, r25
    197c:	fa 01       	movw	r30, r20
    197e:	94 81       	ldd	r25, Z+4	; 0x04
    1980:	2f 5f       	subi	r18, 0xFF	; 255
    1982:	3f 4f       	sbci	r19, 0xFF	; 255
    1984:	f9 01       	movw	r30, r18
    1986:	90 83       	st	Z, r25
    1988:	fa 01       	movw	r30, r20
    198a:	95 81       	ldd	r25, Z+5	; 0x05
    198c:	fd 01       	movw	r30, r26
    198e:	e5 50       	subi	r30, 0x05	; 5
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	90 83       	st	Z, r25
    1994:	31 96       	adiw	r30, 0x01	; 1
    1996:	92 e3       	ldi	r25, 0x32	; 50
    1998:	90 83       	st	Z, r25
    199a:	31 96       	adiw	r30, 0x01	; 1
    199c:	80 83       	st	Z, r24
    199e:	40 ec       	ldi	r20, 0xC0	; 192
    19a0:	53 e0       	ldi	r21, 0x03	; 3
    19a2:	fa 01       	movw	r30, r20
    19a4:	90 81       	ld	r25, Z
    19a6:	2c 5f       	subi	r18, 0xFC	; 252
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	f9 01       	movw	r30, r18
    19ac:	90 83       	st	Z, r25
    19ae:	fa 01       	movw	r30, r20
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	2f 5f       	subi	r18, 0xFF	; 255
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	f9 01       	movw	r30, r18
    19b8:	90 83       	st	Z, r25
    19ba:	fa 01       	movw	r30, r20
    19bc:	92 81       	ldd	r25, Z+2	; 0x02
    19be:	2f 5f       	subi	r18, 0xFF	; 255
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	f9 01       	movw	r30, r18
    19c4:	90 83       	st	Z, r25
    19c6:	fa 01       	movw	r30, r20
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	fd 01       	movw	r30, r26
    19cc:	ef 5f       	subi	r30, 0xFF	; 255
    19ce:	fe 4f       	sbci	r31, 0xFE	; 254
    19d0:	90 83       	st	Z, r25
    19d2:	31 96       	adiw	r30, 0x01	; 1
    19d4:	96 e3       	ldi	r25, 0x36	; 54
    19d6:	90 83       	st	Z, r25
    19d8:	31 96       	adiw	r30, 0x01	; 1
    19da:	80 83       	st	Z, r24
    19dc:	4e ef       	ldi	r20, 0xFE	; 254
    19de:	54 e0       	ldi	r21, 0x04	; 4
    19e0:	fa 01       	movw	r30, r20
    19e2:	20 81       	ld	r18, Z
    19e4:	cd 01       	movw	r24, r26
    19e6:	8c 5f       	subi	r24, 0xFC	; 252
    19e8:	9e 4f       	sbci	r25, 0xFE	; 254
    19ea:	fc 01       	movw	r30, r24
    19ec:	20 83       	st	Z, r18
    19ee:	fa 01       	movw	r30, r20
    19f0:	21 81       	ldd	r18, Z+1	; 0x01
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 83       	st	Z, r18
    19f8:	fa 01       	movw	r30, r20
    19fa:	22 81       	ldd	r18, Z+2	; 0x02
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	fc 01       	movw	r30, r24
    1a00:	20 83       	st	Z, r18
    1a02:	fa 01       	movw	r30, r20
    1a04:	83 81       	ldd	r24, Z+3	; 0x03
    1a06:	fd 01       	movw	r30, r26
    1a08:	e9 5f       	subi	r30, 0xF9	; 249
    1a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0c:	80 83       	st	Z, r24
    1a0e:	31 96       	adiw	r30, 0x01	; 1
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	80 83       	st	Z, r24
    1a14:	8d e1       	ldi	r24, 0x1D	; 29
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <send_DHCP_DECLINE+0x12e>
    1a1a:	fd 01       	movw	r30, r26
    1a1c:	e8 0f       	add	r30, r24
    1a1e:	f9 1f       	adc	r31, r25
    1a20:	e4 51       	subi	r30, 0x14	; 20
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	10 82       	st	Z, r1
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	88 33       	cpi	r24, 0x38	; 56
    1a2a:	f1 e0       	ldi	r31, 0x01	; 1
    1a2c:	9f 07       	cpc	r25, r31
    1a2e:	ac f3       	brlt	.-22     	; 0x1a1a <send_DHCP_DECLINE+0x120>
    1a30:	8f ef       	ldi	r24, 0xFF	; 255
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	8a 83       	std	Y+2, r24	; 0x02
    1a36:	8b 83       	std	Y+3, r24	; 0x03
    1a38:	8c 83       	std	Y+4, r24	; 0x04
    1a3a:	8a e5       	ldi	r24, 0x5A	; 90
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <puts>
    1a42:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <pDHCPMSG>
    1a46:	70 91 03 05 	lds	r23, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    1a4a:	03 e4       	ldi	r16, 0x43	; 67
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
    1a4e:	9e 01       	movw	r18, r28
    1a50:	2f 5f       	subi	r18, 0xFF	; 255
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	44 e2       	ldi	r20, 0x24	; 36
    1a56:	52 e0       	ldi	r21, 0x02	; 2
    1a58:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <DHCP_SOCKET>
    1a5c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <sendto>
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	08 95       	ret

00001a72 <parseDHCPMSG>:
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	28 97       	sbiw	r28, 0x08	; 8
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <DHCP_SOCKET>
    1a96:	05 db       	rcall	.-2550   	; 0x10a2 <getSn_RX_RSR>
    1a98:	61 15       	cp	r22, r1
    1a9a:	71 05       	cpc	r23, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <parseDHCPMSG+0x2e>
    1a9e:	40 c1       	rjmp	.+640    	; 0x1d20 <parseDHCPMSG+0x2ae>
    1aa0:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <pDHCPMSG>
    1aa4:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    1aa8:	8e 01       	movw	r16, r28
    1aaa:	09 5f       	subi	r16, 0xF9	; 249
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	9e 01       	movw	r18, r28
    1ab0:	2f 5f       	subi	r18, 0xFF	; 255
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	ab 01       	movw	r20, r22
    1ab6:	bf 01       	movw	r22, r30
    1ab8:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <DHCP_SOCKET>
    1abc:	0e 94 a8 04 	call	0x950	; 0x950 <recvfrom>
    1ac0:	6b 01       	movw	r12, r22
    1ac2:	7c 01       	movw	r14, r24
    1ac4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	df 92       	push	r13
    1ace:	cf 92       	push	r12
    1ad0:	48 85       	ldd	r20, Y+8	; 0x08
    1ad2:	4f 93       	push	r20
    1ad4:	4f 81       	ldd	r20, Y+7	; 0x07
    1ad6:	4f 93       	push	r20
    1ad8:	1f 92       	push	r1
    1ada:	3f 93       	push	r19
    1adc:	1f 92       	push	r1
    1ade:	2f 93       	push	r18
    1ae0:	1f 92       	push	r1
    1ae2:	9f 93       	push	r25
    1ae4:	1f 92       	push	r1
    1ae6:	8f 93       	push	r24
    1ae8:	81 e7       	ldi	r24, 0x71	; 113
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	9f 93       	push	r25
    1aee:	8f 93       	push	r24
    1af0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <printf>
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	98 85       	ldd	r25, Y+8	; 0x08
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	83 34       	cpi	r24, 0x43	; 67
    1b04:	91 05       	cpc	r25, r1
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <parseDHCPMSG+0x98>
    1b08:	09 c1       	rjmp	.+530    	; 0x1d1c <parseDHCPMSG+0x2aa>
    1b0a:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <pDHCPMSG>
    1b0e:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    1b12:	94 8d       	ldd	r25, Z+28	; 0x1c
    1b14:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <DHCP_CHADDR>
    1b18:	98 13       	cpse	r25, r24
    1b1a:	19 c0       	rjmp	.+50     	; 0x1b4e <parseDHCPMSG+0xdc>
    1b1c:	95 8d       	ldd	r25, Z+29	; 0x1d
    1b1e:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <DHCP_CHADDR+0x1>
    1b22:	98 13       	cpse	r25, r24
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <parseDHCPMSG+0xdc>
    1b26:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b28:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <DHCP_CHADDR+0x2>
    1b2c:	98 13       	cpse	r25, r24
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <parseDHCPMSG+0xdc>
    1b30:	97 8d       	ldd	r25, Z+31	; 0x1f
    1b32:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <DHCP_CHADDR+0x3>
    1b36:	98 13       	cpse	r25, r24
    1b38:	0a c0       	rjmp	.+20     	; 0x1b4e <parseDHCPMSG+0xdc>
    1b3a:	90 a1       	ldd	r25, Z+32	; 0x20
    1b3c:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <DHCP_CHADDR+0x4>
    1b40:	98 13       	cpse	r25, r24
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <parseDHCPMSG+0xdc>
    1b44:	91 a1       	ldd	r25, Z+33	; 0x21
    1b46:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <DHCP_CHADDR+0x5>
    1b4a:	98 17       	cp	r25, r24
    1b4c:	31 f0       	breq	.+12     	; 0x1b5a <parseDHCPMSG+0xe8>
    1b4e:	80 ea       	ldi	r24, 0xA0	; 160
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	0e 94 39 16 	call	0x2c72	; 0x2c72 <puts>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	e4 c0       	rjmp	.+456    	; 0x1d22 <parseDHCPMSG+0x2b0>
    1b5a:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <DHCP_SIP>
    1b5e:	91 11       	cpse	r25, r1
    1b60:	0c c0       	rjmp	.+24     	; 0x1b7a <parseDHCPMSG+0x108>
    1b62:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <DHCP_SIP+0x1>
    1b66:	81 11       	cpse	r24, r1
    1b68:	08 c0       	rjmp	.+16     	; 0x1b7a <parseDHCPMSG+0x108>
    1b6a:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <DHCP_SIP+0x2>
    1b6e:	81 11       	cpse	r24, r1
    1b70:	04 c0       	rjmp	.+8      	; 0x1b7a <parseDHCPMSG+0x108>
    1b72:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <DHCP_SIP+0x3>
    1b76:	88 23       	and	r24, r24
    1b78:	59 f1       	breq	.+86     	; 0x1bd0 <parseDHCPMSG+0x15e>
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	98 13       	cpse	r25, r24
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <parseDHCPMSG+0x12c>
    1b80:	2a 81       	ldd	r18, Y+2	; 0x02
    1b82:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <DHCP_SIP+0x1>
    1b86:	29 13       	cpse	r18, r25
    1b88:	0a c0       	rjmp	.+20     	; 0x1b9e <parseDHCPMSG+0x12c>
    1b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8c:	90 91 00 05 	lds	r25, 0x0500	; 0x800500 <DHCP_SIP+0x2>
    1b90:	29 13       	cpse	r18, r25
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <parseDHCPMSG+0x12c>
    1b94:	2c 81       	ldd	r18, Y+4	; 0x04
    1b96:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <DHCP_SIP+0x3>
    1b9a:	29 17       	cp	r18, r25
    1b9c:	c9 f0       	breq	.+50     	; 0x1bd0 <parseDHCPMSG+0x15e>
    1b9e:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <DHCP_REAL_SIP>
    1ba2:	89 13       	cpse	r24, r25
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <parseDHCPMSG+0x152>
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <DHCP_REAL_SIP+0x1>
    1bac:	98 13       	cpse	r25, r24
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <parseDHCPMSG+0x152>
    1bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb2:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <DHCP_REAL_SIP+0x2>
    1bb6:	98 13       	cpse	r25, r24
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <parseDHCPMSG+0x152>
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <DHCP_REAL_SIP+0x3>
    1bc0:	98 17       	cp	r25, r24
    1bc2:	31 f0       	breq	.+12     	; 0x1bd0 <parseDHCPMSG+0x15e>
    1bc4:	8e ec       	ldi	r24, 0xCE	; 206
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	0e 94 39 16 	call	0x2c72	; 0x2c72 <puts>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	a9 c0       	rjmp	.+338    	; 0x1d22 <parseDHCPMSG+0x2b0>
    1bd0:	e0 51       	subi	r30, 0x10	; 16
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	30 ef       	ldi	r19, 0xF0	; 240
    1bd6:	c3 1a       	sub	r12, r19
    1bd8:	d1 08       	sbc	r13, r1
    1bda:	ce 0e       	add	r12, r30
    1bdc:	df 1e       	adc	r13, r31
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	98 c0       	rjmp	.+304    	; 0x1d12 <parseDHCPMSG+0x2a0>
    1be2:	90 81       	ld	r25, Z
    1be4:	96 30       	cpi	r25, 0x06	; 6
    1be6:	09 f4       	brne	.+2      	; 0x1bea <parseDHCPMSG+0x178>
    1be8:	44 c0       	rjmp	.+136    	; 0x1c72 <parseDHCPMSG+0x200>
    1bea:	30 f4       	brcc	.+12     	; 0x1bf8 <parseDHCPMSG+0x186>
    1bec:	91 30       	cpi	r25, 0x01	; 1
    1bee:	b9 f0       	breq	.+46     	; 0x1c1e <parseDHCPMSG+0x1ac>
    1bf0:	88 f0       	brcs	.+34     	; 0x1c14 <parseDHCPMSG+0x1a2>
    1bf2:	93 30       	cpi	r25, 0x03	; 3
    1bf4:	29 f1       	breq	.+74     	; 0x1c40 <parseDHCPMSG+0x1ce>
    1bf6:	84 c0       	rjmp	.+264    	; 0x1d00 <parseDHCPMSG+0x28e>
    1bf8:	95 33       	cpi	r25, 0x35	; 53
    1bfa:	71 f0       	breq	.+28     	; 0x1c18 <parseDHCPMSG+0x1a6>
    1bfc:	20 f4       	brcc	.+8      	; 0x1c06 <parseDHCPMSG+0x194>
    1bfe:	93 33       	cpi	r25, 0x33	; 51
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <parseDHCPMSG+0x192>
    1c02:	50 c0       	rjmp	.+160    	; 0x1ca4 <parseDHCPMSG+0x232>
    1c04:	7d c0       	rjmp	.+250    	; 0x1d00 <parseDHCPMSG+0x28e>
    1c06:	96 33       	cpi	r25, 0x36	; 54
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <parseDHCPMSG+0x19a>
    1c0a:	5a c0       	rjmp	.+180    	; 0x1cc0 <parseDHCPMSG+0x24e>
    1c0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <parseDHCPMSG+0x1a0>
    1c10:	7f c0       	rjmp	.+254    	; 0x1d10 <parseDHCPMSG+0x29e>
    1c12:	76 c0       	rjmp	.+236    	; 0x1d00 <parseDHCPMSG+0x28e>
    1c14:	31 96       	adiw	r30, 0x01	; 1
    1c16:	7d c0       	rjmp	.+250    	; 0x1d12 <parseDHCPMSG+0x2a0>
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	33 96       	adiw	r30, 0x03	; 3
    1c1c:	7a c0       	rjmp	.+244    	; 0x1d12 <parseDHCPMSG+0x2a0>
    1c1e:	92 81       	ldd	r25, Z+2	; 0x02
    1c20:	a8 eb       	ldi	r26, 0xB8	; 184
    1c22:	b3 e0       	ldi	r27, 0x03	; 3
    1c24:	9c 93       	st	X, r25
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	11 96       	adiw	r26, 0x01	; 1
    1c2a:	9c 93       	st	X, r25
    1c2c:	11 97       	sbiw	r26, 0x01	; 1
    1c2e:	94 81       	ldd	r25, Z+4	; 0x04
    1c30:	12 96       	adiw	r26, 0x02	; 2
    1c32:	9c 93       	st	X, r25
    1c34:	12 97       	sbiw	r26, 0x02	; 2
    1c36:	95 81       	ldd	r25, Z+5	; 0x05
    1c38:	13 96       	adiw	r26, 0x03	; 3
    1c3a:	9c 93       	st	X, r25
    1c3c:	36 96       	adiw	r30, 0x06	; 6
    1c3e:	69 c0       	rjmp	.+210    	; 0x1d12 <parseDHCPMSG+0x2a0>
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	22 81       	ldd	r18, Z+2	; 0x02
    1c44:	ac eb       	ldi	r26, 0xBC	; 188
    1c46:	b3 e0       	ldi	r27, 0x03	; 3
    1c48:	2c 93       	st	X, r18
    1c4a:	23 81       	ldd	r18, Z+3	; 0x03
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	2c 93       	st	X, r18
    1c50:	11 97       	sbiw	r26, 0x01	; 1
    1c52:	24 81       	ldd	r18, Z+4	; 0x04
    1c54:	12 96       	adiw	r26, 0x02	; 2
    1c56:	2c 93       	st	X, r18
    1c58:	12 97       	sbiw	r26, 0x02	; 2
    1c5a:	9f 01       	movw	r18, r30
    1c5c:	2a 5f       	subi	r18, 0xFA	; 250
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	45 81       	ldd	r20, Z+5	; 0x05
    1c62:	13 96       	adiw	r26, 0x03	; 3
    1c64:	4c 93       	st	X, r20
    1c66:	e9 2f       	mov	r30, r25
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	34 97       	sbiw	r30, 0x04	; 4
    1c6c:	e2 0f       	add	r30, r18
    1c6e:	f3 1f       	adc	r31, r19
    1c70:	50 c0       	rjmp	.+160    	; 0x1d12 <parseDHCPMSG+0x2a0>
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	22 81       	ldd	r18, Z+2	; 0x02
    1c76:	a4 eb       	ldi	r26, 0xB4	; 180
    1c78:	b3 e0       	ldi	r27, 0x03	; 3
    1c7a:	2c 93       	st	X, r18
    1c7c:	23 81       	ldd	r18, Z+3	; 0x03
    1c7e:	11 96       	adiw	r26, 0x01	; 1
    1c80:	2c 93       	st	X, r18
    1c82:	11 97       	sbiw	r26, 0x01	; 1
    1c84:	24 81       	ldd	r18, Z+4	; 0x04
    1c86:	12 96       	adiw	r26, 0x02	; 2
    1c88:	2c 93       	st	X, r18
    1c8a:	12 97       	sbiw	r26, 0x02	; 2
    1c8c:	9f 01       	movw	r18, r30
    1c8e:	2a 5f       	subi	r18, 0xFA	; 250
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	45 81       	ldd	r20, Z+5	; 0x05
    1c94:	13 96       	adiw	r26, 0x03	; 3
    1c96:	4c 93       	st	X, r20
    1c98:	e9 2f       	mov	r30, r25
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	34 97       	sbiw	r30, 0x04	; 4
    1c9e:	e2 0f       	add	r30, r18
    1ca0:	f3 1f       	adc	r31, r19
    1ca2:	37 c0       	rjmp	.+110    	; 0x1d12 <parseDHCPMSG+0x2a0>
    1ca4:	4a e0       	ldi	r20, 0x0A	; 10
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <dhcp_lease_time>
    1cb0:	50 93 2f 01 	sts	0x012F, r21	; 0x80012f <dhcp_lease_time+0x1>
    1cb4:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <dhcp_lease_time+0x2>
    1cb8:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <dhcp_lease_time+0x3>
    1cbc:	36 96       	adiw	r30, 0x06	; 6
    1cbe:	29 c0       	rjmp	.+82     	; 0x1d12 <parseDHCPMSG+0x2a0>
    1cc0:	92 81       	ldd	r25, Z+2	; 0x02
    1cc2:	ae ef       	ldi	r26, 0xFE	; 254
    1cc4:	b4 e0       	ldi	r27, 0x04	; 4
    1cc6:	9c 93       	st	X, r25
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	11 96       	adiw	r26, 0x01	; 1
    1ccc:	9c 93       	st	X, r25
    1cce:	11 97       	sbiw	r26, 0x01	; 1
    1cd0:	94 81       	ldd	r25, Z+4	; 0x04
    1cd2:	12 96       	adiw	r26, 0x02	; 2
    1cd4:	9c 93       	st	X, r25
    1cd6:	12 97       	sbiw	r26, 0x02	; 2
    1cd8:	95 81       	ldd	r25, Z+5	; 0x05
    1cda:	13 96       	adiw	r26, 0x03	; 3
    1cdc:	9c 93       	st	X, r25
    1cde:	99 81       	ldd	r25, Y+1	; 0x01
    1ce0:	aa ef       	ldi	r26, 0xFA	; 250
    1ce2:	b4 e0       	ldi	r27, 0x04	; 4
    1ce4:	9c 93       	st	X, r25
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	11 96       	adiw	r26, 0x01	; 1
    1cea:	9c 93       	st	X, r25
    1cec:	11 97       	sbiw	r26, 0x01	; 1
    1cee:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf0:	12 96       	adiw	r26, 0x02	; 2
    1cf2:	9c 93       	st	X, r25
    1cf4:	12 97       	sbiw	r26, 0x02	; 2
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	13 96       	adiw	r26, 0x03	; 3
    1cfa:	9c 93       	st	X, r25
    1cfc:	36 96       	adiw	r30, 0x06	; 6
    1cfe:	09 c0       	rjmp	.+18     	; 0x1d12 <parseDHCPMSG+0x2a0>
    1d00:	9f 01       	movw	r18, r30
    1d02:	2e 5f       	subi	r18, 0xFE	; 254
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	f9 01       	movw	r30, r18
    1d0a:	e9 0f       	add	r30, r25
    1d0c:	f1 1d       	adc	r31, r1
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <parseDHCPMSG+0x2a0>
    1d10:	f6 01       	movw	r30, r12
    1d12:	ec 15       	cp	r30, r12
    1d14:	fd 05       	cpc	r31, r13
    1d16:	08 f4       	brcc	.+2      	; 0x1d1a <parseDHCPMSG+0x2a8>
    1d18:	64 cf       	rjmp	.-312    	; 0x1be2 <parseDHCPMSG+0x170>
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <parseDHCPMSG+0x2b0>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <parseDHCPMSG+0x2b0>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	28 96       	adiw	r28, 0x08	; 8
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	ff 90       	pop	r15
    1d38:	ef 90       	pop	r14
    1d3a:	df 90       	pop	r13
    1d3c:	cf 90       	pop	r12
    1d3e:	08 95       	ret

00001d40 <check_DHCP_leasedIP>:
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	6e e1       	ldi	r22, 0x1E	; 30
    1d52:	70 e8       	ldi	r23, 0x80	; 128
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	ac d8       	rcall	.-3752   	; 0xeb2 <WIZCHIP_READ>
    1d5a:	ec 01       	movw	r28, r24
    1d5c:	43 e0       	ldi	r20, 0x03	; 3
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	6e e1       	ldi	r22, 0x1E	; 30
    1d62:	70 e8       	ldi	r23, 0x80	; 128
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	71 d8       	rcall	.-3870   	; 0xe4c <WIZCHIP_WRITE>
    1d6a:	08 e8       	ldi	r16, 0x88	; 136
    1d6c:	13 e1       	ldi	r17, 0x13	; 19
    1d6e:	20 ec       	ldi	r18, 0xC0	; 192
    1d70:	33 e0       	ldi	r19, 0x03	; 3
    1d72:	41 e1       	ldi	r20, 0x11	; 17
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	6c e0       	ldi	r22, 0x0C	; 12
    1d78:	72 e0       	ldi	r23, 0x02	; 2
    1d7a:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <DHCP_SOCKET>
    1d7e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <sendto>
    1d82:	6b 01       	movw	r12, r22
    1d84:	7c 01       	movw	r14, r24
    1d86:	ae 01       	movw	r20, r28
    1d88:	55 27       	eor	r21, r21
    1d8a:	6e e1       	ldi	r22, 0x1E	; 30
    1d8c:	70 e8       	ldi	r23, 0x80	; 128
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	5c d8       	rcall	.-3912   	; 0xe4c <WIZCHIP_WRITE>
    1d94:	83 ef       	ldi	r24, 0xF3	; 243
    1d96:	c8 16       	cp	r12, r24
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	d8 06       	cpc	r13, r24
    1d9c:	e8 06       	cpc	r14, r24
    1d9e:	f8 06       	cpc	r15, r24
    1da0:	29 f4       	brne	.+10     	; 0x1dac <check_DHCP_leasedIP+0x6c>
    1da2:	8e e1       	ldi	r24, 0x1E	; 30
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	65 d7       	rcall	.+3786   	; 0x2c72 <puts>
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	1a c0       	rjmp	.+52     	; 0x1de0 <check_DHCP_leasedIP+0xa0>
    1dac:	a6 dd       	rcall	.-1204   	; 0x18fa <send_DHCP_DECLINE>
    1dae:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <dhcp_tick_1s>
    1db2:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <dhcp_tick_1s+0x1>
    1db6:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <dhcp_tick_1s+0x2>
    1dba:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <dhcp_tick_1s+0x3>
    1dbe:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <dhcp_tick_1s>
    1dc2:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <dhcp_tick_1s+0x1>
    1dc6:	a0 91 b0 03 	lds	r26, 0x03B0	; 0x8003b0 <dhcp_tick_1s+0x2>
    1dca:	b0 91 b1 03 	lds	r27, 0x03B1	; 0x8003b1 <dhcp_tick_1s+0x3>
    1dce:	84 1b       	sub	r24, r20
    1dd0:	95 0b       	sbc	r25, r21
    1dd2:	a6 0b       	sbc	r26, r22
    1dd4:	b7 0b       	sbc	r27, r23
    1dd6:	02 97       	sbiw	r24, 0x02	; 2
    1dd8:	a1 05       	cpc	r26, r1
    1dda:	b1 05       	cpc	r27, r1
    1ddc:	80 f3       	brcs	.-32     	; 0x1dbe <check_DHCP_leasedIP+0x7e>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	cf 90       	pop	r12
    1df0:	08 95       	ret

00001df2 <reset_DHCP_timeout>:
    1df2:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <dhcp_tick_1s>
    1df6:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <dhcp_tick_1s+0x1>
    1dfa:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <dhcp_tick_1s+0x2>
    1dfe:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <dhcp_tick_1s+0x3>
    1e02:	8a e0       	ldi	r24, 0x0A	; 10
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e0       	ldi	r26, 0x00	; 0
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dhcp_tick_next>
    1e0e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <dhcp_tick_next+0x1>
    1e12:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <dhcp_tick_next+0x2>
    1e16:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <dhcp_tick_next+0x3>
    1e1a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <dhcp_retry_count>
    1e1e:	08 95       	ret

00001e20 <DHCP_init>:
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	f8 2e       	mov	r15, r24
    1e2c:	8b 01       	movw	r16, r22
    1e2e:	68 e0       	ldi	r22, 0x08	; 8
    1e30:	70 e8       	ldi	r23, 0x80	; 128
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	3d d8       	rcall	.-3974   	; 0xeb2 <WIZCHIP_READ>
    1e38:	c0 ef       	ldi	r28, 0xF0	; 240
    1e3a:	d4 e0       	ldi	r29, 0x04	; 4
    1e3c:	98 83       	st	Y, r25
    1e3e:	68 e0       	ldi	r22, 0x08	; 8
    1e40:	70 e8       	ldi	r23, 0x80	; 128
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	35 d8       	rcall	.-3990   	; 0xeb2 <WIZCHIP_READ>
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	6a e0       	ldi	r22, 0x0A	; 10
    1e4c:	70 e8       	ldi	r23, 0x80	; 128
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	2f d8       	rcall	.-4002   	; 0xeb2 <WIZCHIP_READ>
    1e54:	9a 83       	std	Y+2, r25	; 0x02
    1e56:	6a e0       	ldi	r22, 0x0A	; 10
    1e58:	70 e8       	ldi	r23, 0x80	; 128
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	29 d8       	rcall	.-4014   	; 0xeb2 <WIZCHIP_READ>
    1e60:	8b 83       	std	Y+3, r24	; 0x03
    1e62:	6c e0       	ldi	r22, 0x0C	; 12
    1e64:	70 e8       	ldi	r23, 0x80	; 128
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	23 d8       	rcall	.-4026   	; 0xeb2 <WIZCHIP_READ>
    1e6c:	9c 83       	std	Y+4, r25	; 0x04
    1e6e:	6c e0       	ldi	r22, 0x0C	; 12
    1e70:	70 e8       	ldi	r23, 0x80	; 128
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	1d d8       	rcall	.-4038   	; 0xeb2 <WIZCHIP_READ>
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	58 81       	ld	r21, Y
    1e7c:	99 81       	ldd	r25, Y+1	; 0x01
    1e7e:	4a 81       	ldd	r20, Y+2	; 0x02
    1e80:	3b 81       	ldd	r19, Y+3	; 0x03
    1e82:	2c 81       	ldd	r18, Y+4	; 0x04
    1e84:	95 2b       	or	r25, r21
    1e86:	94 2b       	or	r25, r20
    1e88:	93 2b       	or	r25, r19
    1e8a:	92 2b       	or	r25, r18
    1e8c:	89 2b       	or	r24, r25
    1e8e:	51 f5       	brne	.+84     	; 0x1ee4 <DHCP_init+0xc4>
    1e90:	18 82       	st	Y, r1
    1e92:	88 e0       	ldi	r24, 0x08	; 8
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	8c ed       	ldi	r24, 0xDC	; 220
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	1b 82       	std	Y+3, r1	; 0x03
    1e9c:	1c 82       	std	Y+4, r1	; 0x04
    1e9e:	1d 82       	std	Y+5, r1	; 0x05
    1ea0:	48 e0       	ldi	r20, 0x08	; 8
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	68 e0       	ldi	r22, 0x08	; 8
    1ea6:	70 e8       	ldi	r23, 0x80	; 128
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 26 07 	call	0xe4c	; 0xe4c <WIZCHIP_WRITE>
    1eb0:	4a 81       	ldd	r20, Y+2	; 0x02
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	54 2f       	mov	r21, r20
    1eb6:	44 27       	eor	r20, r20
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	48 0f       	add	r20, r24
    1ebc:	51 1d       	adc	r21, r1
    1ebe:	6a e0       	ldi	r22, 0x0A	; 10
    1ec0:	70 e8       	ldi	r23, 0x80	; 128
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 26 07 	call	0xe4c	; 0xe4c <WIZCHIP_WRITE>
    1eca:	4c 81       	ldd	r20, Y+4	; 0x04
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	54 2f       	mov	r21, r20
    1ed0:	44 27       	eor	r20, r20
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	48 0f       	add	r20, r24
    1ed6:	51 1d       	adc	r21, r1
    1ed8:	6c e0       	ldi	r22, 0x0C	; 12
    1eda:	70 e8       	ldi	r23, 0x80	; 128
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 26 07 	call	0xe4c	; 0xe4c <WIZCHIP_WRITE>
    1ee4:	f0 92 04 05 	sts	0x0504, r15	; 0x800504 <DHCP_SOCKET>
    1ee8:	10 93 03 05 	sts	0x0503, r17	; 0x800503 <pDHCPMSG+0x1>
    1eec:	00 93 02 05 	sts	0x0502, r16	; 0x800502 <pDHCPMSG>
    1ef0:	e0 ef       	ldi	r30, 0xF0	; 240
    1ef2:	f4 e0       	ldi	r31, 0x04	; 4
    1ef4:	43 81       	ldd	r20, Z+3	; 0x03
    1ef6:	84 2f       	mov	r24, r20
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 e0       	ldi	r26, 0x00	; 0
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	88 58       	subi	r24, 0x88	; 136
    1f00:	99 4a       	sbci	r25, 0xA9	; 169
    1f02:	ab 4c       	sbci	r26, 0xCB	; 203
    1f04:	bd 4e       	sbci	r27, 0xED	; 237
    1f06:	34 81       	ldd	r19, Z+4	; 0x04
    1f08:	83 0f       	add	r24, r19
    1f0a:	91 1d       	adc	r25, r1
    1f0c:	a1 1d       	adc	r26, r1
    1f0e:	b1 1d       	adc	r27, r1
    1f10:	25 81       	ldd	r18, Z+5	; 0x05
    1f12:	82 0f       	add	r24, r18
    1f14:	91 1d       	adc	r25, r1
    1f16:	a1 1d       	adc	r26, r1
    1f18:	b1 1d       	adc	r27, r1
    1f1a:	34 27       	eor	r19, r20
    1f1c:	23 27       	eor	r18, r19
    1f1e:	82 0f       	add	r24, r18
    1f20:	91 1d       	adc	r25, r1
    1f22:	a1 1d       	adc	r26, r1
    1f24:	b1 1d       	adc	r27, r1
    1f26:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <DHCP_XID>
    1f2a:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <DHCP_XID+0x1>
    1f2e:	a0 93 f8 04 	sts	0x04F8, r26	; 0x8004f8 <DHCP_XID+0x2>
    1f32:	b0 93 f9 04 	sts	0x04F9, r27	; 0x8004f9 <DHCP_XID+0x3>
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	68 e1       	ldi	r22, 0x18	; 24
    1f3c:	70 e8       	ldi	r23, 0x80	; 128
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 26 07 	call	0xe4c	; 0xe4c <WIZCHIP_WRITE>
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	6a e1       	ldi	r22, 0x1A	; 26
    1f4c:	70 e8       	ldi	r23, 0x80	; 128
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 26 07 	call	0xe4c	; 0xe4c <WIZCHIP_WRITE>
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	60 e1       	ldi	r22, 0x10	; 16
    1f5c:	70 e8       	ldi	r23, 0x80	; 128
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 26 07 	call	0xe4c	; 0xe4c <WIZCHIP_WRITE>
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	62 e1       	ldi	r22, 0x12	; 18
    1f6c:	70 e8       	ldi	r23, 0x80	; 128
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 26 07 	call	0xe4c	; 0xe4c <WIZCHIP_WRITE>
    1f76:	3d df       	rcall	.-390    	; 0x1df2 <reset_DHCP_timeout>
    1f78:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <dhcp_state>
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    1f86:	08 95       	ret

00001f88 <DHCP_time_handler>:
    1f88:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <dhcp_tick_1s>
    1f8c:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <dhcp_tick_1s+0x1>
    1f90:	a0 91 b0 03 	lds	r26, 0x03B0	; 0x8003b0 <dhcp_tick_1s+0x2>
    1f94:	b0 91 b1 03 	lds	r27, 0x03B1	; 0x8003b1 <dhcp_tick_1s+0x3>
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	a1 1d       	adc	r26, r1
    1f9c:	b1 1d       	adc	r27, r1
    1f9e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <dhcp_tick_1s>
    1fa2:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <dhcp_tick_1s+0x1>
    1fa6:	a0 93 b0 03 	sts	0x03B0, r26	; 0x8003b0 <dhcp_tick_1s+0x2>
    1faa:	b0 93 b1 03 	sts	0x03B1, r27	; 0x8003b1 <dhcp_tick_1s+0x3>
    1fae:	08 95       	ret

00001fb0 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
  nibble &= 0x0F;
    1fb0:	8f 70       	andi	r24, 0x0F	; 15
  if (nibble <= 9)
    1fb2:	8a 30       	cpi	r24, 0x0A	; 10
    1fb4:	10 f4       	brcc	.+4      	; 0x1fba <NibbleToHex+0xa>
    return nibble + '0';
    1fb6:	80 5d       	subi	r24, 0xD0	; 208
    1fb8:	08 95       	ret
  else 
    return nibble + ('A'-0x0A);
    1fba:	89 5c       	subi	r24, 0xC9	; 201
}
    1fbc:	08 95       	ret

00001fbe <send_DHCP_DISCOVER>:
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
}

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
    1fbe:	5f 92       	push	r5
    1fc0:	6f 92       	push	r6
    1fc2:	7f 92       	push	r7
    1fc4:	8f 92       	push	r8
    1fc6:	9f 92       	push	r9
    1fc8:	af 92       	push	r10
    1fca:	bf 92       	push	r11
    1fcc:	cf 92       	push	r12
    1fce:	df 92       	push	r13
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <send_DHCP_DISCOVER+0x20>
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <send_DHCP_DISCOVER+0x22>
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
   
   makeDHCPMSG();
    1fe4:	c1 db       	rcall	.-2174   	; 0x1768 <makeDHCPMSG>
   DHCP_SIP[0]=0;
    1fe6:	ee ef       	ldi	r30, 0xFE	; 254
    1fe8:	f4 e0       	ldi	r31, 0x04	; 4
    1fea:	10 82       	st	Z, r1
   DHCP_SIP[1]=0;
    1fec:	11 82       	std	Z+1, r1	; 0x01
   DHCP_SIP[2]=0;
    1fee:	12 82       	std	Z+2, r1	; 0x02
   DHCP_SIP[3]=0;
    1ff0:	13 82       	std	Z+3, r1	; 0x03
   DHCP_REAL_SIP[0]=0;
    1ff2:	ea ef       	ldi	r30, 0xFA	; 250
    1ff4:	f4 e0       	ldi	r31, 0x04	; 4
    1ff6:	10 82       	st	Z, r1
   DHCP_REAL_SIP[1]=0;
    1ff8:	11 82       	std	Z+1, r1	; 0x01
   DHCP_REAL_SIP[2]=0;
    1ffa:	12 82       	std	Z+2, r1	; 0x02
   DHCP_REAL_SIP[3]=0;
    1ffc:	13 82       	std	Z+3, r1	; 0x03

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
    1ffe:	e0 90 02 05 	lds	r14, 0x0502	; 0x800502 <pDHCPMSG>
    2002:	f0 90 03 05 	lds	r15, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    2006:	f7 01       	movw	r30, r14
    2008:	e0 51       	subi	r30, 0x10	; 16
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	85 e3       	ldi	r24, 0x35	; 53
    200e:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0x01;
    2010:	31 96       	adiw	r30, 0x01	; 1
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	80 83       	st	Z, r24
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
    201a:	31 96       	adiw	r30, 0x01	; 1
    201c:	9d e3       	ldi	r25, 0x3D	; 61
    201e:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x07;
    2020:	31 96       	adiw	r30, 0x01	; 1
    2022:	97 e0       	ldi	r25, 0x07	; 7
    2024:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x01;
    2026:	31 96       	adiw	r30, 0x01	; 1
    2028:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
    202a:	e0 ef       	ldi	r30, 0xF0	; 240
    202c:	f4 e0       	ldi	r31, 0x04	; 4
    202e:	80 81       	ld	r24, Z
    2030:	d7 01       	movw	r26, r14
    2032:	aa 50       	subi	r26, 0x0A	; 10
    2034:	bf 4f       	sbci	r27, 0xFF	; 255
    2036:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
    2038:	81 81       	ldd	r24, Z+1	; 0x01
    203a:	11 96       	adiw	r26, 0x01	; 1
    203c:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	11 96       	adiw	r26, 0x01	; 1
    2042:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
    2044:	53 80       	ldd	r5, Z+3	; 0x03
    2046:	11 96       	adiw	r26, 0x01	; 1
    2048:	5c 92       	st	X, r5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
    204a:	64 80       	ldd	r6, Z+4	; 0x04
    204c:	11 96       	adiw	r26, 0x01	; 1
    204e:	6c 92       	st	X, r6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    2050:	75 80       	ldd	r7, Z+5	; 0x05
    2052:	f7 01       	movw	r30, r14
    2054:	e5 50       	subi	r30, 0x05	; 5
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	70 82       	st	Z, r7
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
    205a:	31 96       	adiw	r30, 0x01	; 1
    205c:	8c e0       	ldi	r24, 0x0C	; 12
    205e:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
    2060:	31 96       	adiw	r30, 0x01	; 1
    2062:	10 82       	st	Z, r1
    2064:	02 e1       	ldi	r16, 0x12	; 18
    2066:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    2068:	c1 2c       	mov	r12, r1
    206a:	d1 2c       	mov	r13, r1
    206c:	0b c0       	rjmp	.+22     	; 0x2084 <send_DHCP_DISCOVER+0xc6>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    206e:	f7 01       	movw	r30, r14
    2070:	e0 0f       	add	r30, r16
    2072:	f1 1f       	adc	r31, r17
    2074:	e4 51       	subi	r30, 0x14	; 20
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	c8 1a       	sub	r12, r24
    207e:	d8 0a       	sbc	r13, r24
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    2080:	0f 5f       	subi	r16, 0xFF	; 255
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    2084:	f6 01       	movw	r30, r12
    2086:	ee 5d       	subi	r30, 0xDE	; 222
    2088:	fe 4f       	sbci	r31, 0xFE	; 254
    208a:	80 81       	ld	r24, Z
    208c:	81 11       	cpse	r24, r1
    208e:	ef cf       	rjmp	.-34     	; 0x206e <send_DHCP_DISCOVER+0xb0>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
    2090:	48 01       	movw	r8, r16
    2092:	8f ef       	ldi	r24, 0xFF	; 255
    2094:	88 1a       	sub	r8, r24
    2096:	98 0a       	sbc	r9, r24
    2098:	85 2d       	mov	r24, r5
    209a:	82 95       	swap	r24
    209c:	8f 70       	andi	r24, 0x0F	; 15
    209e:	88 df       	rcall	.-240    	; 0x1fb0 <NibbleToHex>
    20a0:	f7 01       	movw	r30, r14
    20a2:	e0 0f       	add	r30, r16
    20a4:	f1 1f       	adc	r31, r17
    20a6:	e4 51       	subi	r30, 0x14	; 20
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
    20ac:	58 01       	movw	r10, r16
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	a8 0e       	add	r10, r24
    20b2:	b1 1c       	adc	r11, r1
    20b4:	85 2d       	mov	r24, r5
    20b6:	7c df       	rcall	.-264    	; 0x1fb0 <NibbleToHex>
    20b8:	8e 0c       	add	r8, r14
    20ba:	9f 1c       	adc	r9, r15
    20bc:	f4 01       	movw	r30, r8
    20be:	e4 51       	subi	r30, 0x14	; 20
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
    20c4:	48 01       	movw	r8, r16
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	88 0e       	add	r8, r24
    20ca:	91 1c       	adc	r9, r1
    20cc:	86 2d       	mov	r24, r6
    20ce:	82 95       	swap	r24
    20d0:	8f 70       	andi	r24, 0x0F	; 15
    20d2:	6e df       	rcall	.-292    	; 0x1fb0 <NibbleToHex>
    20d4:	ae 0c       	add	r10, r14
    20d6:	bf 1c       	adc	r11, r15
    20d8:	f5 01       	movw	r30, r10
    20da:	e4 51       	subi	r30, 0x14	; 20
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
    20e0:	58 01       	movw	r10, r16
    20e2:	84 e0       	ldi	r24, 0x04	; 4
    20e4:	a8 0e       	add	r10, r24
    20e6:	b1 1c       	adc	r11, r1
    20e8:	86 2d       	mov	r24, r6
    20ea:	62 df       	rcall	.-316    	; 0x1fb0 <NibbleToHex>
    20ec:	8e 0c       	add	r8, r14
    20ee:	9f 1c       	adc	r9, r15
    20f0:	f4 01       	movw	r30, r8
    20f2:	e4 51       	subi	r30, 0x14	; 20
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
    20f8:	48 01       	movw	r8, r16
    20fa:	85 e0       	ldi	r24, 0x05	; 5
    20fc:	88 0e       	add	r8, r24
    20fe:	91 1c       	adc	r9, r1
    2100:	87 2d       	mov	r24, r7
    2102:	82 95       	swap	r24
    2104:	8f 70       	andi	r24, 0x0F	; 15
    2106:	54 df       	rcall	.-344    	; 0x1fb0 <NibbleToHex>
    2108:	ae 0c       	add	r10, r14
    210a:	bf 1c       	adc	r11, r15
    210c:	f5 01       	movw	r30, r10
    210e:	e4 51       	subi	r30, 0x14	; 20
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
    2114:	58 01       	movw	r10, r16
    2116:	86 e0       	ldi	r24, 0x06	; 6
    2118:	a8 0e       	add	r10, r24
    211a:	b1 1c       	adc	r11, r1
    211c:	87 2d       	mov	r24, r7
    211e:	48 df       	rcall	.-368    	; 0x1fb0 <NibbleToHex>
    2120:	8e 0c       	add	r8, r14
    2122:	9f 1c       	adc	r9, r15
    2124:	f4 01       	movw	r30, r8
    2126:	e4 51       	subi	r30, 0x14	; 20
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 83       	st	Z, r24
    212c:	f5 01       	movw	r30, r10
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
    212e:	ec 19       	sub	r30, r12
    2130:	fd 09       	sbc	r31, r13
    2132:	37 97       	sbiw	r30, 0x07	; 7
    2134:	ee 0d       	add	r30, r14
    2136:	ff 1d       	adc	r31, r15
    2138:	e4 51       	subi	r30, 0x14	; 20
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	86 e0       	ldi	r24, 0x06	; 6
    213e:	8c 0d       	add	r24, r12
    2140:	80 83       	st	Z, r24
    2142:	d8 01       	movw	r26, r16

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
    2144:	17 96       	adiw	r26, 0x07	; 7
    2146:	ae 0c       	add	r10, r14
    2148:	bf 1c       	adc	r11, r15
    214a:	f5 01       	movw	r30, r10
    214c:	e4 51       	subi	r30, 0x14	; 20
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	87 e3       	ldi	r24, 0x37	; 55
    2152:	80 83       	st	Z, r24
    2154:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
    2156:	38 96       	adiw	r30, 0x08	; 8
    2158:	ae 0d       	add	r26, r14
    215a:	bf 1d       	adc	r27, r15
    215c:	a4 51       	subi	r26, 0x14	; 20
    215e:	bf 4f       	sbci	r27, 0xFF	; 255
    2160:	86 e0       	ldi	r24, 0x06	; 6
    2162:	8c 93       	st	X, r24
    2164:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = subnetMask;
    2166:	19 96       	adiw	r26, 0x09	; 9
    2168:	ee 0d       	add	r30, r14
    216a:	ff 1d       	adc	r31, r15
    216c:	e4 51       	subi	r30, 0x14	; 20
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	90 83       	st	Z, r25
    2174:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = routersOnSubnet;
    2176:	3a 96       	adiw	r30, 0x0a	; 10
    2178:	ae 0d       	add	r26, r14
    217a:	bf 1d       	adc	r27, r15
    217c:	a4 51       	subi	r26, 0x14	; 20
    217e:	bf 4f       	sbci	r27, 0xFF	; 255
    2180:	93 e0       	ldi	r25, 0x03	; 3
    2182:	9c 93       	st	X, r25
    2184:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = dns;
    2186:	1b 96       	adiw	r26, 0x0b	; 11
    2188:	ee 0d       	add	r30, r14
    218a:	ff 1d       	adc	r31, r15
    218c:	e4 51       	subi	r30, 0x14	; 20
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 83       	st	Z, r24
    2192:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = domainName;
    2194:	3c 96       	adiw	r30, 0x0c	; 12
    2196:	ae 0d       	add	r26, r14
    2198:	bf 1d       	adc	r27, r15
    219a:	a4 51       	subi	r26, 0x14	; 20
    219c:	bf 4f       	sbci	r27, 0xFF	; 255
    219e:	8f e0       	ldi	r24, 0x0F	; 15
    21a0:	8c 93       	st	X, r24
    21a2:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = dhcpT1value;
    21a4:	1d 96       	adiw	r26, 0x0d	; 13
    21a6:	ee 0d       	add	r30, r14
    21a8:	ff 1d       	adc	r31, r15
    21aa:	e4 51       	subi	r30, 0x14	; 20
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	8a e3       	ldi	r24, 0x3A	; 58
    21b0:	80 83       	st	Z, r24
    21b2:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = dhcpT2value;
    21b4:	3e 96       	adiw	r30, 0x0e	; 14
    21b6:	ae 0d       	add	r26, r14
    21b8:	bf 1d       	adc	r27, r15
    21ba:	a4 51       	subi	r26, 0x14	; 20
    21bc:	bf 4f       	sbci	r27, 0xFF	; 255
    21be:	8b e3       	ldi	r24, 0x3B	; 59
    21c0:	8c 93       	st	X, r24
    21c2:	01 5f       	subi	r16, 0xF1	; 241
	pDHCPMSG->OPT[k++] = endOption;
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	ee 0d       	add	r30, r14
    21c8:	ff 1d       	adc	r31, r15
    21ca:	e4 51       	subi	r30, 0x14	; 20
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	80 83       	st	Z, r24
    21d2:	08 c0       	rjmp	.+16     	; 0x21e4 <send_DHCP_DISCOVER+0x226>

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
    21d4:	f7 01       	movw	r30, r14
    21d6:	e0 0f       	add	r30, r16
    21d8:	f1 1f       	adc	r31, r17
    21da:	e4 51       	subi	r30, 0x14	; 20
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	10 82       	st	Z, r1
    21e0:	0f 5f       	subi	r16, 0xFF	; 255
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	08 33       	cpi	r16, 0x38	; 56
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	18 07       	cpc	r17, r24
    21ea:	a0 f3       	brcs	.-24     	; 0x21d4 <send_DHCP_DISCOVER+0x216>
    21ec:	8f ef       	ldi	r24, 0xFF	; 255

	// send broadcasting packet
	ip[0] = 255;
    21ee:	89 83       	std	Y+1, r24	; 0x01
	ip[1] = 255;
    21f0:	8a 83       	std	Y+2, r24	; 0x02
	ip[2] = 255;
    21f2:	8b 83       	std	Y+3, r24	; 0x03
	ip[3] = 255;
    21f4:	8c 83       	std	Y+4, r24	; 0x04

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
    21f6:	88 e3       	ldi	r24, 0x38	; 56
    21f8:	92 e0       	ldi	r25, 0x02	; 2
    21fa:	3b d5       	rcall	.+2678   	; 0x2c72 <puts>
    21fc:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <pDHCPMSG>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
    2200:	70 91 03 05 	lds	r23, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    2204:	03 e4       	ldi	r16, 0x43	; 67
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	9e 01       	movw	r18, r28
    220a:	2f 5f       	subi	r18, 0xFF	; 255
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	44 e2       	ldi	r20, 0x24	; 36
    2210:	52 e0       	ldi	r21, 0x02	; 2
    2212:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <DHCP_SOCKET>
    2216:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <sendto>
    221a:	0f 90       	pop	r0
}
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	ff 90       	pop	r15
    222c:	ef 90       	pop	r14
    222e:	df 90       	pop	r13
    2230:	cf 90       	pop	r12
    2232:	bf 90       	pop	r11
    2234:	af 90       	pop	r10
    2236:	9f 90       	pop	r9
    2238:	8f 90       	pop	r8
    223a:	7f 90       	pop	r7
    223c:	6f 90       	pop	r6
    223e:	5f 90       	pop	r5
    2240:	08 95       	ret

00002242 <send_DHCP_REQUEST>:
    2242:	5f 92       	push	r5

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
    2244:	6f 92       	push	r6
    2246:	7f 92       	push	r7
    2248:	8f 92       	push	r8
    224a:	9f 92       	push	r9
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	00 d0       	rcall	.+0      	; 0x2262 <send_DHCP_REQUEST+0x20>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <send_DHCP_REQUEST+0x22>
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
	int i;
	uint8_t ip[4];
	uint16_t k = 0;

   makeDHCPMSG();
    2268:	7f da       	rcall	.-2818   	; 0x1768 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
    226a:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <dhcp_state>
    226e:	83 50       	subi	r24, 0x03	; 3
    2270:	82 30       	cpi	r24, 0x02	; 2
    2272:	00 f5       	brcc	.+64     	; 0x22b4 <send_DHCP_REQUEST+0x72>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
    2274:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <pDHCPMSG>
    2278:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    227c:	12 86       	std	Z+10, r1	; 0x0a
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
    227e:	13 86       	std	Z+11, r1	; 0x0b
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
    2280:	a0 ec       	ldi	r26, 0xC0	; 192
    2282:	b3 e0       	ldi	r27, 0x03	; 3
    2284:	8c 91       	ld	r24, X
    2286:	84 87       	std	Z+12, r24	; 0x0c
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
    2288:	11 96       	adiw	r26, 0x01	; 1
    228a:	8c 91       	ld	r24, X
    228c:	11 97       	sbiw	r26, 0x01	; 1
    228e:	85 87       	std	Z+13, r24	; 0x0d
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
    2290:	12 96       	adiw	r26, 0x02	; 2
    2292:	8c 91       	ld	r24, X
    2294:	12 97       	sbiw	r26, 0x02	; 2
    2296:	86 87       	std	Z+14, r24	; 0x0e
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
    2298:	13 96       	adiw	r26, 0x03	; 3
    229a:	8c 91       	ld	r24, X
    229c:	87 87       	std	Z+15, r24	; 0x0f
   	ip[0] = DHCP_SIP[0];
    229e:	ee ef       	ldi	r30, 0xFE	; 254
    22a0:	f4 e0       	ldi	r31, 0x04	; 4
    22a2:	80 81       	ld	r24, Z
    22a4:	89 83       	std	Y+1, r24	; 0x01
   	ip[1] = DHCP_SIP[1];
    22a6:	81 81       	ldd	r24, Z+1	; 0x01
    22a8:	8a 83       	std	Y+2, r24	; 0x02
   	ip[2] = DHCP_SIP[2];
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	8b 83       	std	Y+3, r24	; 0x03
   	ip[3] = DHCP_SIP[3];   	   	   	
    22ae:	83 81       	ldd	r24, Z+3	; 0x03
    22b0:	8c 83       	std	Y+4, r24	; 0x04
    22b2:	05 c0       	rjmp	.+10     	; 0x22be <send_DHCP_REQUEST+0x7c>
   }
   else
   {
   	ip[0] = 255;
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	89 83       	std	Y+1, r24	; 0x01
   	ip[1] = 255;
    22b8:	8a 83       	std	Y+2, r24	; 0x02
   	ip[2] = 255;
    22ba:	8b 83       	std	Y+3, r24	; 0x03
   	ip[3] = 255;   	   	   	
    22bc:	8c 83       	std	Y+4, r24	; 0x04
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
    22be:	e0 90 02 05 	lds	r14, 0x0502	; 0x800502 <pDHCPMSG>
    22c2:	f0 90 03 05 	lds	r15, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    22c6:	f7 01       	movw	r30, r14
    22c8:	e0 51       	subi	r30, 0x10	; 16
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	85 e3       	ldi	r24, 0x35	; 53
    22ce:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0x01;
    22d0:	31 96       	adiw	r30, 0x01	; 1
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
    22d6:	31 96       	adiw	r30, 0x01	; 1
    22d8:	93 e0       	ldi	r25, 0x03	; 3
    22da:	90 83       	st	Z, r25

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
    22dc:	31 96       	adiw	r30, 0x01	; 1
    22de:	9d e3       	ldi	r25, 0x3D	; 61
    22e0:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x07;
    22e2:	31 96       	adiw	r30, 0x01	; 1
    22e4:	97 e0       	ldi	r25, 0x07	; 7
    22e6:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x01;
    22e8:	31 96       	adiw	r30, 0x01	; 1
    22ea:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
    22ec:	e0 ef       	ldi	r30, 0xF0	; 240
    22ee:	f4 e0       	ldi	r31, 0x04	; 4
    22f0:	80 81       	ld	r24, Z
    22f2:	d7 01       	movw	r26, r14
    22f4:	aa 50       	subi	r26, 0x0A	; 10
    22f6:	bf 4f       	sbci	r27, 0xFF	; 255
    22f8:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
    22fa:	81 81       	ldd	r24, Z+1	; 0x01
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
    2306:	53 80       	ldd	r5, Z+3	; 0x03
    2308:	11 96       	adiw	r26, 0x01	; 1
    230a:	5c 92       	st	X, r5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
    230c:	64 80       	ldd	r6, Z+4	; 0x04
    230e:	11 96       	adiw	r26, 0x01	; 1
    2310:	6c 92       	st	X, r6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    2312:	75 80       	ldd	r7, Z+5	; 0x05
    2314:	f7 01       	movw	r30, r14
    2316:	e5 50       	subi	r30, 0x05	; 5
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	70 82       	st	Z, r7

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
    231c:	8c 81       	ldd	r24, Y+4	; 0x04
    231e:	8f 3f       	cpi	r24, 0xFF	; 255
    2320:	71 f5       	brne	.+92     	; 0x237e <send_DHCP_REQUEST+0x13c>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
    2322:	82 e3       	ldi	r24, 0x32	; 50
    2324:	31 96       	adiw	r30, 0x01	; 1
    2326:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = 0x04;
    2328:	84 e0       	ldi	r24, 0x04	; 4
    232a:	31 96       	adiw	r30, 0x01	; 1
    232c:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
    232e:	e0 ec       	ldi	r30, 0xC0	; 192
    2330:	f3 e0       	ldi	r31, 0x03	; 3
    2332:	90 81       	ld	r25, Z
    2334:	14 96       	adiw	r26, 0x04	; 4
    2336:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	11 96       	adiw	r26, 0x01	; 1
    233c:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
    233e:	92 81       	ldd	r25, Z+2	; 0x02
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	f7 01       	movw	r30, r14
    2348:	ef 5f       	subi	r30, 0xFF	; 255
    234a:	fe 4f       	sbci	r31, 0xFE	; 254
    234c:	90 83       	st	Z, r25
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
    234e:	96 e3       	ldi	r25, 0x36	; 54
    2350:	31 96       	adiw	r30, 0x01	; 1
    2352:	90 83       	st	Z, r25
		pDHCPMSG->OPT[k++] = 0x04;
    2354:	31 96       	adiw	r30, 0x01	; 1
    2356:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
    2358:	ee ef       	ldi	r30, 0xFE	; 254
    235a:	f4 e0       	ldi	r31, 0x04	; 4
    235c:	80 81       	ld	r24, Z
    235e:	14 96       	adiw	r26, 0x04	; 4
    2360:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
    2362:	81 81       	ldd	r24, Z+1	; 0x01
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	11 96       	adiw	r26, 0x01	; 1
    236c:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
    236e:	83 81       	ldd	r24, Z+3	; 0x03
    2370:	f7 01       	movw	r30, r14
    2372:	e9 5f       	subi	r30, 0xF9	; 249
    2374:	fe 4f       	sbci	r31, 0xFE	; 254
    2376:	80 83       	st	Z, r24
    2378:	0c e1       	ldi	r16, 0x1C	; 28
    237a:	10 e0       	ldi	r17, 0x00	; 0
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <send_DHCP_REQUEST+0x140>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    237e:	00 e1       	ldi	r16, 0x10	; 16
    2380:	10 e0       	ldi	r17, 0x00	; 0
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
    2382:	f8 01       	movw	r30, r16
    2384:	31 96       	adiw	r30, 0x01	; 1
    2386:	d7 01       	movw	r26, r14
    2388:	a0 0f       	add	r26, r16
    238a:	b1 1f       	adc	r27, r17
    238c:	a4 51       	subi	r26, 0x14	; 20
    238e:	bf 4f       	sbci	r27, 0xFF	; 255
    2390:	8c e0       	ldi	r24, 0x0C	; 12
    2392:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = 0; // length of hostname
    2394:	0e 5f       	subi	r16, 0xFE	; 254
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	ee 0d       	add	r30, r14
    239a:	ff 1d       	adc	r31, r15
    239c:	e4 51       	subi	r30, 0x14	; 20
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	10 82       	st	Z, r1
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    23a2:	c1 2c       	mov	r12, r1
    23a4:	d1 2c       	mov	r13, r1
    23a6:	0b c0       	rjmp	.+22     	; 0x23be <send_DHCP_REQUEST+0x17c>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    23a8:	f7 01       	movw	r30, r14
    23aa:	e0 0f       	add	r30, r16
    23ac:	f1 1f       	adc	r31, r17
    23ae:	e4 51       	subi	r30, 0x14	; 20
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 83       	st	Z, r24
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0; // length of hostname
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    23b4:	8f ef       	ldi	r24, 0xFF	; 255
    23b6:	c8 1a       	sub	r12, r24
    23b8:	d8 0a       	sbc	r13, r24
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    23ba:	0f 5f       	subi	r16, 0xFF	; 255
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0; // length of hostname
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    23be:	f6 01       	movw	r30, r12
    23c0:	ee 5d       	subi	r30, 0xDE	; 222
    23c2:	fe 4f       	sbci	r31, 0xFE	; 254
    23c4:	80 81       	ld	r24, Z
    23c6:	81 11       	cpse	r24, r1
    23c8:	ef cf       	rjmp	.-34     	; 0x23a8 <send_DHCP_REQUEST+0x166>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
    23ca:	48 01       	movw	r8, r16
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	88 1a       	sub	r8, r24
    23d0:	98 0a       	sbc	r9, r24
    23d2:	85 2d       	mov	r24, r5
    23d4:	82 95       	swap	r24
    23d6:	8f 70       	andi	r24, 0x0F	; 15
    23d8:	eb dd       	rcall	.-1066   	; 0x1fb0 <NibbleToHex>
    23da:	f7 01       	movw	r30, r14
    23dc:	e0 0f       	add	r30, r16
    23de:	f1 1f       	adc	r31, r17
    23e0:	e4 51       	subi	r30, 0x14	; 20
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
    23e6:	58 01       	movw	r10, r16
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	a8 0e       	add	r10, r24
    23ec:	b1 1c       	adc	r11, r1
    23ee:	85 2d       	mov	r24, r5
    23f0:	df dd       	rcall	.-1090   	; 0x1fb0 <NibbleToHex>
    23f2:	8e 0c       	add	r8, r14
    23f4:	9f 1c       	adc	r9, r15
    23f6:	f4 01       	movw	r30, r8
    23f8:	e4 51       	subi	r30, 0x14	; 20
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
    23fe:	48 01       	movw	r8, r16
    2400:	83 e0       	ldi	r24, 0x03	; 3
    2402:	88 0e       	add	r8, r24
    2404:	91 1c       	adc	r9, r1
    2406:	86 2d       	mov	r24, r6
    2408:	82 95       	swap	r24
    240a:	8f 70       	andi	r24, 0x0F	; 15
    240c:	d1 dd       	rcall	.-1118   	; 0x1fb0 <NibbleToHex>
    240e:	ae 0c       	add	r10, r14
    2410:	bf 1c       	adc	r11, r15
    2412:	f5 01       	movw	r30, r10
    2414:	e4 51       	subi	r30, 0x14	; 20
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
    241a:	58 01       	movw	r10, r16
    241c:	84 e0       	ldi	r24, 0x04	; 4
    241e:	a8 0e       	add	r10, r24
    2420:	b1 1c       	adc	r11, r1
    2422:	86 2d       	mov	r24, r6
    2424:	c5 dd       	rcall	.-1142   	; 0x1fb0 <NibbleToHex>
    2426:	8e 0c       	add	r8, r14
    2428:	9f 1c       	adc	r9, r15
    242a:	f4 01       	movw	r30, r8
    242c:	e4 51       	subi	r30, 0x14	; 20
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
    2432:	48 01       	movw	r8, r16
    2434:	85 e0       	ldi	r24, 0x05	; 5
    2436:	88 0e       	add	r8, r24
    2438:	91 1c       	adc	r9, r1
    243a:	87 2d       	mov	r24, r7
    243c:	82 95       	swap	r24
    243e:	8f 70       	andi	r24, 0x0F	; 15
    2440:	b7 dd       	rcall	.-1170   	; 0x1fb0 <NibbleToHex>
    2442:	ae 0c       	add	r10, r14
    2444:	bf 1c       	adc	r11, r15
    2446:	f5 01       	movw	r30, r10
    2448:	e4 51       	subi	r30, 0x14	; 20
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
    244e:	58 01       	movw	r10, r16
    2450:	86 e0       	ldi	r24, 0x06	; 6
    2452:	a8 0e       	add	r10, r24
    2454:	b1 1c       	adc	r11, r1
    2456:	87 2d       	mov	r24, r7
    2458:	ab dd       	rcall	.-1194   	; 0x1fb0 <NibbleToHex>
    245a:	8e 0c       	add	r8, r14
    245c:	9f 1c       	adc	r9, r15
    245e:	f4 01       	movw	r30, r8
    2460:	e4 51       	subi	r30, 0x14	; 20
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 83       	st	Z, r24
    2466:	f5 01       	movw	r30, r10
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
    2468:	ec 19       	sub	r30, r12
    246a:	fd 09       	sbc	r31, r13
    246c:	37 97       	sbiw	r30, 0x07	; 7
    246e:	ee 0d       	add	r30, r14
    2470:	ff 1d       	adc	r31, r15
    2472:	e4 51       	subi	r30, 0x14	; 20
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	86 e0       	ldi	r24, 0x06	; 6
    2478:	8c 0d       	add	r24, r12
    247a:	80 83       	st	Z, r24
    247c:	d8 01       	movw	r26, r16
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
    247e:	17 96       	adiw	r26, 0x07	; 7
    2480:	ae 0c       	add	r10, r14
    2482:	bf 1c       	adc	r11, r15
    2484:	f5 01       	movw	r30, r10
    2486:	e4 51       	subi	r30, 0x14	; 20
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	87 e3       	ldi	r24, 0x37	; 55
    248c:	80 83       	st	Z, r24
    248e:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = 0x08;
    2490:	38 96       	adiw	r30, 0x08	; 8
    2492:	ae 0d       	add	r26, r14
    2494:	bf 1d       	adc	r27, r15
    2496:	a4 51       	subi	r26, 0x14	; 20
    2498:	bf 4f       	sbci	r27, 0xFF	; 255
    249a:	88 e0       	ldi	r24, 0x08	; 8
    249c:	8c 93       	st	X, r24
    249e:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = subnetMask;
    24a0:	19 96       	adiw	r26, 0x09	; 9
    24a2:	ee 0d       	add	r30, r14
    24a4:	ff 1d       	adc	r31, r15
    24a6:	e4 51       	subi	r30, 0x14	; 20
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 83       	st	Z, r24
    24ae:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = routersOnSubnet;
    24b0:	3a 96       	adiw	r30, 0x0a	; 10
    24b2:	ae 0d       	add	r26, r14
    24b4:	bf 1d       	adc	r27, r15
    24b6:	a4 51       	subi	r26, 0x14	; 20
    24b8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ba:	83 e0       	ldi	r24, 0x03	; 3
    24bc:	8c 93       	st	X, r24
    24be:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = dns;
    24c0:	1b 96       	adiw	r26, 0x0b	; 11
    24c2:	ee 0d       	add	r30, r14
    24c4:	ff 1d       	adc	r31, r15
    24c6:	e4 51       	subi	r30, 0x14	; 20
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	86 e0       	ldi	r24, 0x06	; 6
    24cc:	80 83       	st	Z, r24
    24ce:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = domainName;
    24d0:	3c 96       	adiw	r30, 0x0c	; 12
    24d2:	ae 0d       	add	r26, r14
    24d4:	bf 1d       	adc	r27, r15
    24d6:	a4 51       	subi	r26, 0x14	; 20
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	8f e0       	ldi	r24, 0x0F	; 15
    24dc:	8c 93       	st	X, r24
    24de:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = dhcpT1value;
    24e0:	1d 96       	adiw	r26, 0x0d	; 13
    24e2:	ee 0d       	add	r30, r14
    24e4:	ff 1d       	adc	r31, r15
    24e6:	e4 51       	subi	r30, 0x14	; 20
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	8a e3       	ldi	r24, 0x3A	; 58
    24ec:	80 83       	st	Z, r24
    24ee:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = dhcpT2value;
    24f0:	3e 96       	adiw	r30, 0x0e	; 14
    24f2:	ae 0d       	add	r26, r14
    24f4:	bf 1d       	adc	r27, r15
    24f6:	a4 51       	subi	r26, 0x14	; 20
    24f8:	bf 4f       	sbci	r27, 0xFF	; 255
    24fa:	8b e3       	ldi	r24, 0x3B	; 59
    24fc:	8c 93       	st	X, r24
    24fe:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
    2500:	1f 96       	adiw	r26, 0x0f	; 15
    2502:	ee 0d       	add	r30, r14
    2504:	ff 1d       	adc	r31, r15
    2506:	e4 51       	subi	r30, 0x14	; 20
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	8f e1       	ldi	r24, 0x1F	; 31
    250c:	80 83       	st	Z, r24
    250e:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = staticRoute;
    2510:	70 96       	adiw	r30, 0x10	; 16
    2512:	ae 0d       	add	r26, r14
    2514:	bf 1d       	adc	r27, r15
    2516:	a4 51       	subi	r26, 0x14	; 20
    2518:	bf 4f       	sbci	r27, 0xFF	; 255
    251a:	81 e2       	ldi	r24, 0x21	; 33
    251c:	8c 93       	st	X, r24
    251e:	ee 0d       	add	r30, r14
	pDHCPMSG->OPT[k++] = endOption;
    2520:	ff 1d       	adc	r31, r15
    2522:	e4 51       	subi	r30, 0x14	; 20
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	8f ef       	ldi	r24, 0xFF	; 255
    2528:	80 83       	st	Z, r24
    252a:	0f 5e       	subi	r16, 0xEF	; 239

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
    252c:	1f 4f       	sbci	r17, 0xFF	; 255
    252e:	08 c0       	rjmp	.+16     	; 0x2540 <send_DHCP_REQUEST+0x2fe>
    2530:	f7 01       	movw	r30, r14
    2532:	e0 0f       	add	r30, r16
    2534:	f1 1f       	adc	r31, r17
    2536:	e4 51       	subi	r30, 0x14	; 20
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	10 82       	st	Z, r1
    253c:	0f 5f       	subi	r16, 0xFF	; 255
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	08 33       	cpi	r16, 0x38	; 56
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	18 07       	cpc	r17, r24
    2546:	a4 f3       	brlt	.-24     	; 0x2530 <send_DHCP_REQUEST+0x2ee>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
    2548:	8e e4       	ldi	r24, 0x4E	; 78
    254a:	92 e0       	ldi	r25, 0x02	; 2
    254c:	92 d3       	rcall	.+1828   	; 0x2c72 <puts>
    254e:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <pDHCPMSG>
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
    2552:	70 91 03 05 	lds	r23, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    2556:	03 e4       	ldi	r16, 0x43	; 67
    2558:	10 e0       	ldi	r17, 0x00	; 0
    255a:	9e 01       	movw	r18, r28
    255c:	2f 5f       	subi	r18, 0xFF	; 255
    255e:	3f 4f       	sbci	r19, 0xFF	; 255
    2560:	44 e2       	ldi	r20, 0x24	; 36
    2562:	52 e0       	ldi	r21, 0x02	; 2
    2564:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <DHCP_SOCKET>
    2568:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <sendto>
    256c:	0f 90       	pop	r0

}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	df 90       	pop	r13
    2582:	cf 90       	pop	r12
    2584:	bf 90       	pop	r11
    2586:	af 90       	pop	r10
    2588:	9f 90       	pop	r9
    258a:	8f 90       	pop	r8
    258c:	7f 90       	pop	r7
    258e:	6f 90       	pop	r6
    2590:	5f 90       	pop	r5
    2592:	08 95       	ret

00002594 <check_DHCP_timeout>:
    2594:	cf 93       	push	r28

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
    2596:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <dhcp_retry_count>
    259a:	82 30       	cpi	r24, 0x02	; 2
    259c:	0c f0       	brlt	.+2      	; 0x25a0 <check_DHCP_timeout+0xc>
    259e:	4e c0       	rjmp	.+156    	; 0x263c <check_DHCP_timeout+0xa8>
		if (dhcp_tick_next < dhcp_tick_1s) {
    25a0:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <dhcp_tick_next>
    25a4:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <dhcp_tick_next+0x1>
    25a8:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <dhcp_tick_next+0x2>
    25ac:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <dhcp_tick_next+0x3>
    25b0:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <dhcp_tick_1s>
    25b4:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <dhcp_tick_1s+0x1>
    25b8:	a0 91 b0 03 	lds	r26, 0x03B0	; 0x8003b0 <dhcp_tick_1s+0x2>
    25bc:	b0 91 b1 03 	lds	r27, 0x03B1	; 0x8003b1 <dhcp_tick_1s+0x3>
    25c0:	48 17       	cp	r20, r24
    25c2:	59 07       	cpc	r21, r25
    25c4:	6a 07       	cpc	r22, r26
    25c6:	7b 07       	cpc	r23, r27
    25c8:	08 f0       	brcs	.+2      	; 0x25cc <check_DHCP_timeout+0x38>
    25ca:	4d c0       	rjmp	.+154    	; 0x2666 <check_DHCP_timeout+0xd2>

			switch ( dhcp_state ) {
    25cc:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <dhcp_state>
    25d0:	82 30       	cpi	r24, 0x02	; 2
    25d2:	49 f0       	breq	.+18     	; 0x25e6 <check_DHCP_timeout+0x52>
    25d4:	84 30       	cpi	r24, 0x04	; 4
    25d6:	61 f0       	breq	.+24     	; 0x25f0 <check_DHCP_timeout+0x5c>
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	71 f4       	brne	.+28     	; 0x25f8 <check_DHCP_timeout+0x64>
				case STATE_DHCP_DISCOVER :
					printf("<<timeout>> state : STATE_DHCP_DISCOVER\r\n");
    25dc:	83 e6       	ldi	r24, 0x63	; 99
    25de:	92 e0       	ldi	r25, 0x02	; 2
    25e0:	48 d3       	rcall	.+1680   	; 0x2c72 <puts>
					send_DHCP_DISCOVER();
    25e2:	ed dc       	rcall	.-1574   	; 0x1fbe <send_DHCP_DISCOVER>
    25e4:	09 c0       	rjmp	.+18     	; 0x25f8 <check_DHCP_timeout+0x64>
				break;
    25e6:	8c e8       	ldi	r24, 0x8C	; 140
		
				case STATE_DHCP_REQUEST :
					printf("<<timeout>> state : STATE_DHCP_REQUEST\r\n");
    25e8:	92 e0       	ldi	r25, 0x02	; 2
    25ea:	43 d3       	rcall	.+1670   	; 0x2c72 <puts>

					send_DHCP_REQUEST();
    25ec:	2a de       	rcall	.-940    	; 0x2242 <send_DHCP_REQUEST>
				break;

				case STATE_DHCP_REREQUEST :
					printf("<<timeout>> state : STATE_DHCP_REREQUEST\r\n");
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <check_DHCP_timeout+0x64>
    25f0:	84 eb       	ldi	r24, 0xB4	; 180
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	3e d3       	rcall	.+1660   	; 0x2c72 <puts>
					
					send_DHCP_REQUEST();
    25f6:	25 de       	rcall	.-950    	; 0x2242 <send_DHCP_REQUEST>
    25f8:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <dhcp_tick_1s>
		
				default :
				break;
			}

			dhcp_tick_1s = 0;
    25fc:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <dhcp_tick_1s+0x1>
    2600:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <dhcp_tick_1s+0x2>
    2604:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <dhcp_tick_1s+0x3>
    2608:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <dhcp_tick_1s>
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
    260c:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <dhcp_tick_1s+0x1>
    2610:	a0 91 b0 03 	lds	r26, 0x03B0	; 0x8003b0 <dhcp_tick_1s+0x2>
    2614:	b0 91 b1 03 	lds	r27, 0x03B1	; 0x8003b1 <dhcp_tick_1s+0x3>
    2618:	0a 96       	adiw	r24, 0x0a	; 10
    261a:	a1 1d       	adc	r26, r1
    261c:	b1 1d       	adc	r27, r1
    261e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dhcp_tick_next>
    2622:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <dhcp_tick_next+0x1>
    2626:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <dhcp_tick_next+0x2>
    262a:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <dhcp_tick_next+0x3>
    262e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <dhcp_retry_count>
			dhcp_retry_count++;
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <dhcp_retry_count>
    2638:	c1 e0       	ldi	r28, 0x01	; 1
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    263a:	16 c0       	rjmp	.+44     	; 0x2668 <check_DHCP_timeout+0xd4>
    263c:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <dhcp_state>
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
			dhcp_retry_count++;
		}
	} else { // timeout occurred

		switch(dhcp_state) {
    2640:	82 30       	cpi	r24, 0x02	; 2
    2642:	41 f0       	breq	.+16     	; 0x2654 <check_DHCP_timeout+0xc0>
    2644:	84 30       	cpi	r24, 0x04	; 4
    2646:	31 f0       	breq	.+12     	; 0x2654 <check_DHCP_timeout+0xc0>
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	51 f4       	brne	.+20     	; 0x2660 <check_DHCP_timeout+0xcc>
			case STATE_DHCP_DISCOVER:
				dhcp_state = STATE_DHCP_INIT;
    264c:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <dhcp_state>
				ret = DHCP_FAILED;
    2650:	c0 e0       	ldi	r28, 0x00	; 0
				break;
    2652:	07 c0       	rjmp	.+14     	; 0x2662 <check_DHCP_timeout+0xce>
			case STATE_DHCP_REQUEST:
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
    2654:	b4 dc       	rcall	.-1688   	; 0x1fbe <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dhcp_state>
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    265c:	c1 e0       	ldi	r28, 0x01	; 1
				break;
			case STATE_DHCP_REQUEST:
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <check_DHCP_timeout+0xce>
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    2660:	c1 e0       	ldi	r28, 0x01	; 1
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
		}
		reset_DHCP_timeout();
    2662:	c7 db       	rcall	.-2162   	; 0x1df2 <reset_DHCP_timeout>
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <check_DHCP_timeout+0xd4>
    2666:	c1 e0       	ldi	r28, 0x01	; 1
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    2668:	8c 2f       	mov	r24, r28
				break;
		}
		reset_DHCP_timeout();
	}
	return ret;
}
    266a:	cf 91       	pop	r28
    266c:	08 95       	ret

0000266e <DHCP_run>:
    266e:	cf 93       	push	r28
uint8_t DHCP_run(void)
{
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
    2670:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <dhcp_state>
    2674:	86 30       	cpi	r24, 0x06	; 6
    2676:	09 f4       	brne	.+2      	; 0x267a <DHCP_run+0xc>
    2678:	11 c1       	rjmp	.+546    	; 0x289c <DHCP_run+0x22e>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
    267a:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <DHCP_SOCKET>
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	68 5f       	subi	r22, 0xF8	; 248
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	00 24       	eor	r0, r0
    2686:	76 95       	lsr	r23
    2688:	67 95       	ror	r22
    268a:	07 94       	ror	r0
    268c:	76 95       	lsr	r23
    268e:	67 95       	ror	r22
    2690:	07 94       	ror	r0
    2692:	76 2f       	mov	r23, r22
    2694:	60 2d       	mov	r22, r0
    2696:	68 5f       	subi	r22, 0xF8	; 248
    2698:	7f 47       	sbci	r23, 0x7F	; 127
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <WIZCHIP_READ>
    26a2:	82 32       	cpi	r24, 0x22	; 34
    26a4:	41 f0       	breq	.+16     	; 0x26b6 <DHCP_run+0x48>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	44 e4       	ldi	r20, 0x44	; 68
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	62 e0       	ldi	r22, 0x02	; 2
    26ae:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <DHCP_SOCKET>
    26b2:	0e 94 aa 03 	call	0x754	; 0x754 <socket>

	ret = DHCP_RUNNING;
	type = parseDHCPMSG();
    26b6:	dd d9       	rcall	.-3142   	; 0x1a72 <parseDHCPMSG>

	switch ( dhcp_state ) {
    26b8:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <dhcp_state>
    26bc:	92 30       	cpi	r25, 0x02	; 2
    26be:	d1 f1       	breq	.+116    	; 0x2734 <DHCP_run+0xc6>
    26c0:	2c f4       	brge	.+10     	; 0x26cc <DHCP_run+0x5e>
    26c2:	99 23       	and	r25, r25
    26c4:	51 f0       	breq	.+20     	; 0x26da <DHCP_run+0x6c>
    26c6:	91 30       	cpi	r25, 0x01	; 1
    26c8:	99 f0       	breq	.+38     	; 0x26f0 <DHCP_run+0x82>
    26ca:	ea c0       	rjmp	.+468    	; 0x28a0 <DHCP_run+0x232>
    26cc:	93 30       	cpi	r25, 0x03	; 3
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <DHCP_run+0x64>
    26d0:	5a c0       	rjmp	.+180    	; 0x2786 <DHCP_run+0x118>
    26d2:	94 30       	cpi	r25, 0x04	; 4
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <DHCP_run+0x6a>
    26d6:	a5 c0       	rjmp	.+330    	; 0x2822 <DHCP_run+0x1b4>
    26d8:	e3 c0       	rjmp	.+454    	; 0x28a0 <DHCP_run+0x232>
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
    26da:	e0 ec       	ldi	r30, 0xC0	; 192
    26dc:	f3 e0       	ldi	r31, 0x03	; 3
    26de:	10 82       	st	Z, r1
         DHCP_allocated_ip[1] = 0;
    26e0:	11 82       	std	Z+1, r1	; 0x01
         DHCP_allocated_ip[2] = 0;
    26e2:	12 82       	std	Z+2, r1	; 0x02
         DHCP_allocated_ip[3] = 0;
   		send_DHCP_DISCOVER();
    26e4:	13 82       	std	Z+3, r1	; 0x03
    26e6:	6b dc       	rcall	.-1834   	; 0x1fbe <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dhcp_state>
   		break;
    26ee:	dd c0       	rjmp	.+442    	; 0x28aa <DHCP_run+0x23c>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	f1 f4       	brne	.+60     	; 0x2730 <DHCP_run+0xc2>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
    26f4:	8e ed       	ldi	r24, 0xDE	; 222
    26f6:	92 e0       	ldi	r25, 0x02	; 2
    26f8:	bc d2       	rcall	.+1400   	; 0x2c72 <puts>
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
    26fa:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <pDHCPMSG>
    26fe:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <pDHCPMSG+0x1>
    2702:	50 96       	adiw	r26, 0x10	; 16
    2704:	8c 91       	ld	r24, X
    2706:	50 97       	sbiw	r26, 0x10	; 16
    2708:	e0 ec       	ldi	r30, 0xC0	; 192
    270a:	f3 e0       	ldi	r31, 0x03	; 3
    270c:	80 83       	st	Z, r24
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
    270e:	51 96       	adiw	r26, 0x11	; 17
    2710:	8c 91       	ld	r24, X
    2712:	51 97       	sbiw	r26, 0x11	; 17
    2714:	81 83       	std	Z+1, r24	; 0x01
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
    2716:	52 96       	adiw	r26, 0x12	; 18
    2718:	8c 91       	ld	r24, X
    271a:	52 97       	sbiw	r26, 0x12	; 18
    271c:	82 83       	std	Z+2, r24	; 0x02
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
    271e:	53 96       	adiw	r26, 0x13	; 19
    2720:	8c 91       	ld	r24, X

				send_DHCP_REQUEST();
    2722:	83 83       	std	Z+3, r24	; 0x03
    2724:	8e dd       	rcall	.-1252   	; 0x2242 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dhcp_state>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    272c:	81 e0       	ldi	r24, 0x01	; 1
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];

				send_DHCP_REQUEST();
				dhcp_state = STATE_DHCP_REQUEST;
			} else ret = check_DHCP_timeout();
    272e:	bd c0       	rjmp	.+378    	; 0x28aa <DHCP_run+0x23c>
    2730:	31 df       	rcall	.-414    	; 0x2594 <check_DHCP_timeout>
         break;

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
    2732:	bb c0       	rjmp	.+374    	; 0x28aa <DHCP_run+0x23c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
    2734:	85 30       	cpi	r24, 0x05	; 5
    2736:	d9 f4       	brne	.+54     	; 0x276e <DHCP_run+0x100>
    2738:	84 ef       	ldi	r24, 0xF4	; 244
    273a:	92 e0       	ldi	r25, 0x02	; 2
#endif
				if (check_DHCP_leasedIP()) {
    273c:	9a d2       	rcall	.+1332   	; 0x2c72 <puts>
    273e:	00 db       	rcall	.-2560   	; 0x1d40 <check_DHCP_leasedIP>
    2740:	88 23       	and	r24, r24
					// Network info assignment from DHCP
					dhcp_ip_assign();
    2742:	59 f0       	breq	.+22     	; 0x275a <DHCP_run+0xec>
    2744:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <dhcp_ip_assign>
    2748:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <dhcp_ip_assign+0x1>
					reset_DHCP_timeout();
    274c:	09 95       	icall

					dhcp_state = STATE_DHCP_LEASED;
    274e:	51 db       	rcall	.-2398   	; 0x1df2 <reset_DHCP_timeout>
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dhcp_state>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2756:	81 e0       	ldi	r24, 0x01	; 1
					reset_DHCP_timeout();

					dhcp_state = STATE_DHCP_LEASED;
				} else {
					// IP address conflict occurred
					reset_DHCP_timeout();
    2758:	a8 c0       	rjmp	.+336    	; 0x28aa <DHCP_run+0x23c>
    275a:	4b db       	rcall	.-2410   	; 0x1df2 <reset_DHCP_timeout>
					dhcp_ip_conflict();
    275c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <dhcp_ip_conflict>
    2760:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <dhcp_ip_conflict+0x1>
				    dhcp_state = STATE_DHCP_INIT;
    2764:	09 95       	icall
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2766:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <dhcp_state>
					// IP address conflict occurred
					reset_DHCP_timeout();
					dhcp_ip_conflict();
				    dhcp_state = STATE_DHCP_INIT;
				}
			} else if (type == DHCP_NAK) {
    276a:	81 e0       	ldi	r24, 0x01	; 1

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_NACK\r\n");
    276c:	9e c0       	rjmp	.+316    	; 0x28aa <DHCP_run+0x23c>
    276e:	86 30       	cpi	r24, 0x06	; 6
    2770:	41 f4       	brne	.+16     	; 0x2782 <DHCP_run+0x114>
    2772:	88 e0       	ldi	r24, 0x08	; 8
#endif

				reset_DHCP_timeout();
    2774:	93 e0       	ldi	r25, 0x03	; 3
    2776:	7d d2       	rcall	.+1274   	; 0x2c72 <puts>

				dhcp_state = STATE_DHCP_DISCOVER;
    2778:	3c db       	rcall	.-2440   	; 0x1df2 <reset_DHCP_timeout>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dhcp_state>
			} else ret = check_DHCP_timeout();
    2780:	94 c0       	rjmp	.+296    	; 0x28aa <DHCP_run+0x23c>
    2782:	08 df       	rcall	.-496    	; 0x2594 <check_DHCP_timeout>
    2784:	92 c0       	rjmp	.+292    	; 0x28aa <DHCP_run+0x23c>
		break;

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
    2786:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dhcp_lease_time>
    278a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <dhcp_lease_time+0x1>
    278e:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <dhcp_lease_time+0x2>
    2792:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <dhcp_lease_time+0x3>
    2796:	8f 3f       	cpi	r24, 0xFF	; 255
    2798:	2f ef       	ldi	r18, 0xFF	; 255
    279a:	92 07       	cpc	r25, r18
    279c:	a2 07       	cpc	r26, r18
    279e:	b2 07       	cpc	r27, r18
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <DHCP_run+0x136>
    27a2:	80 c0       	rjmp	.+256    	; 0x28a4 <DHCP_run+0x236>
    27a4:	b6 95       	lsr	r27
    27a6:	a7 95       	ror	r26
    27a8:	97 95       	ror	r25
    27aa:	87 95       	ror	r24
    27ac:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <dhcp_tick_1s>
    27b0:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <dhcp_tick_1s+0x1>
    27b4:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <dhcp_tick_1s+0x2>
    27b8:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <dhcp_tick_1s+0x3>
    27bc:	84 17       	cp	r24, r20
    27be:	95 07       	cpc	r25, r21
    27c0:	a6 07       	cpc	r26, r22
    27c2:	b7 07       	cpc	r27, r23
    27c4:	08 f0       	brcs	.+2      	; 0x27c8 <DHCP_run+0x15a>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
    27c6:	70 c0       	rjmp	.+224    	; 0x28a8 <DHCP_run+0x23a>
    27c8:	8d e1       	ldi	r24, 0x1D	; 29
    27ca:	93 e0       	ldi	r25, 0x03	; 3
    27cc:	52 d2       	rcall	.+1188   	; 0x2c72 <puts>
#endif

				type = 0;
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
    27ce:	a0 ec       	ldi	r26, 0xC0	; 192
    27d0:	b3 e0       	ldi	r27, 0x03	; 3
    27d2:	8c 91       	ld	r24, X
    27d4:	e4 ec       	ldi	r30, 0xC4	; 196
    27d6:	f3 e0       	ldi	r31, 0x03	; 3
    27d8:	80 83       	st	Z, r24
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
    27da:	11 96       	adiw	r26, 0x01	; 1
    27dc:	8c 91       	ld	r24, X
    27de:	11 97       	sbiw	r26, 0x01	; 1
    27e0:	81 83       	std	Z+1, r24	; 0x01
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
    27e2:	12 96       	adiw	r26, 0x02	; 2
    27e4:	8c 91       	ld	r24, X
    27e6:	12 97       	sbiw	r26, 0x02	; 2
    27e8:	82 83       	std	Z+2, r24	; 0x02
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
    27ea:	13 96       	adiw	r26, 0x03	; 3
    27ec:	8c 91       	ld	r24, X
    27ee:	83 83       	std	Z+3, r24	; 0x03
				
				DHCP_XID++;
    27f0:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <DHCP_XID>
    27f4:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <DHCP_XID+0x1>
    27f8:	a0 91 f8 04 	lds	r26, 0x04F8	; 0x8004f8 <DHCP_XID+0x2>
    27fc:	b0 91 f9 04 	lds	r27, 0x04F9	; 0x8004f9 <DHCP_XID+0x3>
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	a1 1d       	adc	r26, r1
    2804:	b1 1d       	adc	r27, r1
    2806:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <DHCP_XID>
    280a:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <DHCP_XID+0x1>
    280e:	a0 93 f8 04 	sts	0x04F8, r26	; 0x8004f8 <DHCP_XID+0x2>

				send_DHCP_REQUEST();
    2812:	b0 93 f9 04 	sts	0x04F9, r27	; 0x8004f9 <DHCP_XID+0x3>

				reset_DHCP_timeout();
    2816:	15 dd       	rcall	.-1494   	; 0x2242 <send_DHCP_REQUEST>
    2818:	ec da       	rcall	.-2600   	; 0x1df2 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
    281a:	84 e0       	ldi	r24, 0x04	; 4
    281c:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dhcp_state>
    2820:	44 c0       	rjmp	.+136    	; 0x28aa <DHCP_run+0x23c>
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
    2822:	85 30       	cpi	r24, 0x05	; 5
    2824:	71 f5       	brne	.+92     	; 0x2882 <DHCP_run+0x214>
				dhcp_retry_count = 0;
    2826:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <dhcp_retry_count>
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
    282a:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <OLD_allocated_ip>
    282e:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <DHCP_allocated_ip>
    2832:	98 13       	cpse	r25, r24
    2834:	12 c0       	rjmp	.+36     	; 0x285a <DHCP_run+0x1ec>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
    2836:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <OLD_allocated_ip+0x1>
    283a:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <DHCP_allocated_ip+0x1>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
				dhcp_retry_count = 0;
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
    283e:	98 13       	cpse	r25, r24
    2840:	0c c0       	rjmp	.+24     	; 0x285a <DHCP_run+0x1ec>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
    2842:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <OLD_allocated_ip+0x2>
    2846:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <DHCP_allocated_ip+0x2>
		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
				dhcp_retry_count = 0;
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
    284a:	98 13       	cpse	r25, r24
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
    284c:	06 c0       	rjmp	.+12     	; 0x285a <DHCP_run+0x1ec>
    284e:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <OLD_allocated_ip+0x3>
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
				dhcp_retry_count = 0;
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
    2852:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <DHCP_allocated_ip+0x3>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
				{
					ret = DHCP_IP_CHANGED;
					dhcp_ip_update();
    2856:	98 17       	cp	r25, r24
    2858:	51 f0       	breq	.+20     	; 0x286e <DHCP_run+0x200>
    285a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <dhcp_ip_update>
               #ifdef _DHCP_DEBUG_
                  printf(">IP changed.\r\n");
    285e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <dhcp_ip_update+0x1>
    2862:	09 95       	icall
    2864:	8a e3       	ldi	r24, 0x3A	; 58
               #endif
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
    2866:	93 e0       	ldi	r25, 0x03	; 3
    2868:	04 d2       	rcall	.+1032   	; 0x2c72 <puts>
    286a:	c3 e0       	ldi	r28, 0x03	; 3
    286c:	04 c0       	rjmp	.+8      	; 0x2876 <DHCP_run+0x208>
				dhcp_state = STATE_DHCP_REREQUEST;
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
    286e:	88 e4       	ldi	r24, 0x48	; 72
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
    2870:	93 e0       	ldi	r25, 0x03	; 3
				dhcp_state = STATE_DHCP_LEASED;
    2872:	ff d1       	rcall	.+1022   	; 0x2c72 <puts>
    2874:	c4 e0       	ldi	r28, 0x04	; 4
    2876:	bd da       	rcall	.-2694   	; 0x1df2 <reset_DHCP_timeout>
    2878:	83 e0       	ldi	r24, 0x03	; 3
    287a:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dhcp_state>
			} else if (type == DHCP_NAK) {
    287e:	8c 2f       	mov	r24, r28

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
    2880:	14 c0       	rjmp	.+40     	; 0x28aa <DHCP_run+0x23c>
    2882:	86 30       	cpi	r24, 0x06	; 6
    2884:	49 f4       	brne	.+18     	; 0x2898 <DHCP_run+0x22a>
    2886:	8b e5       	ldi	r24, 0x5B	; 91
#endif

				reset_DHCP_timeout();
    2888:	93 e0       	ldi	r25, 0x03	; 3
    288a:	f3 d1       	rcall	.+998    	; 0x2c72 <puts>

				dhcp_state = STATE_DHCP_DISCOVER;
    288c:	b2 da       	rcall	.-2716   	; 0x1df2 <reset_DHCP_timeout>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dhcp_state>
				dhcp_state = STATE_DHCP_REREQUEST;
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
    2894:	84 e0       	ldi	r24, 0x04	; 4
#endif

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
    2896:	09 c0       	rjmp	.+18     	; 0x28aa <DHCP_run+0x23c>
    2898:	7d de       	rcall	.-774    	; 0x2594 <check_DHCP_timeout>
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <DHCP_run+0x23c>
uint8_t DHCP_run(void)
{
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
    289c:	85 e0       	ldi	r24, 0x05	; 5
    289e:	05 c0       	rjmp	.+10     	; 0x28aa <DHCP_run+0x23c>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <DHCP_run+0x23c>
				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
    28a4:	84 e0       	ldi	r24, 0x04	; 4
    28a6:	01 c0       	rjmp	.+2      	; 0x28aa <DHCP_run+0x23c>
    28a8:	84 e0       	ldi	r24, 0x04	; 4
		default :
   		break;
	}

	return ret;
}
    28aa:	cf 91       	pop	r28
    28ac:	08 95       	ret

000028ae <uart_putchar>:
static int uart_putchar(char c, FILE *stream);
//Functions for re-directing printf to uart... 
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	1f 92       	push	r1
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	89 83       	std	Y+1, r24	; 0x01
	uint8_t * ptr = (uint8_t *) &c; 
	UART0_write(ptr, 1); 
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	ce 01       	movw	r24, r28
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	b8 d1       	rcall	.+880    	; 0x2c32 <UART0_write>
	return 0;
}
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0f 90       	pop	r0
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	08 95       	ret

000028ce <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28ce:	8f e0       	ldi	r24, 0x0F	; 15
    28d0:	97 e2       	ldi	r25, 0x27	; 39
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <main+0x4>
    28d6:	00 c0       	rjmp	.+0      	; 0x28d8 <main+0xa>
    28d8:	00 00       	nop

int main(void)
{
    /* Replace with your application code */
	_delay_ms(5);
	GPIO_Init(); 
    28da:	0e 94 a0 00 	call	0x140	; 0x140 <GPIO_Init>
	UART0_Init(); 
    28de:	9d d1       	rcall	.+826    	; 0x2c1a <UART0_Init>
	sysTimerInit();
    28e0:	20 d1       	rcall	.+576    	; 0x2b22 <sysTimerInit>
    28e2:	0e 94 99 00 	call	0x132	; 0x132 <External_Mem_Inter_Init>
	External_Mem_Inter_Init(); 
    28e6:	82 e3       	ldi	r24, 0x32	; 50
	
	stdout = &mystdout; //Re-direct PRINTF TO UART... 
    28e8:	91 e0       	ldi	r25, 0x01	; 1
    28ea:	90 93 10 07 	sts	0x0710, r25	; 0x800710 <__iob+0x3>
    28ee:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <__iob+0x2>
    28f2:	62 e2       	ldi	r22, 0x22	; 34
	
	//1) Define the Exit and Entry for ISR
	reg_wizchip_cris_cbfunc(&disable_global_interrupts, &enable_global_interrupts); 
    28f4:	76 e1       	ldi	r23, 0x16	; 22
    28f6:	84 e2       	ldi	r24, 0x24	; 36
    28f8:	96 e1       	ldi	r25, 0x16	; 22
    28fa:	0e 94 8d 09 	call	0x131a	; 0x131a <reg_wizchip_cris_cbfunc>
    28fe:	60 e4       	ldi	r22, 0x40	; 64
	
	wizchip_init(txBuffer, rxBuffer); 
    2900:	71 e0       	ldi	r23, 0x01	; 1
    2902:	88 e4       	ldi	r24, 0x48	; 72
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	0e 94 a3 0a 	call	0x1546	; 0x1546 <wizchip_init>
    290a:	78 94       	sei
	
	sei(); //Interrupt global interrupts. 
    290c:	0e 94 66 00 	call	0xcc	; 0xcc <Blinky_Init>
	
	Blinky_Init();
    2910:	68 ec       	ldi	r22, 0xC8	; 200
	
	//DHCP
	DHCP_init(1, dhcpBuffer);
    2912:	73 e0       	ldi	r23, 0x03	; 3
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	84 da       	rcall	.-2808   	; 0x1e20 <DHCP_init>
    2918:	48 ee       	ldi	r20, 0xE8	; 232
	//DNS

	//For SRAM the address 0x0000 - 0x7FFF
	//For Ethernet device  0x8000 - 0x83FF
	
	sysTimerSubModuleStart(&myTimers[1], 1000);
    291a:	53 e0       	ldi	r21, 0x03	; 3
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	70 e0       	ldi	r23, 0x00	; 0
    2920:	82 ed       	ldi	r24, 0xD2	; 210
    2922:	94 e0       	ldi	r25, 0x04	; 4
    2924:	17 d1       	rcall	.+558    	; 0x2b54 <sysTimerSubModuleStart>

    while (1) 
    {
		BlinkyTask();
    2926:	0e 94 6f 00 	call	0xde	; 0xde <BlinkyTask>
		DHCP_run(); 
    292a:	a1 de       	rcall	.-702    	; 0x266e <DHCP_run>
		if(sysTimerSubModuleExpired(&myTimers[1]) == true)
    292c:	82 ed       	ldi	r24, 0xD2	; 210
    292e:	94 e0       	ldi	r25, 0x04	; 4
    2930:	20 d1       	rcall	.+576    	; 0x2b72 <sysTimerSubModuleExpired>
    2932:	88 23       	and	r24, r24
    2934:	c1 f3       	breq	.-16     	; 0x2926 <main+0x58>
    2936:	48 ee       	ldi	r20, 0xE8	; 232
		{
			sysTimerSubModuleStart(&myTimers[1], 1000);
    2938:	53 e0       	ldi	r21, 0x03	; 3
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	82 ed       	ldi	r24, 0xD2	; 210
    2940:	94 e0       	ldi	r25, 0x04	; 4
    2942:	08 d1       	rcall	.+528    	; 0x2b54 <sysTimerSubModuleStart>
			DHCP_time_handler(); 
    2944:	21 db       	rcall	.-2494   	; 0x1f88 <DHCP_time_handler>
    2946:	ef cf       	rjmp	.-34     	; 0x2926 <main+0x58>

00002948 <queue_writeforTx>:
    2948:	0f 93       	push	r16
	}

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	fc 01       	movw	r30, r24
	for(tx_buffer_index_t cnt = 0; cnt < length; cnt++)
    2952:	c0 e0       	ldi	r28, 0x00	; 0
    2954:	d0 e0       	ldi	r29, 0x00	; 0
    2956:	1a c0       	rjmp	.+52     	; 0x298c <queue_writeforTx+0x44>
	{
		tx_buffer_index_t i = (ptr->_tx_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2958:	24 81       	ldd	r18, Z+4	; 0x04
    295a:	35 81       	ldd	r19, Z+5	; 0x05
    295c:	2f 5f       	subi	r18, 0xFF	; 255
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	31 70       	andi	r19, 0x01	; 1
		if(i == ptr->_tx_tail)
    2962:	86 81       	ldd	r24, Z+6	; 0x06
    2964:	97 81       	ldd	r25, Z+7	; 0x07
    2966:	28 17       	cp	r18, r24
    2968:	39 07       	cpc	r19, r25
    296a:	a9 f0       	breq	.+42     	; 0x2996 <queue_writeforTx+0x4e>
		{
			return; 
		}
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
    296c:	a0 85       	ldd	r26, Z+8	; 0x08
    296e:	b1 85       	ldd	r27, Z+9	; 0x09
    2970:	84 81       	ldd	r24, Z+4	; 0x04
    2972:	95 81       	ldd	r25, Z+5	; 0x05
    2974:	8d 01       	movw	r16, r26
    2976:	08 0f       	add	r16, r24
    2978:	19 1f       	adc	r17, r25
    297a:	db 01       	movw	r26, r22
    297c:	8c 91       	ld	r24, X
    297e:	d8 01       	movw	r26, r16
    2980:	8c 93       	st	X, r24
		ptr->_tx_head = i;
    2982:	35 83       	std	Z+5, r19	; 0x05
    2984:	24 83       	std	Z+4, r18	; 0x04

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
	for(tx_buffer_index_t cnt = 0; cnt < length; cnt++)
    2986:	21 96       	adiw	r28, 0x01	; 1
		tx_buffer_index_t i = (ptr->_tx_head + 1) % SERIAL_TX_BUFFER_SIZE;
		if(i == ptr->_tx_tail)
		{
			return; 
		}
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
    2988:	6f 5f       	subi	r22, 0xFF	; 255
    298a:	7f 4f       	sbci	r23, 0xFF	; 255

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
	for(tx_buffer_index_t cnt = 0; cnt < length; cnt++)
    298c:	84 2f       	mov	r24, r20
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	c8 17       	cp	r28, r24
    2992:	d9 07       	cpc	r29, r25
    2994:	08 f3       	brcs	.-62     	; 0x2958 <queue_writeforTx+0x10>
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
		ptr->_tx_head = i;
		
	}
	return; 
}
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	08 95       	ret

000029a0 <queue_availableForTx>:

tx_buffer_index_t	queue_availableForTx(queue_struct * ptr)
{
	return ((tx_buffer_index_t) (SERIAL_TX_BUFFER_SIZE + ptr->_tx_head - ptr->_tx_tail)) % SERIAL_TX_BUFFER_SIZE;
    29a0:	fc 01       	movw	r30, r24
    29a2:	24 81       	ldd	r18, Z+4	; 0x04
    29a4:	35 81       	ldd	r19, Z+5	; 0x05
    29a6:	86 81       	ldd	r24, Z+6	; 0x06
    29a8:	97 81       	ldd	r25, Z+7	; 0x07
    29aa:	a9 01       	movw	r20, r18
    29ac:	48 1b       	sub	r20, r24
    29ae:	59 0b       	sbc	r21, r25
    29b0:	ca 01       	movw	r24, r20
}
    29b2:	91 70       	andi	r25, 0x01	; 1
    29b4:	08 95       	ret

000029b6 <queue_readForTx>:

uint8_t queue_readForTx(queue_struct * ptr)
{
    29b6:	fc 01       	movw	r30, r24
	// if the head isn't ahead of the tail, we don't have any characters
	if (ptr->_tx_head == ptr->_tx_tail)
    29b8:	24 81       	ldd	r18, Z+4	; 0x04
    29ba:	35 81       	ldd	r19, Z+5	; 0x05
    29bc:	86 81       	ldd	r24, Z+6	; 0x06
    29be:	97 81       	ldd	r25, Z+7	; 0x07
    29c0:	28 17       	cp	r18, r24
    29c2:	39 07       	cpc	r19, r25
    29c4:	79 f0       	breq	.+30     	; 0x29e4 <queue_readForTx+0x2e>
	{
		return -1;
	} else
	{
		unsigned char c = *(ptr->pTxBuffer  + ptr->_tx_tail);
    29c6:	a0 85       	ldd	r26, Z+8	; 0x08
    29c8:	b1 85       	ldd	r27, Z+9	; 0x09
    29ca:	86 81       	ldd	r24, Z+6	; 0x06
    29cc:	97 81       	ldd	r25, Z+7	; 0x07
    29ce:	a8 0f       	add	r26, r24
    29d0:	b9 1f       	adc	r27, r25
    29d2:	8c 91       	ld	r24, X
		ptr->_tx_tail = (tx_buffer_index_t) (ptr->_tx_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    29d4:	26 81       	ldd	r18, Z+6	; 0x06
    29d6:	37 81       	ldd	r19, Z+7	; 0x07
    29d8:	2f 5f       	subi	r18, 0xFF	; 255
    29da:	3f 4f       	sbci	r19, 0xFF	; 255
    29dc:	31 70       	andi	r19, 0x01	; 1
    29de:	37 83       	std	Z+7, r19	; 0x07
    29e0:	26 83       	std	Z+6, r18	; 0x06
		return (int8_t)c;
    29e2:	08 95       	ret
uint8_t queue_readForTx(queue_struct * ptr)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (ptr->_tx_head == ptr->_tx_tail)
	{
		return -1;
    29e4:	8f ef       	ldi	r24, 0xFF	; 255
	{
		unsigned char c = *(ptr->pTxBuffer  + ptr->_tx_tail);
		ptr->_tx_tail = (tx_buffer_index_t) (ptr->_tx_tail + 1) % SERIAL_TX_BUFFER_SIZE;
		return (int8_t)c;
	}
    29e6:	08 95       	ret

000029e8 <__vector_12>:
}
void sysTimerSubModuleResume(timer * pTimer)
{
	DISABLE_GLOBAL_INTERRUPTS();
	pTimer->enable			= true;
	ENABLE_GLOBAL_INTERRUPTS();
    29e8:	1f 92       	push	r1
    29ea:	0f 92       	push	r0
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	0f 92       	push	r0
    29f0:	11 24       	eor	r1, r1
    29f2:	0b b6       	in	r0, 0x3b	; 59
    29f4:	0f 92       	push	r0
    29f6:	cf 92       	push	r12
    29f8:	df 92       	push	r13
    29fa:	ef 92       	push	r14
    29fc:	ff 92       	push	r15
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	2f 93       	push	r18
    2a04:	3f 93       	push	r19
    2a06:	4f 93       	push	r20
    2a08:	8f 93       	push	r24
    2a0a:	9f 93       	push	r25
    2a0c:	ef 93       	push	r30
    2a0e:	ff 93       	push	r31
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	6c c0       	rjmp	.+216    	; 0x2aec <__vector_12+0x104>
    2a14:	84 2f       	mov	r24, r20
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	fc 01       	movw	r30, r24
    2a1a:	ee 0f       	add	r30, r30
    2a1c:	ff 1f       	adc	r31, r31
    2a1e:	9c 01       	movw	r18, r24
    2a20:	22 0f       	add	r18, r18
    2a22:	33 1f       	adc	r19, r19
    2a24:	22 0f       	add	r18, r18
    2a26:	33 1f       	adc	r19, r19
    2a28:	22 0f       	add	r18, r18
    2a2a:	33 1f       	adc	r19, r19
    2a2c:	e2 0f       	add	r30, r18
    2a2e:	f3 1f       	adc	r31, r19
    2a30:	e8 53       	subi	r30, 0x38	; 56
    2a32:	fb 4f       	sbci	r31, 0xFB	; 251
    2a34:	20 85       	ldd	r18, Z+8	; 0x08
    2a36:	22 23       	and	r18, r18
    2a38:	89 f0       	breq	.+34     	; 0x2a5c <__vector_12+0x74>
    2a3a:	9c 01       	movw	r18, r24
    2a3c:	22 0f       	add	r18, r18
    2a3e:	33 1f       	adc	r19, r19
    2a40:	22 0f       	add	r18, r18
    2a42:	33 1f       	adc	r19, r19
    2a44:	22 0f       	add	r18, r18
    2a46:	33 1f       	adc	r19, r19
    2a48:	fc 01       	movw	r30, r24
    2a4a:	ee 0f       	add	r30, r30
    2a4c:	ff 1f       	adc	r31, r31
    2a4e:	e2 0f       	add	r30, r18
    2a50:	f3 1f       	adc	r31, r19
    2a52:	e8 53       	subi	r30, 0x38	; 56
    2a54:	fb 4f       	sbci	r31, 0xFB	; 251
    2a56:	21 85       	ldd	r18, Z+9	; 0x09
    2a58:	21 11       	cpse	r18, r1
    2a5a:	47 c0       	rjmp	.+142    	; 0x2aea <__vector_12+0x102>
    2a5c:	9c 01       	movw	r18, r24
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	22 0f       	add	r18, r18
    2a64:	33 1f       	adc	r19, r19
    2a66:	22 0f       	add	r18, r18
    2a68:	33 1f       	adc	r19, r19
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	ee 0f       	add	r30, r30
    2a6e:	ff 1f       	adc	r31, r31
    2a70:	e2 0f       	add	r30, r18
    2a72:	f3 1f       	adc	r31, r19
    2a74:	e8 53       	subi	r30, 0x38	; 56
    2a76:	fb 4f       	sbci	r31, 0xFB	; 251
    2a78:	21 85       	ldd	r18, Z+9	; 0x09
    2a7a:	22 23       	and	r18, r18
    2a7c:	b1 f1       	breq	.+108    	; 0x2aea <__vector_12+0x102>
    2a7e:	9c 01       	movw	r18, r24
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	22 0f       	add	r18, r18
    2a86:	33 1f       	adc	r19, r19
    2a88:	22 0f       	add	r18, r18
    2a8a:	33 1f       	adc	r19, r19
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	ee 0f       	add	r30, r30
    2a90:	ff 1f       	adc	r31, r31
    2a92:	e2 0f       	add	r30, r18
    2a94:	f3 1f       	adc	r31, r19
    2a96:	e8 53       	subi	r30, 0x38	; 56
    2a98:	fb 4f       	sbci	r31, 0xFB	; 251
    2a9a:	00 81       	ld	r16, Z
    2a9c:	11 81       	ldd	r17, Z+1	; 0x01
    2a9e:	22 81       	ldd	r18, Z+2	; 0x02
    2aa0:	33 81       	ldd	r19, Z+3	; 0x03
    2aa2:	0f 5f       	subi	r16, 0xFF	; 255
    2aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa6:	2f 4f       	sbci	r18, 0xFF	; 255
    2aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aaa:	00 83       	st	Z, r16
    2aac:	11 83       	std	Z+1, r17	; 0x01
    2aae:	22 83       	std	Z+2, r18	; 0x02
    2ab0:	33 83       	std	Z+3, r19	; 0x03
    2ab2:	c4 80       	ldd	r12, Z+4	; 0x04
    2ab4:	d5 80       	ldd	r13, Z+5	; 0x05
    2ab6:	e6 80       	ldd	r14, Z+6	; 0x06
    2ab8:	f7 80       	ldd	r15, Z+7	; 0x07
    2aba:	0c 15       	cp	r16, r12
    2abc:	1d 05       	cpc	r17, r13
    2abe:	2e 05       	cpc	r18, r14
    2ac0:	3f 05       	cpc	r19, r15
    2ac2:	98 f0       	brcs	.+38     	; 0x2aea <__vector_12+0x102>
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	ee 0f       	add	r30, r30
    2ac8:	ff 1f       	adc	r31, r31
    2aca:	88 0f       	add	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	e8 0f       	add	r30, r24
    2ad8:	f9 1f       	adc	r31, r25
    2ada:	e8 53       	subi	r30, 0x38	; 56
    2adc:	fb 4f       	sbci	r31, 0xFB	; 251
    2ade:	c0 82       	st	Z, r12
    2ae0:	d1 82       	std	Z+1, r13	; 0x01
    2ae2:	e2 82       	std	Z+2, r14	; 0x02
    2ae4:	f3 82       	std	Z+3, r15	; 0x03
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	80 87       	std	Z+8, r24	; 0x08
    2aea:	4f 5f       	subi	r20, 0xFF	; 255
    2aec:	44 30       	cpi	r20, 0x04	; 4
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <__vector_12+0x10a>
    2af0:	91 cf       	rjmp	.-222    	; 0x2a14 <__vector_12+0x2c>
    2af2:	ff 91       	pop	r31
    2af4:	ef 91       	pop	r30
    2af6:	9f 91       	pop	r25
    2af8:	8f 91       	pop	r24
    2afa:	4f 91       	pop	r20
    2afc:	3f 91       	pop	r19
    2afe:	2f 91       	pop	r18
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	ff 90       	pop	r15
    2b06:	ef 90       	pop	r14
    2b08:	df 90       	pop	r13
    2b0a:	cf 90       	pop	r12
    2b0c:	0f 90       	pop	r0
    2b0e:	0b be       	out	0x3b, r0	; 59
    2b10:	0f 90       	pop	r0
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	0f 90       	pop	r0
    2b16:	1f 90       	pop	r1
    2b18:	18 95       	reti

00002b1a <sysTimerStart>:
    2b1a:	87 b7       	in	r24, 0x37	; 55
    2b1c:	80 61       	ori	r24, 0x10	; 16
    2b1e:	87 bf       	out	0x37, r24	; 55
    2b20:	08 95       	ret

00002b22 <sysTimerInit>:
    2b22:	8f b5       	in	r24, 0x2f	; 47
    2b24:	8c 7f       	andi	r24, 0xFC	; 252
    2b26:	8f bd       	out	0x2f, r24	; 47
    2b28:	8e b5       	in	r24, 0x2e	; 46
    2b2a:	88 7e       	andi	r24, 0xE8	; 232
    2b2c:	8e bd       	out	0x2e, r24	; 46
    2b2e:	8e b5       	in	r24, 0x2e	; 46
    2b30:	8a 60       	ori	r24, 0x0A	; 10
    2b32:	8e bd       	out	0x2e, r24	; 46
    2b34:	ea e7       	ldi	r30, 0x7A	; 122
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	80 7e       	andi	r24, 0xE0	; 224
    2b3c:	80 83       	st	Z, r24
    2b3e:	83 e0       	ldi	r24, 0x03	; 3
    2b40:	8b bd       	out	0x2b, r24	; 43
    2b42:	88 ee       	ldi	r24, 0xE8	; 232
    2b44:	8a bd       	out	0x2a, r24	; 42
    2b46:	1d bc       	out	0x2d, r1	; 45
    2b48:	1c bc       	out	0x2c, r1	; 44
    2b4a:	86 b7       	in	r24, 0x36	; 54
    2b4c:	8f 7e       	andi	r24, 0xEF	; 239
    2b4e:	86 bf       	out	0x36, r24	; 54
    2b50:	e4 cf       	rjmp	.-56     	; 0x2b1a <sysTimerStart>
    2b52:	08 95       	ret

00002b54 <sysTimerSubModuleStart>:
    2b54:	fc 01       	movw	r30, r24
    2b56:	f8 94       	cli
    2b58:	44 83       	std	Z+4, r20	; 0x04
    2b5a:	55 83       	std	Z+5, r21	; 0x05
    2b5c:	66 83       	std	Z+6, r22	; 0x06
    2b5e:	77 83       	std	Z+7, r23	; 0x07
    2b60:	10 82       	st	Z, r1
    2b62:	11 82       	std	Z+1, r1	; 0x01
    2b64:	12 82       	std	Z+2, r1	; 0x02
    2b66:	13 82       	std	Z+3, r1	; 0x03
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	81 87       	std	Z+9, r24	; 0x09
    2b6c:	10 86       	std	Z+8, r1	; 0x08
    2b6e:	78 94       	sei
    2b70:	08 95       	ret

00002b72 <sysTimerSubModuleExpired>:
}

bool sysTimerSubModuleExpired(timer * pTimer)
{
	return pTimer->timerExpired; 
    2b72:	fc 01       	movw	r30, r24
    2b74:	80 85       	ldd	r24, Z+8	; 0x08
    2b76:	08 95       	ret

00002b78 <__vector_19>:
#define UART0_TX_START()	UCSR0B |=  (1 << UDRIE0) 
#define UART0_TX_STOP()		UCSR0B &= ~((1 << UDRIE0)) 
#define TX_REGISTER			UDR0

ISR(USART0_UDRE_vect)
{
    2b78:	1f 92       	push	r1
    2b7a:	0f 92       	push	r0
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	0f 92       	push	r0
    2b80:	11 24       	eor	r1, r1
    2b82:	0b b6       	in	r0, 0x3b	; 59
    2b84:	0f 92       	push	r0
    2b86:	2f 93       	push	r18
    2b88:	3f 93       	push	r19
    2b8a:	4f 93       	push	r20
    2b8c:	5f 93       	push	r21
    2b8e:	6f 93       	push	r22
    2b90:	7f 93       	push	r23
    2b92:	8f 93       	push	r24
    2b94:	9f 93       	push	r25
    2b96:	af 93       	push	r26
    2b98:	bf 93       	push	r27
    2b9a:	ef 93       	push	r30
    2b9c:	ff 93       	push	r31
	//Check if there is data pending to be written
	if(queue_availableForTx(&queueForUart0) == 0)
    2b9e:	80 e5       	ldi	r24, 0x50	; 80
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	fe de       	rcall	.-516    	; 0x29a0 <queue_availableForTx>
    2ba4:	89 2b       	or	r24, r25
    2ba6:	21 f4       	brne	.+8      	; 0x2bb0 <__vector_19+0x38>
	{
		//No More data to transmit
		UART0_TX_STOP();
    2ba8:	8a b1       	in	r24, 0x0a	; 10
    2baa:	8f 7d       	andi	r24, 0xDF	; 223
    2bac:	8a b9       	out	0x0a, r24	; 10
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <__vector_19+0x40>
	}else
	{
		TX_REGISTER = queue_readForTx(&queueForUart0);
    2bb0:	80 e5       	ldi	r24, 0x50	; 80
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	00 df       	rcall	.-512    	; 0x29b6 <queue_readForTx>
    2bb6:	8c b9       	out	0x0c, r24	; 12
	}
	
}
    2bb8:	ff 91       	pop	r31
    2bba:	ef 91       	pop	r30
    2bbc:	bf 91       	pop	r27
    2bbe:	af 91       	pop	r26
    2bc0:	9f 91       	pop	r25
    2bc2:	8f 91       	pop	r24
    2bc4:	7f 91       	pop	r23
    2bc6:	6f 91       	pop	r22
    2bc8:	5f 91       	pop	r21
    2bca:	4f 91       	pop	r20
    2bcc:	3f 91       	pop	r19
    2bce:	2f 91       	pop	r18
    2bd0:	0f 90       	pop	r0
    2bd2:	0b be       	out	0x3b, r0	; 59
    2bd4:	0f 90       	pop	r0
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	0f 90       	pop	r0
    2bda:	1f 90       	pop	r1
    2bdc:	18 95       	reti

00002bde <__vector_32>:

ISR(USART1_TX_vect)
{
    2bde:	1f 92       	push	r1
    2be0:	0f 92       	push	r0
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	0f 92       	push	r0
    2be6:	11 24       	eor	r1, r1
	
}
    2be8:	0f 90       	pop	r0
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	0f 90       	pop	r0
    2bee:	1f 90       	pop	r1
    2bf0:	18 95       	reti

00002bf2 <__vector_18>:

ISR(USART0_RX_vect)
{
    2bf2:	1f 92       	push	r1
    2bf4:	0f 92       	push	r0
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	0f 92       	push	r0
    2bfa:	11 24       	eor	r1, r1
	
	
}
    2bfc:	0f 90       	pop	r0
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	0f 90       	pop	r0
    2c02:	1f 90       	pop	r1
    2c04:	18 95       	reti

00002c06 <__vector_30>:

ISR(USART1_RX_vect)
{
    2c06:	1f 92       	push	r1
    2c08:	0f 92       	push	r0
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	0f 92       	push	r0
    2c0e:	11 24       	eor	r1, r1
	
}
    2c10:	0f 90       	pop	r0
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	0f 90       	pop	r0
    2c16:	1f 90       	pop	r1
    2c18:	18 95       	reti

00002c1a <UART0_Init>:

void UART0_Init(void)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(8>>8); //8 for 115200
    2c1a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)8;
    2c1e:	88 e0       	ldi	r24, 0x08	; 8
    2c20:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = (1 << U2X);
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	8b b9       	out	0x0b, r24	; 11
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
    2c26:	88 e1       	ldi	r24, 0x18	; 24
    2c28:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C = (3<<UCSZ0);
    2c2a:	86 e0       	ldi	r24, 0x06	; 6
    2c2c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    2c30:	08 95       	ret

00002c32 <UART0_write>:
}
void UART0_write(const uint8_t * data, const uint8_t numbOfBytes)
{
    2c32:	46 2f       	mov	r20, r22
	queue_writeforTx(&queueForUart0, data, numbOfBytes); 
    2c34:	bc 01       	movw	r22, r24
    2c36:	80 e5       	ldi	r24, 0x50	; 80
    2c38:	91 e0       	ldi	r25, 0x01	; 1
    2c3a:	86 de       	rcall	.-756    	; 0x2948 <queue_writeforTx>
	//Generate Interrupt on UDRIEN UDRIEn: USART Data Register Empty Interrupt Enable
	UART0_TX_START(); 
    2c3c:	8a b1       	in	r24, 0x0a	; 10
    2c3e:	80 62       	ori	r24, 0x20	; 32
    2c40:	8a b9       	out	0x0a, r24	; 10
    2c42:	08 95       	ret

00002c44 <enable_global_interrupts>:
	WAIT();
}

void	enable_global_interrupts(void)
{
	sei(); 
    2c44:	78 94       	sei
    2c46:	08 95       	ret

00002c48 <disable_global_interrupts>:
}
void	disable_global_interrupts(void)
{
	cli(); 
    2c48:	f8 94       	cli
    2c4a:	08 95       	ret

00002c4c <printf>:
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	ae 01       	movw	r20, r28
    2c56:	4b 5f       	subi	r20, 0xFB	; 251
    2c58:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5a:	fa 01       	movw	r30, r20
    2c5c:	61 91       	ld	r22, Z+
    2c5e:	71 91       	ld	r23, Z+
    2c60:	af 01       	movw	r20, r30
    2c62:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <__iob+0x2>
    2c66:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <__iob+0x3>
    2c6a:	33 d0       	rcall	.+102    	; 0x2cd2 <vfprintf>
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	08 95       	ret

00002c72 <puts>:
    2c72:	0f 93       	push	r16
    2c74:	1f 93       	push	r17
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	e0 91 0f 07 	lds	r30, 0x070F	; 0x80070f <__iob+0x2>
    2c7e:	f0 91 10 07 	lds	r31, 0x0710	; 0x800710 <__iob+0x3>
    2c82:	23 81       	ldd	r18, Z+3	; 0x03
    2c84:	21 ff       	sbrs	r18, 1
    2c86:	1b c0       	rjmp	.+54     	; 0x2cbe <puts+0x4c>
    2c88:	8c 01       	movw	r16, r24
    2c8a:	d0 e0       	ldi	r29, 0x00	; 0
    2c8c:	c0 e0       	ldi	r28, 0x00	; 0
    2c8e:	f8 01       	movw	r30, r16
    2c90:	81 91       	ld	r24, Z+
    2c92:	8f 01       	movw	r16, r30
    2c94:	60 91 0f 07 	lds	r22, 0x070F	; 0x80070f <__iob+0x2>
    2c98:	70 91 10 07 	lds	r23, 0x0710	; 0x800710 <__iob+0x3>
    2c9c:	db 01       	movw	r26, r22
    2c9e:	18 96       	adiw	r26, 0x08	; 8
    2ca0:	ed 91       	ld	r30, X+
    2ca2:	fc 91       	ld	r31, X
    2ca4:	19 97       	sbiw	r26, 0x09	; 9
    2ca6:	88 23       	and	r24, r24
    2ca8:	31 f0       	breq	.+12     	; 0x2cb6 <puts+0x44>
    2caa:	09 95       	icall
    2cac:	89 2b       	or	r24, r25
    2cae:	79 f3       	breq	.-34     	; 0x2c8e <puts+0x1c>
    2cb0:	df ef       	ldi	r29, 0xFF	; 255
    2cb2:	cf ef       	ldi	r28, 0xFF	; 255
    2cb4:	ec cf       	rjmp	.-40     	; 0x2c8e <puts+0x1c>
    2cb6:	8a e0       	ldi	r24, 0x0A	; 10
    2cb8:	09 95       	icall
    2cba:	89 2b       	or	r24, r25
    2cbc:	19 f0       	breq	.+6      	; 0x2cc4 <puts+0x52>
    2cbe:	8f ef       	ldi	r24, 0xFF	; 255
    2cc0:	9f ef       	ldi	r25, 0xFF	; 255
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <puts+0x56>
    2cc4:	8d 2f       	mov	r24, r29
    2cc6:	9c 2f       	mov	r25, r28
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	08 95       	ret

00002cd2 <vfprintf>:
    2cd2:	2f 92       	push	r2
    2cd4:	3f 92       	push	r3
    2cd6:	4f 92       	push	r4
    2cd8:	5f 92       	push	r5
    2cda:	6f 92       	push	r6
    2cdc:	7f 92       	push	r7
    2cde:	8f 92       	push	r8
    2ce0:	9f 92       	push	r9
    2ce2:	af 92       	push	r10
    2ce4:	bf 92       	push	r11
    2ce6:	cf 92       	push	r12
    2ce8:	df 92       	push	r13
    2cea:	ef 92       	push	r14
    2cec:	ff 92       	push	r15
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	2b 97       	sbiw	r28, 0x0b	; 11
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	6c 01       	movw	r12, r24
    2d08:	7b 01       	movw	r14, r22
    2d0a:	8a 01       	movw	r16, r20
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	17 82       	std	Z+7, r1	; 0x07
    2d10:	16 82       	std	Z+6, r1	; 0x06
    2d12:	83 81       	ldd	r24, Z+3	; 0x03
    2d14:	81 ff       	sbrs	r24, 1
    2d16:	bf c1       	rjmp	.+894    	; 0x3096 <vfprintf+0x3c4>
    2d18:	ce 01       	movw	r24, r28
    2d1a:	01 96       	adiw	r24, 0x01	; 1
    2d1c:	3c 01       	movw	r6, r24
    2d1e:	f6 01       	movw	r30, r12
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	f7 01       	movw	r30, r14
    2d24:	93 fd       	sbrc	r25, 3
    2d26:	85 91       	lpm	r24, Z+
    2d28:	93 ff       	sbrs	r25, 3
    2d2a:	81 91       	ld	r24, Z+
    2d2c:	7f 01       	movw	r14, r30
    2d2e:	88 23       	and	r24, r24
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <vfprintf+0x62>
    2d32:	ad c1       	rjmp	.+858    	; 0x308e <vfprintf+0x3bc>
    2d34:	85 32       	cpi	r24, 0x25	; 37
    2d36:	39 f4       	brne	.+14     	; 0x2d46 <vfprintf+0x74>
    2d38:	93 fd       	sbrc	r25, 3
    2d3a:	85 91       	lpm	r24, Z+
    2d3c:	93 ff       	sbrs	r25, 3
    2d3e:	81 91       	ld	r24, Z+
    2d40:	7f 01       	movw	r14, r30
    2d42:	85 32       	cpi	r24, 0x25	; 37
    2d44:	21 f4       	brne	.+8      	; 0x2d4e <vfprintf+0x7c>
    2d46:	b6 01       	movw	r22, r12
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	d6 d1       	rcall	.+940    	; 0x30f8 <fputc>
    2d4c:	e8 cf       	rjmp	.-48     	; 0x2d1e <vfprintf+0x4c>
    2d4e:	91 2c       	mov	r9, r1
    2d50:	21 2c       	mov	r2, r1
    2d52:	31 2c       	mov	r3, r1
    2d54:	ff e1       	ldi	r31, 0x1F	; 31
    2d56:	f3 15       	cp	r31, r3
    2d58:	d8 f0       	brcs	.+54     	; 0x2d90 <vfprintf+0xbe>
    2d5a:	8b 32       	cpi	r24, 0x2B	; 43
    2d5c:	79 f0       	breq	.+30     	; 0x2d7c <vfprintf+0xaa>
    2d5e:	38 f4       	brcc	.+14     	; 0x2d6e <vfprintf+0x9c>
    2d60:	80 32       	cpi	r24, 0x20	; 32
    2d62:	79 f0       	breq	.+30     	; 0x2d82 <vfprintf+0xb0>
    2d64:	83 32       	cpi	r24, 0x23	; 35
    2d66:	a1 f4       	brne	.+40     	; 0x2d90 <vfprintf+0xbe>
    2d68:	23 2d       	mov	r18, r3
    2d6a:	20 61       	ori	r18, 0x10	; 16
    2d6c:	1d c0       	rjmp	.+58     	; 0x2da8 <vfprintf+0xd6>
    2d6e:	8d 32       	cpi	r24, 0x2D	; 45
    2d70:	61 f0       	breq	.+24     	; 0x2d8a <vfprintf+0xb8>
    2d72:	80 33       	cpi	r24, 0x30	; 48
    2d74:	69 f4       	brne	.+26     	; 0x2d90 <vfprintf+0xbe>
    2d76:	23 2d       	mov	r18, r3
    2d78:	21 60       	ori	r18, 0x01	; 1
    2d7a:	16 c0       	rjmp	.+44     	; 0x2da8 <vfprintf+0xd6>
    2d7c:	83 2d       	mov	r24, r3
    2d7e:	82 60       	ori	r24, 0x02	; 2
    2d80:	38 2e       	mov	r3, r24
    2d82:	e3 2d       	mov	r30, r3
    2d84:	e4 60       	ori	r30, 0x04	; 4
    2d86:	3e 2e       	mov	r3, r30
    2d88:	2a c0       	rjmp	.+84     	; 0x2dde <vfprintf+0x10c>
    2d8a:	f3 2d       	mov	r31, r3
    2d8c:	f8 60       	ori	r31, 0x08	; 8
    2d8e:	1d c0       	rjmp	.+58     	; 0x2dca <vfprintf+0xf8>
    2d90:	37 fc       	sbrc	r3, 7
    2d92:	2d c0       	rjmp	.+90     	; 0x2dee <vfprintf+0x11c>
    2d94:	20 ed       	ldi	r18, 0xD0	; 208
    2d96:	28 0f       	add	r18, r24
    2d98:	2a 30       	cpi	r18, 0x0A	; 10
    2d9a:	40 f0       	brcs	.+16     	; 0x2dac <vfprintf+0xda>
    2d9c:	8e 32       	cpi	r24, 0x2E	; 46
    2d9e:	b9 f4       	brne	.+46     	; 0x2dce <vfprintf+0xfc>
    2da0:	36 fc       	sbrc	r3, 6
    2da2:	75 c1       	rjmp	.+746    	; 0x308e <vfprintf+0x3bc>
    2da4:	23 2d       	mov	r18, r3
    2da6:	20 64       	ori	r18, 0x40	; 64
    2da8:	32 2e       	mov	r3, r18
    2daa:	19 c0       	rjmp	.+50     	; 0x2dde <vfprintf+0x10c>
    2dac:	36 fe       	sbrs	r3, 6
    2dae:	06 c0       	rjmp	.+12     	; 0x2dbc <vfprintf+0xea>
    2db0:	8a e0       	ldi	r24, 0x0A	; 10
    2db2:	98 9e       	mul	r9, r24
    2db4:	20 0d       	add	r18, r0
    2db6:	11 24       	eor	r1, r1
    2db8:	92 2e       	mov	r9, r18
    2dba:	11 c0       	rjmp	.+34     	; 0x2dde <vfprintf+0x10c>
    2dbc:	ea e0       	ldi	r30, 0x0A	; 10
    2dbe:	2e 9e       	mul	r2, r30
    2dc0:	20 0d       	add	r18, r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	22 2e       	mov	r2, r18
    2dc6:	f3 2d       	mov	r31, r3
    2dc8:	f0 62       	ori	r31, 0x20	; 32
    2dca:	3f 2e       	mov	r3, r31
    2dcc:	08 c0       	rjmp	.+16     	; 0x2dde <vfprintf+0x10c>
    2dce:	8c 36       	cpi	r24, 0x6C	; 108
    2dd0:	21 f4       	brne	.+8      	; 0x2dda <vfprintf+0x108>
    2dd2:	83 2d       	mov	r24, r3
    2dd4:	80 68       	ori	r24, 0x80	; 128
    2dd6:	38 2e       	mov	r3, r24
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <vfprintf+0x10c>
    2dda:	88 36       	cpi	r24, 0x68	; 104
    2ddc:	41 f4       	brne	.+16     	; 0x2dee <vfprintf+0x11c>
    2dde:	f7 01       	movw	r30, r14
    2de0:	93 fd       	sbrc	r25, 3
    2de2:	85 91       	lpm	r24, Z+
    2de4:	93 ff       	sbrs	r25, 3
    2de6:	81 91       	ld	r24, Z+
    2de8:	7f 01       	movw	r14, r30
    2dea:	81 11       	cpse	r24, r1
    2dec:	b3 cf       	rjmp	.-154    	; 0x2d54 <vfprintf+0x82>
    2dee:	98 2f       	mov	r25, r24
    2df0:	9f 7d       	andi	r25, 0xDF	; 223
    2df2:	95 54       	subi	r25, 0x45	; 69
    2df4:	93 30       	cpi	r25, 0x03	; 3
    2df6:	28 f4       	brcc	.+10     	; 0x2e02 <vfprintf+0x130>
    2df8:	0c 5f       	subi	r16, 0xFC	; 252
    2dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfc:	9f e3       	ldi	r25, 0x3F	; 63
    2dfe:	99 83       	std	Y+1, r25	; 0x01
    2e00:	0d c0       	rjmp	.+26     	; 0x2e1c <vfprintf+0x14a>
    2e02:	83 36       	cpi	r24, 0x63	; 99
    2e04:	31 f0       	breq	.+12     	; 0x2e12 <vfprintf+0x140>
    2e06:	83 37       	cpi	r24, 0x73	; 115
    2e08:	71 f0       	breq	.+28     	; 0x2e26 <vfprintf+0x154>
    2e0a:	83 35       	cpi	r24, 0x53	; 83
    2e0c:	09 f0       	breq	.+2      	; 0x2e10 <vfprintf+0x13e>
    2e0e:	55 c0       	rjmp	.+170    	; 0x2eba <vfprintf+0x1e8>
    2e10:	20 c0       	rjmp	.+64     	; 0x2e52 <vfprintf+0x180>
    2e12:	f8 01       	movw	r30, r16
    2e14:	80 81       	ld	r24, Z
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	0e 5f       	subi	r16, 0xFE	; 254
    2e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1c:	88 24       	eor	r8, r8
    2e1e:	83 94       	inc	r8
    2e20:	91 2c       	mov	r9, r1
    2e22:	53 01       	movw	r10, r6
    2e24:	12 c0       	rjmp	.+36     	; 0x2e4a <vfprintf+0x178>
    2e26:	28 01       	movw	r4, r16
    2e28:	f2 e0       	ldi	r31, 0x02	; 2
    2e2a:	4f 0e       	add	r4, r31
    2e2c:	51 1c       	adc	r5, r1
    2e2e:	f8 01       	movw	r30, r16
    2e30:	a0 80       	ld	r10, Z
    2e32:	b1 80       	ldd	r11, Z+1	; 0x01
    2e34:	36 fe       	sbrs	r3, 6
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <vfprintf+0x16c>
    2e38:	69 2d       	mov	r22, r9
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <vfprintf+0x170>
    2e3e:	6f ef       	ldi	r22, 0xFF	; 255
    2e40:	7f ef       	ldi	r23, 0xFF	; 255
    2e42:	c5 01       	movw	r24, r10
    2e44:	4e d1       	rcall	.+668    	; 0x30e2 <strnlen>
    2e46:	4c 01       	movw	r8, r24
    2e48:	82 01       	movw	r16, r4
    2e4a:	f3 2d       	mov	r31, r3
    2e4c:	ff 77       	andi	r31, 0x7F	; 127
    2e4e:	3f 2e       	mov	r3, r31
    2e50:	15 c0       	rjmp	.+42     	; 0x2e7c <vfprintf+0x1aa>
    2e52:	28 01       	movw	r4, r16
    2e54:	22 e0       	ldi	r18, 0x02	; 2
    2e56:	42 0e       	add	r4, r18
    2e58:	51 1c       	adc	r5, r1
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	a0 80       	ld	r10, Z
    2e5e:	b1 80       	ldd	r11, Z+1	; 0x01
    2e60:	36 fe       	sbrs	r3, 6
    2e62:	03 c0       	rjmp	.+6      	; 0x2e6a <vfprintf+0x198>
    2e64:	69 2d       	mov	r22, r9
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <vfprintf+0x19c>
    2e6a:	6f ef       	ldi	r22, 0xFF	; 255
    2e6c:	7f ef       	ldi	r23, 0xFF	; 255
    2e6e:	c5 01       	movw	r24, r10
    2e70:	2d d1       	rcall	.+602    	; 0x30cc <strnlen_P>
    2e72:	4c 01       	movw	r8, r24
    2e74:	f3 2d       	mov	r31, r3
    2e76:	f0 68       	ori	r31, 0x80	; 128
    2e78:	3f 2e       	mov	r3, r31
    2e7a:	82 01       	movw	r16, r4
    2e7c:	33 fc       	sbrc	r3, 3
    2e7e:	19 c0       	rjmp	.+50     	; 0x2eb2 <vfprintf+0x1e0>
    2e80:	82 2d       	mov	r24, r2
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	88 16       	cp	r8, r24
    2e86:	99 06       	cpc	r9, r25
    2e88:	a0 f4       	brcc	.+40     	; 0x2eb2 <vfprintf+0x1e0>
    2e8a:	b6 01       	movw	r22, r12
    2e8c:	80 e2       	ldi	r24, 0x20	; 32
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	33 d1       	rcall	.+614    	; 0x30f8 <fputc>
    2e92:	2a 94       	dec	r2
    2e94:	f5 cf       	rjmp	.-22     	; 0x2e80 <vfprintf+0x1ae>
    2e96:	f5 01       	movw	r30, r10
    2e98:	37 fc       	sbrc	r3, 7
    2e9a:	85 91       	lpm	r24, Z+
    2e9c:	37 fe       	sbrs	r3, 7
    2e9e:	81 91       	ld	r24, Z+
    2ea0:	5f 01       	movw	r10, r30
    2ea2:	b6 01       	movw	r22, r12
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	28 d1       	rcall	.+592    	; 0x30f8 <fputc>
    2ea8:	21 10       	cpse	r2, r1
    2eaa:	2a 94       	dec	r2
    2eac:	21 e0       	ldi	r18, 0x01	; 1
    2eae:	82 1a       	sub	r8, r18
    2eb0:	91 08       	sbc	r9, r1
    2eb2:	81 14       	cp	r8, r1
    2eb4:	91 04       	cpc	r9, r1
    2eb6:	79 f7       	brne	.-34     	; 0x2e96 <vfprintf+0x1c4>
    2eb8:	e1 c0       	rjmp	.+450    	; 0x307c <vfprintf+0x3aa>
    2eba:	84 36       	cpi	r24, 0x64	; 100
    2ebc:	11 f0       	breq	.+4      	; 0x2ec2 <vfprintf+0x1f0>
    2ebe:	89 36       	cpi	r24, 0x69	; 105
    2ec0:	39 f5       	brne	.+78     	; 0x2f10 <vfprintf+0x23e>
    2ec2:	f8 01       	movw	r30, r16
    2ec4:	37 fe       	sbrs	r3, 7
    2ec6:	07 c0       	rjmp	.+14     	; 0x2ed6 <vfprintf+0x204>
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	0c 5f       	subi	r16, 0xFC	; 252
    2ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed4:	08 c0       	rjmp	.+16     	; 0x2ee6 <vfprintf+0x214>
    2ed6:	60 81       	ld	r22, Z
    2ed8:	71 81       	ldd	r23, Z+1	; 0x01
    2eda:	07 2e       	mov	r0, r23
    2edc:	00 0c       	add	r0, r0
    2ede:	88 0b       	sbc	r24, r24
    2ee0:	99 0b       	sbc	r25, r25
    2ee2:	0e 5f       	subi	r16, 0xFE	; 254
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee6:	f3 2d       	mov	r31, r3
    2ee8:	ff 76       	andi	r31, 0x6F	; 111
    2eea:	3f 2e       	mov	r3, r31
    2eec:	97 ff       	sbrs	r25, 7
    2eee:	09 c0       	rjmp	.+18     	; 0x2f02 <vfprintf+0x230>
    2ef0:	90 95       	com	r25
    2ef2:	80 95       	com	r24
    2ef4:	70 95       	com	r23
    2ef6:	61 95       	neg	r22
    2ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    2efa:	8f 4f       	sbci	r24, 0xFF	; 255
    2efc:	9f 4f       	sbci	r25, 0xFF	; 255
    2efe:	f0 68       	ori	r31, 0x80	; 128
    2f00:	3f 2e       	mov	r3, r31
    2f02:	2a e0       	ldi	r18, 0x0A	; 10
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	a3 01       	movw	r20, r6
    2f08:	33 d1       	rcall	.+614    	; 0x3170 <__ultoa_invert>
    2f0a:	88 2e       	mov	r8, r24
    2f0c:	86 18       	sub	r8, r6
    2f0e:	44 c0       	rjmp	.+136    	; 0x2f98 <vfprintf+0x2c6>
    2f10:	85 37       	cpi	r24, 0x75	; 117
    2f12:	31 f4       	brne	.+12     	; 0x2f20 <vfprintf+0x24e>
    2f14:	23 2d       	mov	r18, r3
    2f16:	2f 7e       	andi	r18, 0xEF	; 239
    2f18:	b2 2e       	mov	r11, r18
    2f1a:	2a e0       	ldi	r18, 0x0A	; 10
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	25 c0       	rjmp	.+74     	; 0x2f6a <vfprintf+0x298>
    2f20:	93 2d       	mov	r25, r3
    2f22:	99 7f       	andi	r25, 0xF9	; 249
    2f24:	b9 2e       	mov	r11, r25
    2f26:	8f 36       	cpi	r24, 0x6F	; 111
    2f28:	c1 f0       	breq	.+48     	; 0x2f5a <vfprintf+0x288>
    2f2a:	18 f4       	brcc	.+6      	; 0x2f32 <vfprintf+0x260>
    2f2c:	88 35       	cpi	r24, 0x58	; 88
    2f2e:	79 f0       	breq	.+30     	; 0x2f4e <vfprintf+0x27c>
    2f30:	ae c0       	rjmp	.+348    	; 0x308e <vfprintf+0x3bc>
    2f32:	80 37       	cpi	r24, 0x70	; 112
    2f34:	19 f0       	breq	.+6      	; 0x2f3c <vfprintf+0x26a>
    2f36:	88 37       	cpi	r24, 0x78	; 120
    2f38:	21 f0       	breq	.+8      	; 0x2f42 <vfprintf+0x270>
    2f3a:	a9 c0       	rjmp	.+338    	; 0x308e <vfprintf+0x3bc>
    2f3c:	e9 2f       	mov	r30, r25
    2f3e:	e0 61       	ori	r30, 0x10	; 16
    2f40:	be 2e       	mov	r11, r30
    2f42:	b4 fe       	sbrs	r11, 4
    2f44:	0d c0       	rjmp	.+26     	; 0x2f60 <vfprintf+0x28e>
    2f46:	fb 2d       	mov	r31, r11
    2f48:	f4 60       	ori	r31, 0x04	; 4
    2f4a:	bf 2e       	mov	r11, r31
    2f4c:	09 c0       	rjmp	.+18     	; 0x2f60 <vfprintf+0x28e>
    2f4e:	34 fe       	sbrs	r3, 4
    2f50:	0a c0       	rjmp	.+20     	; 0x2f66 <vfprintf+0x294>
    2f52:	29 2f       	mov	r18, r25
    2f54:	26 60       	ori	r18, 0x06	; 6
    2f56:	b2 2e       	mov	r11, r18
    2f58:	06 c0       	rjmp	.+12     	; 0x2f66 <vfprintf+0x294>
    2f5a:	28 e0       	ldi	r18, 0x08	; 8
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	05 c0       	rjmp	.+10     	; 0x2f6a <vfprintf+0x298>
    2f60:	20 e1       	ldi	r18, 0x10	; 16
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <vfprintf+0x298>
    2f66:	20 e1       	ldi	r18, 0x10	; 16
    2f68:	32 e0       	ldi	r19, 0x02	; 2
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	b7 fe       	sbrs	r11, 7
    2f6e:	07 c0       	rjmp	.+14     	; 0x2f7e <vfprintf+0x2ac>
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	0c 5f       	subi	r16, 0xFC	; 252
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	06 c0       	rjmp	.+12     	; 0x2f8a <vfprintf+0x2b8>
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	0e 5f       	subi	r16, 0xFE	; 254
    2f88:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8a:	a3 01       	movw	r20, r6
    2f8c:	f1 d0       	rcall	.+482    	; 0x3170 <__ultoa_invert>
    2f8e:	88 2e       	mov	r8, r24
    2f90:	86 18       	sub	r8, r6
    2f92:	fb 2d       	mov	r31, r11
    2f94:	ff 77       	andi	r31, 0x7F	; 127
    2f96:	3f 2e       	mov	r3, r31
    2f98:	36 fe       	sbrs	r3, 6
    2f9a:	0d c0       	rjmp	.+26     	; 0x2fb6 <vfprintf+0x2e4>
    2f9c:	23 2d       	mov	r18, r3
    2f9e:	2e 7f       	andi	r18, 0xFE	; 254
    2fa0:	a2 2e       	mov	r10, r18
    2fa2:	89 14       	cp	r8, r9
    2fa4:	58 f4       	brcc	.+22     	; 0x2fbc <vfprintf+0x2ea>
    2fa6:	34 fe       	sbrs	r3, 4
    2fa8:	0b c0       	rjmp	.+22     	; 0x2fc0 <vfprintf+0x2ee>
    2faa:	32 fc       	sbrc	r3, 2
    2fac:	09 c0       	rjmp	.+18     	; 0x2fc0 <vfprintf+0x2ee>
    2fae:	83 2d       	mov	r24, r3
    2fb0:	8e 7e       	andi	r24, 0xEE	; 238
    2fb2:	a8 2e       	mov	r10, r24
    2fb4:	05 c0       	rjmp	.+10     	; 0x2fc0 <vfprintf+0x2ee>
    2fb6:	b8 2c       	mov	r11, r8
    2fb8:	a3 2c       	mov	r10, r3
    2fba:	03 c0       	rjmp	.+6      	; 0x2fc2 <vfprintf+0x2f0>
    2fbc:	b8 2c       	mov	r11, r8
    2fbe:	01 c0       	rjmp	.+2      	; 0x2fc2 <vfprintf+0x2f0>
    2fc0:	b9 2c       	mov	r11, r9
    2fc2:	a4 fe       	sbrs	r10, 4
    2fc4:	0f c0       	rjmp	.+30     	; 0x2fe4 <vfprintf+0x312>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e8 0d       	add	r30, r8
    2fca:	f1 1d       	adc	r31, r1
    2fcc:	80 81       	ld	r24, Z
    2fce:	80 33       	cpi	r24, 0x30	; 48
    2fd0:	21 f4       	brne	.+8      	; 0x2fda <vfprintf+0x308>
    2fd2:	9a 2d       	mov	r25, r10
    2fd4:	99 7e       	andi	r25, 0xE9	; 233
    2fd6:	a9 2e       	mov	r10, r25
    2fd8:	09 c0       	rjmp	.+18     	; 0x2fec <vfprintf+0x31a>
    2fda:	a2 fe       	sbrs	r10, 2
    2fdc:	06 c0       	rjmp	.+12     	; 0x2fea <vfprintf+0x318>
    2fde:	b3 94       	inc	r11
    2fe0:	b3 94       	inc	r11
    2fe2:	04 c0       	rjmp	.+8      	; 0x2fec <vfprintf+0x31a>
    2fe4:	8a 2d       	mov	r24, r10
    2fe6:	86 78       	andi	r24, 0x86	; 134
    2fe8:	09 f0       	breq	.+2      	; 0x2fec <vfprintf+0x31a>
    2fea:	b3 94       	inc	r11
    2fec:	a3 fc       	sbrc	r10, 3
    2fee:	10 c0       	rjmp	.+32     	; 0x3010 <vfprintf+0x33e>
    2ff0:	a0 fe       	sbrs	r10, 0
    2ff2:	06 c0       	rjmp	.+12     	; 0x3000 <vfprintf+0x32e>
    2ff4:	b2 14       	cp	r11, r2
    2ff6:	80 f4       	brcc	.+32     	; 0x3018 <vfprintf+0x346>
    2ff8:	28 0c       	add	r2, r8
    2ffa:	92 2c       	mov	r9, r2
    2ffc:	9b 18       	sub	r9, r11
    2ffe:	0d c0       	rjmp	.+26     	; 0x301a <vfprintf+0x348>
    3000:	b2 14       	cp	r11, r2
    3002:	58 f4       	brcc	.+22     	; 0x301a <vfprintf+0x348>
    3004:	b6 01       	movw	r22, r12
    3006:	80 e2       	ldi	r24, 0x20	; 32
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	76 d0       	rcall	.+236    	; 0x30f8 <fputc>
    300c:	b3 94       	inc	r11
    300e:	f8 cf       	rjmp	.-16     	; 0x3000 <vfprintf+0x32e>
    3010:	b2 14       	cp	r11, r2
    3012:	18 f4       	brcc	.+6      	; 0x301a <vfprintf+0x348>
    3014:	2b 18       	sub	r2, r11
    3016:	02 c0       	rjmp	.+4      	; 0x301c <vfprintf+0x34a>
    3018:	98 2c       	mov	r9, r8
    301a:	21 2c       	mov	r2, r1
    301c:	a4 fe       	sbrs	r10, 4
    301e:	0f c0       	rjmp	.+30     	; 0x303e <vfprintf+0x36c>
    3020:	b6 01       	movw	r22, r12
    3022:	80 e3       	ldi	r24, 0x30	; 48
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	68 d0       	rcall	.+208    	; 0x30f8 <fputc>
    3028:	a2 fe       	sbrs	r10, 2
    302a:	16 c0       	rjmp	.+44     	; 0x3058 <vfprintf+0x386>
    302c:	a1 fc       	sbrc	r10, 1
    302e:	03 c0       	rjmp	.+6      	; 0x3036 <vfprintf+0x364>
    3030:	88 e7       	ldi	r24, 0x78	; 120
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	02 c0       	rjmp	.+4      	; 0x303a <vfprintf+0x368>
    3036:	88 e5       	ldi	r24, 0x58	; 88
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	b6 01       	movw	r22, r12
    303c:	0c c0       	rjmp	.+24     	; 0x3056 <vfprintf+0x384>
    303e:	8a 2d       	mov	r24, r10
    3040:	86 78       	andi	r24, 0x86	; 134
    3042:	51 f0       	breq	.+20     	; 0x3058 <vfprintf+0x386>
    3044:	a1 fe       	sbrs	r10, 1
    3046:	02 c0       	rjmp	.+4      	; 0x304c <vfprintf+0x37a>
    3048:	8b e2       	ldi	r24, 0x2B	; 43
    304a:	01 c0       	rjmp	.+2      	; 0x304e <vfprintf+0x37c>
    304c:	80 e2       	ldi	r24, 0x20	; 32
    304e:	a7 fc       	sbrc	r10, 7
    3050:	8d e2       	ldi	r24, 0x2D	; 45
    3052:	b6 01       	movw	r22, r12
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	50 d0       	rcall	.+160    	; 0x30f8 <fputc>
    3058:	89 14       	cp	r8, r9
    305a:	30 f4       	brcc	.+12     	; 0x3068 <vfprintf+0x396>
    305c:	b6 01       	movw	r22, r12
    305e:	80 e3       	ldi	r24, 0x30	; 48
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	4a d0       	rcall	.+148    	; 0x30f8 <fputc>
    3064:	9a 94       	dec	r9
    3066:	f8 cf       	rjmp	.-16     	; 0x3058 <vfprintf+0x386>
    3068:	8a 94       	dec	r8
    306a:	f3 01       	movw	r30, r6
    306c:	e8 0d       	add	r30, r8
    306e:	f1 1d       	adc	r31, r1
    3070:	80 81       	ld	r24, Z
    3072:	b6 01       	movw	r22, r12
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	40 d0       	rcall	.+128    	; 0x30f8 <fputc>
    3078:	81 10       	cpse	r8, r1
    307a:	f6 cf       	rjmp	.-20     	; 0x3068 <vfprintf+0x396>
    307c:	22 20       	and	r2, r2
    307e:	09 f4       	brne	.+2      	; 0x3082 <vfprintf+0x3b0>
    3080:	4e ce       	rjmp	.-868    	; 0x2d1e <vfprintf+0x4c>
    3082:	b6 01       	movw	r22, r12
    3084:	80 e2       	ldi	r24, 0x20	; 32
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	37 d0       	rcall	.+110    	; 0x30f8 <fputc>
    308a:	2a 94       	dec	r2
    308c:	f7 cf       	rjmp	.-18     	; 0x307c <vfprintf+0x3aa>
    308e:	f6 01       	movw	r30, r12
    3090:	86 81       	ldd	r24, Z+6	; 0x06
    3092:	97 81       	ldd	r25, Z+7	; 0x07
    3094:	02 c0       	rjmp	.+4      	; 0x309a <vfprintf+0x3c8>
    3096:	8f ef       	ldi	r24, 0xFF	; 255
    3098:	9f ef       	ldi	r25, 0xFF	; 255
    309a:	2b 96       	adiw	r28, 0x0b	; 11
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	df 91       	pop	r29
    30a8:	cf 91       	pop	r28
    30aa:	1f 91       	pop	r17
    30ac:	0f 91       	pop	r16
    30ae:	ff 90       	pop	r15
    30b0:	ef 90       	pop	r14
    30b2:	df 90       	pop	r13
    30b4:	cf 90       	pop	r12
    30b6:	bf 90       	pop	r11
    30b8:	af 90       	pop	r10
    30ba:	9f 90       	pop	r9
    30bc:	8f 90       	pop	r8
    30be:	7f 90       	pop	r7
    30c0:	6f 90       	pop	r6
    30c2:	5f 90       	pop	r5
    30c4:	4f 90       	pop	r4
    30c6:	3f 90       	pop	r3
    30c8:	2f 90       	pop	r2
    30ca:	08 95       	ret

000030cc <strnlen_P>:
    30cc:	fc 01       	movw	r30, r24
    30ce:	05 90       	lpm	r0, Z+
    30d0:	61 50       	subi	r22, 0x01	; 1
    30d2:	70 40       	sbci	r23, 0x00	; 0
    30d4:	01 10       	cpse	r0, r1
    30d6:	d8 f7       	brcc	.-10     	; 0x30ce <strnlen_P+0x2>
    30d8:	80 95       	com	r24
    30da:	90 95       	com	r25
    30dc:	8e 0f       	add	r24, r30
    30de:	9f 1f       	adc	r25, r31
    30e0:	08 95       	ret

000030e2 <strnlen>:
    30e2:	fc 01       	movw	r30, r24
    30e4:	61 50       	subi	r22, 0x01	; 1
    30e6:	70 40       	sbci	r23, 0x00	; 0
    30e8:	01 90       	ld	r0, Z+
    30ea:	01 10       	cpse	r0, r1
    30ec:	d8 f7       	brcc	.-10     	; 0x30e4 <strnlen+0x2>
    30ee:	80 95       	com	r24
    30f0:	90 95       	com	r25
    30f2:	8e 0f       	add	r24, r30
    30f4:	9f 1f       	adc	r25, r31
    30f6:	08 95       	ret

000030f8 <fputc>:
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	fb 01       	movw	r30, r22
    3102:	23 81       	ldd	r18, Z+3	; 0x03
    3104:	21 fd       	sbrc	r18, 1
    3106:	03 c0       	rjmp	.+6      	; 0x310e <fputc+0x16>
    3108:	8f ef       	ldi	r24, 0xFF	; 255
    310a:	9f ef       	ldi	r25, 0xFF	; 255
    310c:	2c c0       	rjmp	.+88     	; 0x3166 <fputc+0x6e>
    310e:	22 ff       	sbrs	r18, 2
    3110:	16 c0       	rjmp	.+44     	; 0x313e <fputc+0x46>
    3112:	46 81       	ldd	r20, Z+6	; 0x06
    3114:	57 81       	ldd	r21, Z+7	; 0x07
    3116:	24 81       	ldd	r18, Z+4	; 0x04
    3118:	35 81       	ldd	r19, Z+5	; 0x05
    311a:	42 17       	cp	r20, r18
    311c:	53 07       	cpc	r21, r19
    311e:	44 f4       	brge	.+16     	; 0x3130 <fputc+0x38>
    3120:	a0 81       	ld	r26, Z
    3122:	b1 81       	ldd	r27, Z+1	; 0x01
    3124:	9d 01       	movw	r18, r26
    3126:	2f 5f       	subi	r18, 0xFF	; 255
    3128:	3f 4f       	sbci	r19, 0xFF	; 255
    312a:	31 83       	std	Z+1, r19	; 0x01
    312c:	20 83       	st	Z, r18
    312e:	8c 93       	st	X, r24
    3130:	26 81       	ldd	r18, Z+6	; 0x06
    3132:	37 81       	ldd	r19, Z+7	; 0x07
    3134:	2f 5f       	subi	r18, 0xFF	; 255
    3136:	3f 4f       	sbci	r19, 0xFF	; 255
    3138:	37 83       	std	Z+7, r19	; 0x07
    313a:	26 83       	std	Z+6, r18	; 0x06
    313c:	14 c0       	rjmp	.+40     	; 0x3166 <fputc+0x6e>
    313e:	8b 01       	movw	r16, r22
    3140:	ec 01       	movw	r28, r24
    3142:	fb 01       	movw	r30, r22
    3144:	00 84       	ldd	r0, Z+8	; 0x08
    3146:	f1 85       	ldd	r31, Z+9	; 0x09
    3148:	e0 2d       	mov	r30, r0
    314a:	09 95       	icall
    314c:	89 2b       	or	r24, r25
    314e:	e1 f6       	brne	.-72     	; 0x3108 <fputc+0x10>
    3150:	d8 01       	movw	r26, r16
    3152:	16 96       	adiw	r26, 0x06	; 6
    3154:	8d 91       	ld	r24, X+
    3156:	9c 91       	ld	r25, X
    3158:	17 97       	sbiw	r26, 0x07	; 7
    315a:	01 96       	adiw	r24, 0x01	; 1
    315c:	17 96       	adiw	r26, 0x07	; 7
    315e:	9c 93       	st	X, r25
    3160:	8e 93       	st	-X, r24
    3162:	16 97       	sbiw	r26, 0x06	; 6
    3164:	ce 01       	movw	r24, r28
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	1f 91       	pop	r17
    316c:	0f 91       	pop	r16
    316e:	08 95       	ret

00003170 <__ultoa_invert>:
    3170:	fa 01       	movw	r30, r20
    3172:	aa 27       	eor	r26, r26
    3174:	28 30       	cpi	r18, 0x08	; 8
    3176:	51 f1       	breq	.+84     	; 0x31cc <__ultoa_invert+0x5c>
    3178:	20 31       	cpi	r18, 0x10	; 16
    317a:	81 f1       	breq	.+96     	; 0x31dc <__ultoa_invert+0x6c>
    317c:	e8 94       	clt
    317e:	6f 93       	push	r22
    3180:	6e 7f       	andi	r22, 0xFE	; 254
    3182:	6e 5f       	subi	r22, 0xFE	; 254
    3184:	7f 4f       	sbci	r23, 0xFF	; 255
    3186:	8f 4f       	sbci	r24, 0xFF	; 255
    3188:	9f 4f       	sbci	r25, 0xFF	; 255
    318a:	af 4f       	sbci	r26, 0xFF	; 255
    318c:	b1 e0       	ldi	r27, 0x01	; 1
    318e:	3e d0       	rcall	.+124    	; 0x320c <__ultoa_invert+0x9c>
    3190:	b4 e0       	ldi	r27, 0x04	; 4
    3192:	3c d0       	rcall	.+120    	; 0x320c <__ultoa_invert+0x9c>
    3194:	67 0f       	add	r22, r23
    3196:	78 1f       	adc	r23, r24
    3198:	89 1f       	adc	r24, r25
    319a:	9a 1f       	adc	r25, r26
    319c:	a1 1d       	adc	r26, r1
    319e:	68 0f       	add	r22, r24
    31a0:	79 1f       	adc	r23, r25
    31a2:	8a 1f       	adc	r24, r26
    31a4:	91 1d       	adc	r25, r1
    31a6:	a1 1d       	adc	r26, r1
    31a8:	6a 0f       	add	r22, r26
    31aa:	71 1d       	adc	r23, r1
    31ac:	81 1d       	adc	r24, r1
    31ae:	91 1d       	adc	r25, r1
    31b0:	a1 1d       	adc	r26, r1
    31b2:	20 d0       	rcall	.+64     	; 0x31f4 <__ultoa_invert+0x84>
    31b4:	09 f4       	brne	.+2      	; 0x31b8 <__ultoa_invert+0x48>
    31b6:	68 94       	set
    31b8:	3f 91       	pop	r19
    31ba:	2a e0       	ldi	r18, 0x0A	; 10
    31bc:	26 9f       	mul	r18, r22
    31be:	11 24       	eor	r1, r1
    31c0:	30 19       	sub	r19, r0
    31c2:	30 5d       	subi	r19, 0xD0	; 208
    31c4:	31 93       	st	Z+, r19
    31c6:	de f6       	brtc	.-74     	; 0x317e <__ultoa_invert+0xe>
    31c8:	cf 01       	movw	r24, r30
    31ca:	08 95       	ret
    31cc:	46 2f       	mov	r20, r22
    31ce:	47 70       	andi	r20, 0x07	; 7
    31d0:	40 5d       	subi	r20, 0xD0	; 208
    31d2:	41 93       	st	Z+, r20
    31d4:	b3 e0       	ldi	r27, 0x03	; 3
    31d6:	0f d0       	rcall	.+30     	; 0x31f6 <__ultoa_invert+0x86>
    31d8:	c9 f7       	brne	.-14     	; 0x31cc <__ultoa_invert+0x5c>
    31da:	f6 cf       	rjmp	.-20     	; 0x31c8 <__ultoa_invert+0x58>
    31dc:	46 2f       	mov	r20, r22
    31de:	4f 70       	andi	r20, 0x0F	; 15
    31e0:	40 5d       	subi	r20, 0xD0	; 208
    31e2:	4a 33       	cpi	r20, 0x3A	; 58
    31e4:	18 f0       	brcs	.+6      	; 0x31ec <__ultoa_invert+0x7c>
    31e6:	49 5d       	subi	r20, 0xD9	; 217
    31e8:	31 fd       	sbrc	r19, 1
    31ea:	40 52       	subi	r20, 0x20	; 32
    31ec:	41 93       	st	Z+, r20
    31ee:	02 d0       	rcall	.+4      	; 0x31f4 <__ultoa_invert+0x84>
    31f0:	a9 f7       	brne	.-22     	; 0x31dc <__ultoa_invert+0x6c>
    31f2:	ea cf       	rjmp	.-44     	; 0x31c8 <__ultoa_invert+0x58>
    31f4:	b4 e0       	ldi	r27, 0x04	; 4
    31f6:	a6 95       	lsr	r26
    31f8:	97 95       	ror	r25
    31fa:	87 95       	ror	r24
    31fc:	77 95       	ror	r23
    31fe:	67 95       	ror	r22
    3200:	ba 95       	dec	r27
    3202:	c9 f7       	brne	.-14     	; 0x31f6 <__ultoa_invert+0x86>
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	61 05       	cpc	r22, r1
    3208:	71 05       	cpc	r23, r1
    320a:	08 95       	ret
    320c:	9b 01       	movw	r18, r22
    320e:	ac 01       	movw	r20, r24
    3210:	0a 2e       	mov	r0, r26
    3212:	06 94       	lsr	r0
    3214:	57 95       	ror	r21
    3216:	47 95       	ror	r20
    3218:	37 95       	ror	r19
    321a:	27 95       	ror	r18
    321c:	ba 95       	dec	r27
    321e:	c9 f7       	brne	.-14     	; 0x3212 <__ultoa_invert+0xa2>
    3220:	62 0f       	add	r22, r18
    3222:	73 1f       	adc	r23, r19
    3224:	84 1f       	adc	r24, r20
    3226:	95 1f       	adc	r25, r21
    3228:	a0 1d       	adc	r26, r0
    322a:	08 95       	ret

0000322c <_exit>:
    322c:	f8 94       	cli

0000322e <__stop_program>:
    322e:	ff cf       	rjmp	.-2      	; 0x322e <__stop_program>
