
IOT_Project_AVR_8_BIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800100  000031a0  00003234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000910  00800392  00800392  000034c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000034c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d3d  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001826  00000000  00000000  0000971d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003339  00000000  00000000  0000af43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f84  00000000  00000000  0000e27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001907  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a58  00000000  00000000  00010b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0001555f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__vector_5>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__vector_12>
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__vector_18>
      4c:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__vector_19>
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__vector_30>
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__vector_32>
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ea       	ldi	r30, 0xA0	; 160
      a0:	f1 e3       	ldi	r31, 0x31	; 49
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 39       	cpi	r26, 0x92	; 146
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	2c e0       	ldi	r18, 0x0C	; 12
      b4:	a2 e9       	ldi	r26, 0x92	; 146
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3a       	cpi	r26, 0xA2	; 162
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 5f 14 	call	0x28be	; 0x28be <main>
      c6:	0c 94 ce 18 	jmp	0x319c	; 0x319c <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <BlinkyTask>:
{
	sysTimerSubModuleInit(50, BlinkyTask); 
}
void BlinkyTask(void)
{
	LED_1_TOGGLE();	
      cc:	98 b3       	in	r25, 0x18	; 24
      ce:	80 e1       	ldi	r24, 0x10	; 16
      d0:	89 27       	eor	r24, r25
      d2:	88 bb       	out	0x18, r24	; 24
      d4:	08 95       	ret

000000d6 <Blinky_Init>:
#include "BlinkyTask.h"
#include "GPIO.h"
#include "UART_PERIPHERALs.h"
void Blinky_Init(void)
{
	sysTimerSubModuleInit(50, BlinkyTask); 
      d6:	46 e6       	ldi	r20, 0x66	; 102
      d8:	50 e0       	ldi	r21, 0x00	; 0
      da:	62 e3       	ldi	r22, 0x32	; 50
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <sysTimerSubModuleInit>
      e6:	08 95       	ret

000000e8 <__vector_5>:
#include "GPIO.h"
#include <avr/interrupt.h>

volatile uint16_t VALUE = 0; 
ISR(INT4_vect)
{
      e8:	1f 92       	push	r1
      ea:	0f 92       	push	r0
      ec:	0f b6       	in	r0, 0x3f	; 63
      ee:	0f 92       	push	r0
      f0:	11 24       	eor	r1, r1
      f2:	8f 93       	push	r24
      f4:	9f 93       	push	r25
	VALUE++; 
      f6:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
      fa:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
      fe:	01 96       	adiw	r24, 0x01	; 1
     100:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <__data_end+0x1>
     104:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <__data_end>
     108:	9f 91       	pop	r25
     10a:	8f 91       	pop	r24
     10c:	0f 90       	pop	r0
     10e:	0f be       	out	0x3f, r0	; 63
     110:	0f 90       	pop	r0
     112:	1f 90       	pop	r1
     114:	18 95       	reti

00000116 <External_Mem_Inter_Init>:

#include "externMemInterface.h"
#include <avr/io.h>
void External_Mem_Inter_Init(void)
{
	MCUCR |= (1 << SRE) | (1 << SRW10);
     116:	85 b7       	in	r24, 0x35	; 53
     118:	80 6c       	ori	r24, 0xC0	; 192
     11a:	85 bf       	out	0x35, r24	; 53
	XMCRA |= (1<<SRL2);
     11c:	ed e6       	ldi	r30, 0x6D	; 109
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	80 64       	ori	r24, 0x40	; 64
     124:	80 83       	st	Z, r24
     126:	08 95       	ret

00000128 <GPIO_Init>:
#include "GPIO.h"
#include <avr/io.h>
void GPIO_Init(void)
{
	//Configure the LEDS
	PORTB &= ~(( 1 << PB4) | (1 << PB5) | (1 << PB6) | (1 << PB7)); 
     128:	88 b3       	in	r24, 0x18	; 24
     12a:	8f 70       	andi	r24, 0x0F	; 15
     12c:	88 bb       	out	0x18, r24	; 24
	DDRB |= (( 1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7)); 
     12e:	87 b3       	in	r24, 0x17	; 23
     130:	80 6f       	ori	r24, 0xF0	; 240
     132:	87 bb       	out	0x17, r24	; 23
	
	//Initial the output pins for controlling buffer, SRAM and Ethernet chip. 
	//Turn them off
	PORTA &= ~((1 << PA7) | (1 << PA6) | (1 << PA5) | (1 << PA4) | (1 << PA3) | (1 << PA2) | (1 << PA1) | (1 << PA0)); 
     134:	8b b3       	in	r24, 0x1b	; 27
     136:	1b ba       	out	0x1b, r1	; 27
	DDRA |= (1 << DDA7) | (1 << DDA6) | (1 << DDA5) | (1 << DDA4) | (1 << DDA3) | (1 << DDA2) | (1 << DDA2) | (1 << DDA1); //Configure them as output
     138:	8a b3       	in	r24, 0x1a	; 26
     13a:	8e 6f       	ori	r24, 0xFE	; 254
     13c:	8a bb       	out	0x1a, r24	; 26
	
	//More pins for output 
	PORTC &= ~((1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4) | (1 << PC3) | (1 << PC2) | (1 << PC1) | (1 << PC0));
     13e:	85 b3       	in	r24, 0x15	; 21
     140:	15 ba       	out	0x15, r1	; 21
	DDRC |= (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0);
     142:	84 b3       	in	r24, 0x14	; 20
     144:	8f ef       	ldi	r24, 0xFF	; 255
     146:	84 bb       	out	0x14, r24	; 20
	
	//Configure the ALE PIN which is responsible for latching inputs to output in the D Flip Flop
	
	PORTG |= (1 << PG4) | (1 << PG3) | (1 << PG1) | (1 << PG0); //Start these pins as normally high as they are active low
     148:	e5 e6       	ldi	r30, 0x65	; 101
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	8b 61       	ori	r24, 0x1B	; 27
     150:	80 83       	st	Z, r24
	PORTG &= ~(1 << PG2); //Start this bit as normally low as it is active high
     152:	80 81       	ld	r24, Z
     154:	8b 7f       	andi	r24, 0xFB	; 251
     156:	80 83       	st	Z, r24
	
	//Configure the pins for PORT G as output
	DDRG |= (1 << DDG4) | (1 << DDG3) | (1 << DDG2) | (1 << DDG1) | (1 << DDG0);
     158:	e4 e6       	ldi	r30, 0x64	; 100
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	8f 61       	ori	r24, 0x1F	; 31
     160:	80 83       	st	Z, r24
	
	//Don't Configure PORTB as it has been configured above. PIN0 to PB3 will be configured under the SPI function
	
	//Configure PORTE
	PORTE |= 1 << PE4;
     162:	83 b1       	in	r24, 0x03	; 3
     164:	80 61       	ori	r24, 0x10	; 16
     166:	83 b9       	out	0x03, r24	; 3
	DDRE &= ~(1 << DDE4); 
     168:	82 b1       	in	r24, 0x02	; 2
     16a:	8f 7e       	andi	r24, 0xEF	; 239
     16c:	82 b9       	out	0x02, r24	; 2
	SFIOR &= ~(1 << PUD); 
     16e:	80 b5       	in	r24, 0x20	; 32
     170:	8b 7f       	andi	r24, 0xFB	; 251
     172:	80 bd       	out	0x20, r24	; 32
	
	//External Interrupt control byte
	EIMSK &= ~(1 << INT4); //Stop the interrupts for now. 
     174:	89 b7       	in	r24, 0x39	; 57
     176:	8f 7e       	andi	r24, 0xEF	; 239
     178:	89 bf       	out	0x39, r24	; 57
	
	EICRB &= ~(1 << ISC40); 
     17a:	8a b7       	in	r24, 0x3a	; 58
     17c:	8e 7f       	andi	r24, 0xFE	; 254
     17e:	8a bf       	out	0x3a, r24	; 58
	EICRB |= (1 << ISC41); 
     180:	8a b7       	in	r24, 0x3a	; 58
     182:	82 60       	ori	r24, 0x02	; 2
     184:	8a bf       	out	0x3a, r24	; 58
	
	//Enable the interrupts
	EIMSK |= 1 << INT4; 
     186:	89 b7       	in	r24, 0x39	; 57
     188:	80 61       	ori	r24, 0x10	; 16
     18a:	89 bf       	out	0x39, r24	; 57
     18c:	08 95       	ret

0000018e <sendto>:
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     18e:	2f 92       	push	r2
     190:	3f 92       	push	r3
     192:	4f 92       	push	r4
     194:	5f 92       	push	r5
     196:	6f 92       	push	r6
     198:	7f 92       	push	r7
     19a:	9f 92       	push	r9
     19c:	af 92       	push	r10
     19e:	bf 92       	push	r11
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <sendto+0x24>
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <sendto+0x26>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <sendto+0x28>
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	89 30       	cpi	r24, 0x09	; 9
     1bc:	08 f0       	brcs	.+2      	; 0x1c0 <sendto+0x32>
     1be:	99 c1       	rjmp	.+818    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     1c0:	78 01       	movw	r14, r16
     1c2:	89 01       	movw	r16, r18
     1c4:	1a 01       	movw	r2, r20
     1c6:	7e 83       	std	Y+6, r23	; 0x06
     1c8:	6d 83       	std	Y+5, r22	; 0x05
     1ca:	98 2e       	mov	r9, r24
     1cc:	c8 2e       	mov	r12, r24
     1ce:	d1 2c       	mov	r13, r1
     1d0:	56 01       	movw	r10, r12
     1d2:	88 e0       	ldi	r24, 0x08	; 8
     1d4:	a8 0e       	add	r10, r24
     1d6:	b1 1c       	adc	r11, r1
     1d8:	00 24       	eor	r0, r0
     1da:	b6 94       	lsr	r11
     1dc:	a7 94       	ror	r10
     1de:	07 94       	ror	r0
     1e0:	b6 94       	lsr	r11
     1e2:	a7 94       	ror	r10
     1e4:	07 94       	ror	r0
     1e6:	ba 2c       	mov	r11, r10
     1e8:	a0 2c       	mov	r10, r0
     1ea:	25 01       	movw	r4, r10
     1ec:	e0 e8       	ldi	r30, 0x80	; 128
     1ee:	5e 1a       	sub	r5, r30
     1f0:	61 2c       	mov	r6, r1
     1f2:	71 2c       	mov	r7, r1
     1f4:	c3 01       	movw	r24, r6
     1f6:	b2 01       	movw	r22, r4
     1f8:	50 d6       	rcall	.+3232   	; 0xe9a <WIZCHIP_READ>
     1fa:	8f 70       	andi	r24, 0x0F	; 15
     1fc:	99 27       	eor	r25, r25
     1fe:	02 97       	sbiw	r24, 0x02	; 2
     200:	03 97       	sbiw	r24, 0x03	; 3
     202:	08 f0       	brcs	.+2      	; 0x206 <sendto+0x78>
     204:	7a c1       	rjmp	.+756    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     206:	21 14       	cp	r2, r1
     208:	31 04       	cpc	r3, r1
     20a:	09 f4       	brne	.+2      	; 0x20e <sendto+0x80>
     20c:	7b c1       	rjmp	.+758    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     20e:	f8 01       	movw	r30, r16
     210:	80 81       	ld	r24, Z
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	ba 2f       	mov	r27, r26
     21a:	a9 2f       	mov	r26, r25
     21c:	98 2f       	mov	r25, r24
     21e:	88 27       	eor	r24, r24
     220:	21 81       	ldd	r18, Z+1	; 0x01
     222:	82 0f       	add	r24, r18
     224:	91 1d       	adc	r25, r1
     226:	a1 1d       	adc	r26, r1
     228:	b1 1d       	adc	r27, r1
     22a:	ba 2f       	mov	r27, r26
     22c:	a9 2f       	mov	r26, r25
     22e:	98 2f       	mov	r25, r24
     230:	88 27       	eor	r24, r24
     232:	22 81       	ldd	r18, Z+2	; 0x02
     234:	82 0f       	add	r24, r18
     236:	91 1d       	adc	r25, r1
     238:	a1 1d       	adc	r26, r1
     23a:	b1 1d       	adc	r27, r1
     23c:	ba 2f       	mov	r27, r26
     23e:	a9 2f       	mov	r26, r25
     240:	98 2f       	mov	r25, r24
     242:	88 27       	eor	r24, r24
     244:	23 81       	ldd	r18, Z+3	; 0x03
     246:	82 0f       	add	r24, r18
     248:	91 1d       	adc	r25, r1
     24a:	a1 1d       	adc	r26, r1
     24c:	b1 1d       	adc	r27, r1
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	ab 83       	std	Y+3, r26	; 0x03
     254:	bc 83       	std	Y+4, r27	; 0x04
     256:	89 2b       	or	r24, r25
     258:	8a 2b       	or	r24, r26
     25a:	8b 2b       	or	r24, r27
     25c:	29 f4       	brne	.+10     	; 0x268 <sendto+0xda>
     25e:	c3 01       	movw	r24, r6
     260:	b2 01       	movw	r22, r4
     262:	1b d6       	rcall	.+3126   	; 0xe9a <WIZCHIP_READ>
     264:	82 ff       	sbrs	r24, 2
     266:	53 c1       	rjmp	.+678    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     268:	e1 14       	cp	r14, r1
     26a:	f1 04       	cpc	r15, r1
     26c:	29 f4       	brne	.+10     	; 0x278 <sendto+0xea>
     26e:	c3 01       	movw	r24, r6
     270:	b2 01       	movw	r22, r4
     272:	13 d6       	rcall	.+3110   	; 0xe9a <WIZCHIP_READ>
     274:	82 ff       	sbrs	r24, 2
     276:	50 c1       	rjmp	.+672    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     278:	25 01       	movw	r4, r10
     27a:	f8 ef       	ldi	r31, 0xF8	; 248
     27c:	4f 1a       	sub	r4, r31
     27e:	ff e7       	ldi	r31, 0x7F	; 127
     280:	5f 0a       	sbc	r5, r31
     282:	61 2c       	mov	r6, r1
     284:	71 2c       	mov	r7, r1
     286:	c3 01       	movw	r24, r6
     288:	b2 01       	movw	r22, r4
     28a:	07 d6       	rcall	.+3086   	; 0xe9a <WIZCHIP_READ>
     28c:	82 34       	cpi	r24, 0x42	; 66
     28e:	29 f0       	breq	.+10     	; 0x29a <sendto+0x10c>
     290:	82 32       	cpi	r24, 0x22	; 34
     292:	19 f0       	breq	.+6      	; 0x29a <sendto+0x10c>
     294:	82 33       	cpi	r24, 0x32	; 50
     296:	09 f0       	breq	.+2      	; 0x29a <sendto+0x10c>
     298:	44 c1       	rjmp	.+648    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     29a:	f8 01       	movw	r30, r16
     29c:	40 81       	ld	r20, Z
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	54 2f       	mov	r21, r20
     2a2:	44 27       	eor	r20, r20
     2a4:	81 81       	ldd	r24, Z+1	; 0x01
     2a6:	48 0f       	add	r20, r24
     2a8:	51 1d       	adc	r21, r1
     2aa:	b5 01       	movw	r22, r10
     2ac:	6c 5e       	subi	r22, 0xEC	; 236
     2ae:	7f 47       	sbci	r23, 0x7F	; 127
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	bf d5       	rcall	.+2942   	; 0xe34 <WIZCHIP_WRITE>
     2b6:	f8 01       	movw	r30, r16
     2b8:	42 81       	ldd	r20, Z+2	; 0x02
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	54 2f       	mov	r21, r20
     2be:	44 27       	eor	r20, r20
     2c0:	83 81       	ldd	r24, Z+3	; 0x03
     2c2:	48 0f       	add	r20, r24
     2c4:	51 1d       	adc	r21, r1
     2c6:	b5 01       	movw	r22, r10
     2c8:	6a 5e       	subi	r22, 0xEA	; 234
     2ca:	7f 47       	sbci	r23, 0x7F	; 127
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	b1 d5       	rcall	.+2914   	; 0xe34 <WIZCHIP_WRITE>
     2d2:	b5 01       	movw	r22, r10
     2d4:	6e 5e       	subi	r22, 0xEE	; 238
     2d6:	7f 47       	sbci	r23, 0x7F	; 127
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	a7 01       	movw	r20, r14
     2de:	aa d5       	rcall	.+2900   	; 0xe34 <WIZCHIP_WRITE>
     2e0:	89 2d       	mov	r24, r9
     2e2:	4b d6       	rcall	.+3222   	; 0xf7a <getTMSR>
     2e4:	e8 2e       	mov	r14, r24
     2e6:	f1 2c       	mov	r15, r1
     2e8:	fe 2c       	mov	r15, r14
     2ea:	ee 24       	eor	r14, r14
     2ec:	ff 0c       	add	r15, r15
     2ee:	ff 0c       	add	r15, r15
     2f0:	e2 14       	cp	r14, r2
     2f2:	f3 04       	cpc	r15, r3
     2f4:	08 f0       	brcs	.+2      	; 0x2f8 <sendto+0x16a>
     2f6:	71 01       	movw	r14, r2
     2f8:	89 2d       	mov	r24, r9
     2fa:	7d d6       	rcall	.+3322   	; 0xff6 <getSn_TX_FSR>
     2fc:	8b 01       	movw	r16, r22
     2fe:	c3 01       	movw	r24, r6
     300:	b2 01       	movw	r22, r4
     302:	cb d5       	rcall	.+2966   	; 0xe9a <WIZCHIP_READ>
     304:	88 23       	and	r24, r24
     306:	09 f4       	brne	.+2      	; 0x30a <sendto+0x17c>
     308:	11 c1       	rjmp	.+546    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0c 2c       	mov	r0, r12
     310:	02 c0       	rjmp	.+4      	; 0x316 <sendto+0x188>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <sendto+0x184>
     31a:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <sock_io_mode>
     31e:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <sock_io_mode+0x1>
     322:	82 23       	and	r24, r18
     324:	93 23       	and	r25, r19
     326:	89 2b       	or	r24, r25
     328:	21 f0       	breq	.+8      	; 0x332 <sendto+0x1a4>
     32a:	0e 15       	cp	r16, r14
     32c:	1f 05       	cpc	r17, r15
     32e:	08 f4       	brcc	.+2      	; 0x332 <sendto+0x1a4>
     330:	02 c1       	rjmp	.+516    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     332:	0e 15       	cp	r16, r14
     334:	1f 05       	cpc	r17, r15
     336:	00 f3       	brcs	.-64     	; 0x2f8 <sendto+0x16a>
     338:	27 01       	movw	r4, r14
     33a:	61 2c       	mov	r6, r1
     33c:	71 2c       	mov	r7, r1
     33e:	a3 01       	movw	r20, r6
     340:	92 01       	movw	r18, r4
     342:	6d 81       	ldd	r22, Y+5	; 0x05
     344:	7e 81       	ldd	r23, Y+6	; 0x06
     346:	89 2d       	mov	r24, r9
     348:	02 d7       	rcall	.+3588   	; 0x114e <wiz_send_data>
     34a:	68 e1       	ldi	r22, 0x18	; 24
     34c:	70 e8       	ldi	r23, 0x80	; 128
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a3 d5       	rcall	.+2886   	; 0xe9a <WIZCHIP_READ>
     354:	99 83       	std	Y+1, r25	; 0x01
     356:	68 e1       	ldi	r22, 0x18	; 24
     358:	70 e8       	ldi	r23, 0x80	; 128
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	9d d5       	rcall	.+2874   	; 0xe9a <WIZCHIP_READ>
     360:	8a 83       	std	Y+2, r24	; 0x02
     362:	6a e1       	ldi	r22, 0x1A	; 26
     364:	70 e8       	ldi	r23, 0x80	; 128
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	97 d5       	rcall	.+2862   	; 0xe9a <WIZCHIP_READ>
     36c:	9b 83       	std	Y+3, r25	; 0x03
     36e:	6a e1       	ldi	r22, 0x1A	; 26
     370:	70 e8       	ldi	r23, 0x80	; 128
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	91 d5       	rcall	.+2850   	; 0xe9a <WIZCHIP_READ>
     378:	8c 83       	std	Y+4, r24	; 0x04
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	ab 81       	ldd	r26, Y+3	; 0x03
     380:	bc 81       	ldd	r27, Y+4	; 0x04
     382:	89 2b       	or	r24, r25
     384:	8a 2b       	or	r24, r26
     386:	8b 2b       	or	r24, r27
     388:	39 f5       	brne	.+78     	; 0x3d8 <sendto+0x24a>
     38a:	64 e1       	ldi	r22, 0x14	; 20
     38c:	70 e8       	ldi	r23, 0x80	; 128
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	83 d5       	rcall	.+2822   	; 0xe9a <WIZCHIP_READ>
     394:	99 83       	std	Y+1, r25	; 0x01
     396:	64 e1       	ldi	r22, 0x14	; 20
     398:	70 e8       	ldi	r23, 0x80	; 128
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	7d d5       	rcall	.+2810   	; 0xe9a <WIZCHIP_READ>
     3a0:	8a 83       	std	Y+2, r24	; 0x02
     3a2:	66 e1       	ldi	r22, 0x16	; 22
     3a4:	70 e8       	ldi	r23, 0x80	; 128
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	77 d5       	rcall	.+2798   	; 0xe9a <WIZCHIP_READ>
     3ac:	9b 83       	std	Y+3, r25	; 0x03
     3ae:	66 e1       	ldi	r22, 0x16	; 22
     3b0:	70 e8       	ldi	r23, 0x80	; 128
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	71 d5       	rcall	.+2786   	; 0xe9a <WIZCHIP_READ>
     3b8:	8c 83       	std	Y+4, r24	; 0x04
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	64 e1       	ldi	r22, 0x14	; 20
     3c0:	70 e8       	ldi	r23, 0x80	; 128
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	36 d5       	rcall	.+2668   	; 0xe34 <WIZCHIP_WRITE>
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	66 e1       	ldi	r22, 0x16	; 22
     3ce:	70 e8       	ldi	r23, 0x80	; 128
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2f d5       	rcall	.+2654   	; 0xe34 <WIZCHIP_WRITE>
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <sendto+0x252>
     3d8:	19 82       	std	Y+1, r1	; 0x01
     3da:	1a 82       	std	Y+2, r1	; 0x02
     3dc:	1b 82       	std	Y+3, r1	; 0x03
     3de:	1c 82       	std	Y+4, r1	; 0x04
     3e0:	83 01       	movw	r16, r6
     3e2:	22 27       	eor	r18, r18
     3e4:	33 27       	eor	r19, r19
     3e6:	c5 01       	movw	r24, r10
     3e8:	80 5e       	subi	r24, 0xE0	; 224
     3ea:	9f 47       	sbci	r25, 0x7F	; 127
     3ec:	bc 01       	movw	r22, r24
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	a8 01       	movw	r20, r16
     3f4:	1f d5       	rcall	.+2622   	; 0xe34 <WIZCHIP_WRITE>
     3f6:	b5 01       	movw	r22, r10
     3f8:	6e 5d       	subi	r22, 0xDE	; 222
     3fa:	7f 47       	sbci	r23, 0x7F	; 127
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	a7 01       	movw	r20, r14
     402:	18 d5       	rcall	.+2608   	; 0xe34 <WIZCHIP_WRITE>
     404:	25 01       	movw	r4, r10
     406:	fe ef       	ldi	r31, 0xFE	; 254
     408:	4f 1a       	sub	r4, r31
     40a:	ff e7       	ldi	r31, 0x7F	; 127
     40c:	5f 0a       	sbc	r5, r31
     40e:	61 2c       	mov	r6, r1
     410:	71 2c       	mov	r7, r1
     412:	40 e2       	ldi	r20, 0x20	; 32
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	c3 01       	movw	r24, r6
     418:	b2 01       	movw	r22, r4
     41a:	0c d5       	rcall	.+2584   	; 0xe34 <WIZCHIP_WRITE>
     41c:	c3 01       	movw	r24, r6
     41e:	b2 01       	movw	r22, r4
     420:	3c d5       	rcall	.+2680   	; 0xe9a <WIZCHIP_READ>
     422:	81 11       	cpse	r24, r1
     424:	fb cf       	rjmp	.-10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     426:	25 01       	movw	r4, r10
     428:	8a ef       	ldi	r24, 0xFA	; 250
     42a:	48 1a       	sub	r4, r24
     42c:	8f e7       	ldi	r24, 0x7F	; 127
     42e:	58 0a       	sbc	r5, r24
     430:	61 2c       	mov	r6, r1
     432:	71 2c       	mov	r7, r1
     434:	c3 01       	movw	r24, r6
     436:	b2 01       	movw	r22, r4
     438:	30 d5       	rcall	.+2656   	; 0xe9a <WIZCHIP_READ>
     43a:	9c 01       	movw	r18, r24
     43c:	33 27       	eor	r19, r19
     43e:	84 ff       	sbrs	r24, 4
     440:	0f c0       	rjmp	.+30     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     442:	40 e1       	ldi	r20, 0x10	; 16
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	c3 01       	movw	r24, r6
     448:	b2 01       	movw	r22, r4
     44a:	f4 d4       	rcall	.+2536   	; 0xe34 <WIZCHIP_WRITE>
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	9a 81       	ldd	r25, Y+2	; 0x02
     450:	ab 81       	ldd	r26, Y+3	; 0x03
     452:	bc 81       	ldd	r27, Y+4	; 0x04
     454:	89 2b       	or	r24, r25
     456:	8a 2b       	or	r24, r26
     458:	8b 2b       	or	r24, r27
     45a:	09 f4       	brne	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	46 c0       	rjmp	.+140    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     45e:	2d c0       	rjmp	.+90     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     460:	23 ff       	sbrs	r18, 3
     462:	e1 cf       	rjmp	.-62     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     464:	48 e0       	ldi	r20, 0x08	; 8
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	c3 01       	movw	r24, r6
     46a:	b2 01       	movw	r22, r4
     46c:	e3 d4       	rcall	.+2502   	; 0xe34 <WIZCHIP_WRITE>
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	ab 81       	ldd	r26, Y+3	; 0x03
     474:	bc 81       	ldd	r27, Y+4	; 0x04
     476:	89 2b       	or	r24, r25
     478:	8a 2b       	or	r24, r26
     47a:	8b 2b       	or	r24, r27
     47c:	09 f4       	brne	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	5f c0       	rjmp	.+190    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     480:	49 81       	ldd	r20, Y+1	; 0x01
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	54 2f       	mov	r21, r20
     486:	44 27       	eor	r20, r20
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	48 0f       	add	r20, r24
     48c:	51 1d       	adc	r21, r1
     48e:	64 e1       	ldi	r22, 0x14	; 20
     490:	70 e8       	ldi	r23, 0x80	; 128
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	ce d4       	rcall	.+2460   	; 0xe34 <WIZCHIP_WRITE>
     498:	4b 81       	ldd	r20, Y+3	; 0x03
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	54 2f       	mov	r21, r20
     49e:	44 27       	eor	r20, r20
     4a0:	8c 81       	ldd	r24, Y+4	; 0x04
     4a2:	48 0f       	add	r20, r24
     4a4:	51 1d       	adc	r21, r1
     4a6:	66 e1       	ldi	r22, 0x16	; 22
     4a8:	70 e8       	ldi	r23, 0x80	; 128
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	c2 d4       	rcall	.+2436   	; 0xe34 <WIZCHIP_WRITE>
     4b0:	63 ef       	ldi	r22, 0xF3	; 243
     4b2:	7f ef       	ldi	r23, 0xFF	; 255
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	9f ef       	ldi	r25, 0xFF	; 255
     4b8:	46 c0       	rjmp	.+140    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4ba:	49 81       	ldd	r20, Y+1	; 0x01
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	54 2f       	mov	r21, r20
     4c0:	44 27       	eor	r20, r20
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	48 0f       	add	r20, r24
     4c6:	51 1d       	adc	r21, r1
     4c8:	64 e1       	ldi	r22, 0x14	; 20
     4ca:	70 e8       	ldi	r23, 0x80	; 128
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	b1 d4       	rcall	.+2402   	; 0xe34 <WIZCHIP_WRITE>
     4d2:	4b 81       	ldd	r20, Y+3	; 0x03
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	54 2f       	mov	r21, r20
     4d8:	44 27       	eor	r20, r20
     4da:	8c 81       	ldd	r24, Y+4	; 0x04
     4dc:	48 0f       	add	r20, r24
     4de:	51 1d       	adc	r21, r1
     4e0:	66 e1       	ldi	r22, 0x16	; 22
     4e2:	70 e8       	ldi	r23, 0x80	; 128
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	a5 d4       	rcall	.+2378   	; 0xe34 <WIZCHIP_WRITE>
     4ea:	b7 01       	movw	r22, r14
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	2a c0       	rjmp	.+84     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4f2:	6f ef       	ldi	r22, 0xFF	; 255
     4f4:	7f ef       	ldi	r23, 0xFF	; 255
     4f6:	cb 01       	movw	r24, r22
     4f8:	26 c0       	rjmp	.+76     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4fa:	6b ef       	ldi	r22, 0xFB	; 251
     4fc:	7f ef       	ldi	r23, 0xFF	; 255
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
     502:	21 c0       	rjmp	.+66     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     504:	62 ef       	ldi	r22, 0xF2	; 242
     506:	7f ef       	ldi	r23, 0xFF	; 255
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	9f ef       	ldi	r25, 0xFF	; 255
     50c:	1c c0       	rjmp	.+56     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     50e:	64 ef       	ldi	r22, 0xF4	; 244
     510:	7f ef       	ldi	r23, 0xFF	; 255
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	17 c0       	rjmp	.+46     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     518:	65 ef       	ldi	r22, 0xF5	; 245
     51a:	7f ef       	ldi	r23, 0xFF	; 255
     51c:	8f ef       	ldi	r24, 0xFF	; 255
     51e:	9f ef       	ldi	r25, 0xFF	; 255
     520:	12 c0       	rjmp	.+36     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     522:	69 ef       	ldi	r22, 0xF9	; 249
     524:	7f ef       	ldi	r23, 0xFF	; 255
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	0d c0       	rjmp	.+26     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     52c:	6c ef       	ldi	r22, 0xFC	; 252
     52e:	7f ef       	ldi	r23, 0xFF	; 255
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	9f ef       	ldi	r25, 0xFF	; 255
     534:	08 c0       	rjmp	.+16     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	cb 01       	movw	r24, r22
     53c:	04 c0       	rjmp	.+8      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     53e:	63 ef       	ldi	r22, 0xF3	; 243
     540:	7f ef       	ldi	r23, 0xFF	; 255
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	9f ef       	ldi	r25, 0xFF	; 255
     546:	26 96       	adiw	r28, 0x06	; 6
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	7f 90       	pop	r7
     56a:	6f 90       	pop	r6
     56c:	5f 90       	pop	r5
     56e:	4f 90       	pop	r4
     570:	3f 90       	pop	r3
     572:	2f 90       	pop	r2
     574:	08 95       	ret

00000576 <close>:
     576:	2f 92       	push	r2
     578:	3f 92       	push	r3
     57a:	4f 92       	push	r4
     57c:	5f 92       	push	r5
     57e:	7f 92       	push	r7
     580:	8f 92       	push	r8
     582:	9f 92       	push	r9
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	00 d0       	rcall	.+0      	; 0x59a <close+0x24>
     59a:	00 d0       	rcall	.+0      	; 0x59c <close+0x26>
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	89 30       	cpi	r24, 0x09	; 9
     5a2:	08 f0       	brcs	.+2      	; 0x5a6 <close+0x30>
     5a4:	b4 c0       	rjmp	.+360    	; 0x70e <close+0x198>
     5a6:	78 2e       	mov	r7, r24
     5a8:	c8 2e       	mov	r12, r24
     5aa:	d1 2c       	mov	r13, r1
     5ac:	76 01       	movw	r14, r12
     5ae:	88 e0       	ldi	r24, 0x08	; 8
     5b0:	e8 0e       	add	r14, r24
     5b2:	f1 1c       	adc	r15, r1
     5b4:	00 24       	eor	r0, r0
     5b6:	f6 94       	lsr	r15
     5b8:	e7 94       	ror	r14
     5ba:	07 94       	ror	r0
     5bc:	f6 94       	lsr	r15
     5be:	e7 94       	ror	r14
     5c0:	07 94       	ror	r0
     5c2:	fe 2c       	mov	r15, r14
     5c4:	e0 2c       	mov	r14, r0
     5c6:	47 01       	movw	r8, r14
     5c8:	80 e8       	ldi	r24, 0x80	; 128
     5ca:	98 1a       	sub	r9, r24
     5cc:	a1 2c       	mov	r10, r1
     5ce:	b1 2c       	mov	r11, r1
     5d0:	c5 01       	movw	r24, r10
     5d2:	b4 01       	movw	r22, r8
     5d4:	62 d4       	rcall	.+2244   	; 0xe9a <WIZCHIP_READ>
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	99 27       	eor	r25, r25
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <close+0x6a>
     5de:	4c c0       	rjmp	.+152    	; 0x678 <close+0x102>
     5e0:	87 2d       	mov	r24, r7
     5e2:	09 d5       	rcall	.+2578   	; 0xff6 <getSn_TX_FSR>
     5e4:	1b 01       	movw	r2, r22
     5e6:	2c 01       	movw	r4, r24
     5e8:	87 2d       	mov	r24, r7
     5ea:	c7 d4       	rcall	.+2446   	; 0xf7a <getTMSR>
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	a0 e0       	ldi	r26, 0x00	; 0
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	07 2e       	mov	r0, r23
     5f4:	7a e0       	ldi	r23, 0x0A	; 10
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	aa 1f       	adc	r26, r26
     5fc:	bb 1f       	adc	r27, r27
     5fe:	7a 95       	dec	r23
     600:	d1 f7       	brne	.-12     	; 0x5f6 <close+0x80>
     602:	70 2d       	mov	r23, r0
     604:	28 16       	cp	r2, r24
     606:	39 06       	cpc	r3, r25
     608:	4a 06       	cpc	r4, r26
     60a:	5b 06       	cpc	r5, r27
     60c:	a9 f1       	breq	.+106    	; 0x678 <close+0x102>
     60e:	19 82       	std	Y+1, r1	; 0x01
     610:	1a 82       	std	Y+2, r1	; 0x02
     612:	1b 82       	std	Y+3, r1	; 0x03
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	8c 83       	std	Y+4, r24	; 0x04
     618:	42 e0       	ldi	r20, 0x02	; 2
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	c5 01       	movw	r24, r10
     61e:	b4 01       	movw	r22, r8
     620:	09 d4       	rcall	.+2066   	; 0xe34 <WIZCHIP_WRITE>
     622:	b7 01       	movw	r22, r14
     624:	66 5f       	subi	r22, 0xF6	; 246
     626:	7f 47       	sbci	r23, 0x7F	; 127
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e3       	ldi	r21, 0x30	; 48
     630:	01 d4       	rcall	.+2050   	; 0xe34 <WIZCHIP_WRITE>
     632:	47 01       	movw	r8, r14
     634:	8e ef       	ldi	r24, 0xFE	; 254
     636:	88 1a       	sub	r8, r24
     638:	8f e7       	ldi	r24, 0x7F	; 127
     63a:	98 0a       	sbc	r9, r24
     63c:	a1 2c       	mov	r10, r1
     63e:	b1 2c       	mov	r11, r1
     640:	41 e0       	ldi	r20, 0x01	; 1
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	c5 01       	movw	r24, r10
     646:	b4 01       	movw	r22, r8
     648:	f5 d3       	rcall	.+2026   	; 0xe34 <WIZCHIP_WRITE>
     64a:	c5 01       	movw	r24, r10
     64c:	b4 01       	movw	r22, r8
     64e:	25 d4       	rcall	.+2122   	; 0xe9a <WIZCHIP_READ>
     650:	81 11       	cpse	r24, r1
     652:	fb cf       	rjmp	.-10     	; 0x64a <close+0xd4>
     654:	b7 01       	movw	r22, r14
     656:	68 5f       	subi	r22, 0xF8	; 248
     658:	7f 47       	sbci	r23, 0x7F	; 127
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	1d d4       	rcall	.+2106   	; 0xe9a <WIZCHIP_READ>
     660:	82 32       	cpi	r24, 0x22	; 34
     662:	c1 f7       	brne	.-16     	; 0x654 <close+0xde>
     664:	00 e0       	ldi	r16, 0x00	; 0
     666:	10 e3       	ldi	r17, 0x30	; 48
     668:	9e 01       	movw	r18, r28
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	41 e0       	ldi	r20, 0x01	; 1
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	b9 01       	movw	r22, r18
     674:	87 2d       	mov	r24, r7
     676:	8b dd       	rcall	.-1258   	; 0x18e <sendto>
     678:	47 01       	movw	r8, r14
     67a:	8e ef       	ldi	r24, 0xFE	; 254
     67c:	88 1a       	sub	r8, r24
     67e:	8f e7       	ldi	r24, 0x7F	; 127
     680:	98 0a       	sbc	r9, r24
     682:	a1 2c       	mov	r10, r1
     684:	b1 2c       	mov	r11, r1
     686:	40 e1       	ldi	r20, 0x10	; 16
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	c5 01       	movw	r24, r10
     68c:	b4 01       	movw	r22, r8
     68e:	d2 d3       	rcall	.+1956   	; 0xe34 <WIZCHIP_WRITE>
     690:	c5 01       	movw	r24, r10
     692:	b4 01       	movw	r22, r8
     694:	02 d4       	rcall	.+2052   	; 0xe9a <WIZCHIP_READ>
     696:	81 11       	cpse	r24, r1
     698:	fb cf       	rjmp	.-10     	; 0x690 <close+0x11a>
     69a:	b7 01       	movw	r22, r14
     69c:	6a 5f       	subi	r22, 0xFA	; 250
     69e:	7f 47       	sbci	r23, 0x7F	; 127
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	4f ef       	ldi	r20, 0xFF	; 255
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	c5 d3       	rcall	.+1930   	; 0xe34 <WIZCHIP_WRITE>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <close+0x13e>
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	7a 94       	dec	r7
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <close+0x13a>
     6b8:	80 95       	com	r24
     6ba:	90 95       	com	r25
     6bc:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <sock_io_mode>
     6c0:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <sock_io_mode+0x1>
     6c4:	28 23       	and	r18, r24
     6c6:	39 23       	and	r19, r25
     6c8:	30 93 b7 03 	sts	0x03B7, r19	; 0x8003b7 <sock_io_mode+0x1>
     6cc:	20 93 b6 03 	sts	0x03B6, r18	; 0x8003b6 <sock_io_mode>
     6d0:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <sock_is_sending>
     6d4:	30 91 b5 03 	lds	r19, 0x03B5	; 0x8003b5 <sock_is_sending+0x1>
     6d8:	82 23       	and	r24, r18
     6da:	93 23       	and	r25, r19
     6dc:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <sock_is_sending+0x1>
     6e0:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <sock_is_sending>
     6e4:	f6 01       	movw	r30, r12
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	ec 55       	subi	r30, 0x5C	; 92
     6ec:	fc 4f       	sbci	r31, 0xFC	; 252
     6ee:	11 82       	std	Z+1, r1	; 0x01
     6f0:	10 82       	st	Z, r1
     6f2:	f6 01       	movw	r30, r12
     6f4:	e4 56       	subi	r30, 0x64	; 100
     6f6:	fc 4f       	sbci	r31, 0xFC	; 252
     6f8:	10 82       	st	Z, r1
     6fa:	b7 01       	movw	r22, r14
     6fc:	68 5f       	subi	r22, 0xF8	; 248
     6fe:	7f 47       	sbci	r23, 0x7F	; 127
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	ca d3       	rcall	.+1940   	; 0xe9a <WIZCHIP_READ>
     706:	81 11       	cpse	r24, r1
     708:	f8 cf       	rjmp	.-16     	; 0x6fa <close+0x184>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	01 c0       	rjmp	.+2      	; 0x710 <close+0x19a>
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	df 90       	pop	r13
     726:	cf 90       	pop	r12
     728:	bf 90       	pop	r11
     72a:	af 90       	pop	r10
     72c:	9f 90       	pop	r9
     72e:	8f 90       	pop	r8
     730:	7f 90       	pop	r7
     732:	5f 90       	pop	r5
     734:	4f 90       	pop	r4
     736:	3f 90       	pop	r3
     738:	2f 90       	pop	r2
     73a:	08 95       	ret

0000073c <socket>:
     73c:	4f 92       	push	r4
     73e:	5f 92       	push	r5
     740:	6f 92       	push	r6
     742:	7f 92       	push	r7
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	00 d0       	rcall	.+0      	; 0x75a <socket+0x1e>
     75a:	00 d0       	rcall	.+0      	; 0x75c <socket+0x20>
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	f8 2e       	mov	r15, r24
     762:	16 2f       	mov	r17, r22
     764:	3a 01       	movw	r6, r20
     766:	e2 2e       	mov	r14, r18
     768:	28 e0       	ldi	r18, 0x08	; 8
     76a:	28 17       	cp	r18, r24
     76c:	08 f4       	brcc	.+2      	; 0x770 <socket+0x34>
     76e:	c8 c0       	rjmp	.+400    	; 0x900 <socket+0x1c4>
     770:	61 30       	cpi	r22, 0x01	; 1
     772:	29 f0       	breq	.+10     	; 0x77e <socket+0x42>
     774:	08 f4       	brcc	.+2      	; 0x778 <socket+0x3c>
     776:	c6 c0       	rjmp	.+396    	; 0x904 <socket+0x1c8>
     778:	65 30       	cpi	r22, 0x05	; 5
     77a:	18 f1       	brcs	.+70     	; 0x7c2 <socket+0x86>
     77c:	c3 c0       	rjmp	.+390    	; 0x904 <socket+0x1c8>
     77e:	68 e1       	ldi	r22, 0x18	; 24
     780:	70 e8       	ldi	r23, 0x80	; 128
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	89 d3       	rcall	.+1810   	; 0xe9a <WIZCHIP_READ>
     788:	99 83       	std	Y+1, r25	; 0x01
     78a:	68 e1       	ldi	r22, 0x18	; 24
     78c:	70 e8       	ldi	r23, 0x80	; 128
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	83 d3       	rcall	.+1798   	; 0xe9a <WIZCHIP_READ>
     794:	8a 83       	std	Y+2, r24	; 0x02
     796:	6a e1       	ldi	r22, 0x1A	; 26
     798:	70 e8       	ldi	r23, 0x80	; 128
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	7d d3       	rcall	.+1786   	; 0xe9a <WIZCHIP_READ>
     7a0:	9b 83       	std	Y+3, r25	; 0x03
     7a2:	6a e1       	ldi	r22, 0x1A	; 26
     7a4:	70 e8       	ldi	r23, 0x80	; 128
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	77 d3       	rcall	.+1774   	; 0xe9a <WIZCHIP_READ>
     7ac:	8c 83       	std	Y+4, r24	; 0x04
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	ab 81       	ldd	r26, Y+3	; 0x03
     7b4:	bc 81       	ldd	r27, Y+4	; 0x04
     7b6:	89 2b       	or	r24, r25
     7b8:	8a 2b       	or	r24, r26
     7ba:	8b 2b       	or	r24, r27
     7bc:	11 f4       	brne	.+4      	; 0x7c2 <socket+0x86>
     7be:	8d ef       	ldi	r24, 0xFD	; 253
     7c0:	a8 c0       	rjmp	.+336    	; 0x912 <socket+0x1d6>
     7c2:	e2 fc       	sbrc	r14, 2
     7c4:	a1 c0       	rjmp	.+322    	; 0x908 <socket+0x1cc>
     7c6:	ee 20       	and	r14, r14
     7c8:	71 f0       	breq	.+28     	; 0x7e6 <socket+0xaa>
     7ca:	11 30       	cpi	r17, 0x01	; 1
     7cc:	19 f0       	breq	.+6      	; 0x7d4 <socket+0x98>
     7ce:	12 30       	cpi	r17, 0x02	; 2
     7d0:	29 f0       	breq	.+10     	; 0x7dc <socket+0xa0>
     7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <socket+0xaa>
     7d4:	8e 2d       	mov	r24, r14
     7d6:	83 72       	andi	r24, 0x23	; 35
     7d8:	31 f4       	brne	.+12     	; 0x7e6 <socket+0xaa>
     7da:	98 c0       	rjmp	.+304    	; 0x90c <socket+0x1d0>
     7dc:	e5 fe       	sbrs	r14, 5
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <socket+0xaa>
     7e0:	ee 20       	and	r14, r14
     7e2:	0c f0       	brlt	.+2      	; 0x7e6 <socket+0xaa>
     7e4:	95 c0       	rjmp	.+298    	; 0x910 <socket+0x1d4>
     7e6:	8f 2d       	mov	r24, r15
     7e8:	c6 de       	rcall	.-628    	; 0x576 <close>
     7ea:	8e 2d       	mov	r24, r14
     7ec:	80 7f       	andi	r24, 0xF0	; 240
     7ee:	81 2b       	or	r24, r17
     7f0:	4e 2d       	mov	r20, r14
     7f2:	42 70       	andi	r20, 0x02	; 2
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	56 95       	lsr	r21
     7f8:	54 2f       	mov	r21, r20
     7fa:	44 27       	eor	r20, r20
     7fc:	57 95       	ror	r21
     7fe:	47 95       	ror	r20
     800:	cf 2c       	mov	r12, r15
     802:	d1 2c       	mov	r13, r1
     804:	86 01       	movw	r16, r12
     806:	08 5f       	subi	r16, 0xF8	; 248
     808:	1f 4f       	sbci	r17, 0xFF	; 255
     80a:	00 24       	eor	r0, r0
     80c:	16 95       	lsr	r17
     80e:	07 95       	ror	r16
     810:	07 94       	ror	r0
     812:	16 95       	lsr	r17
     814:	07 95       	ror	r16
     816:	07 94       	ror	r0
     818:	10 2f       	mov	r17, r16
     81a:	00 2d       	mov	r16, r0
     81c:	b8 01       	movw	r22, r16
     81e:	70 58       	subi	r23, 0x80	; 128
     820:	48 2b       	or	r20, r24
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	06 d3       	rcall	.+1548   	; 0xe34 <WIZCHIP_WRITE>
     828:	61 14       	cp	r6, r1
     82a:	71 04       	cpc	r7, r1
     82c:	91 f4       	brne	.+36     	; 0x852 <socket+0x116>
     82e:	60 90 00 01 	lds	r6, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     832:	70 90 01 01 	lds	r7, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     836:	c3 01       	movw	r24, r6
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     83e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     842:	40 96       	adiw	r24, 0x10	; 16
     844:	31 f4       	brne	.+12     	; 0x852 <socket+0x116>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 ec       	ldi	r25, 0xC0	; 192
     84a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     84e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     852:	b8 01       	movw	r22, r16
     854:	66 5f       	subi	r22, 0xF6	; 246
     856:	7f 47       	sbci	r23, 0x7F	; 127
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a3 01       	movw	r20, r6
     85e:	ea d2       	rcall	.+1492   	; 0xe34 <WIZCHIP_WRITE>
     860:	28 01       	movw	r4, r16
     862:	8e ef       	ldi	r24, 0xFE	; 254
     864:	48 1a       	sub	r4, r24
     866:	8f e7       	ldi	r24, 0x7F	; 127
     868:	58 0a       	sbc	r5, r24
     86a:	61 2c       	mov	r6, r1
     86c:	71 2c       	mov	r7, r1
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	c3 01       	movw	r24, r6
     874:	b2 01       	movw	r22, r4
     876:	de d2       	rcall	.+1468   	; 0xe34 <WIZCHIP_WRITE>
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	0e d3       	rcall	.+1564   	; 0xe9a <WIZCHIP_READ>
     87e:	81 11       	cpse	r24, r1
     880:	fb cf       	rjmp	.-10     	; 0x878 <socket+0x13c>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0f 2c       	mov	r0, r15
     888:	02 c0       	rjmp	.+4      	; 0x88e <socket+0x152>
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	0a 94       	dec	r0
     890:	e2 f7       	brpl	.-8      	; 0x88a <socket+0x14e>
     892:	80 95       	com	r24
     894:	90 95       	com	r25
     896:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <sock_io_mode>
     89a:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <sock_io_mode+0x1>
     89e:	28 23       	and	r18, r24
     8a0:	39 23       	and	r19, r25
     8a2:	e0 fa       	bst	r14, 0
     8a4:	aa 24       	eor	r10, r10
     8a6:	a0 f8       	bld	r10, 0
     8a8:	b1 2c       	mov	r11, r1
     8aa:	0f 2c       	mov	r0, r15
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <socket+0x176>
     8ae:	aa 0c       	add	r10, r10
     8b0:	bb 1c       	adc	r11, r11
     8b2:	0a 94       	dec	r0
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <socket+0x172>
     8b6:	a2 2a       	or	r10, r18
     8b8:	b3 2a       	or	r11, r19
     8ba:	b0 92 b7 03 	sts	0x03B7, r11	; 0x8003b7 <sock_io_mode+0x1>
     8be:	a0 92 b6 03 	sts	0x03B6, r10	; 0x8003b6 <sock_io_mode>
     8c2:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <sock_is_sending>
     8c6:	30 91 b5 03 	lds	r19, 0x03B5	; 0x8003b5 <sock_is_sending+0x1>
     8ca:	82 23       	and	r24, r18
     8cc:	93 23       	and	r25, r19
     8ce:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <sock_is_sending+0x1>
     8d2:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <sock_is_sending>
     8d6:	f6 01       	movw	r30, r12
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	ec 55       	subi	r30, 0x5C	; 92
     8de:	fc 4f       	sbci	r31, 0xFC	; 252
     8e0:	11 82       	std	Z+1, r1	; 0x01
     8e2:	10 82       	st	Z, r1
     8e4:	f6 01       	movw	r30, r12
     8e6:	e4 56       	subi	r30, 0x64	; 100
     8e8:	fc 4f       	sbci	r31, 0xFC	; 252
     8ea:	10 82       	st	Z, r1
     8ec:	b8 01       	movw	r22, r16
     8ee:	68 5f       	subi	r22, 0xF8	; 248
     8f0:	7f 47       	sbci	r23, 0x7F	; 127
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	d1 d2       	rcall	.+1442   	; 0xe9a <WIZCHIP_READ>
     8f8:	88 23       	and	r24, r24
     8fa:	c1 f3       	breq	.-16     	; 0x8ec <socket+0x1b0>
     8fc:	8f 2d       	mov	r24, r15
     8fe:	09 c0       	rjmp	.+18     	; 0x912 <socket+0x1d6>
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	07 c0       	rjmp	.+14     	; 0x912 <socket+0x1d6>
     904:	8b ef       	ldi	r24, 0xFB	; 251
     906:	05 c0       	rjmp	.+10     	; 0x912 <socket+0x1d6>
     908:	8a ef       	ldi	r24, 0xFA	; 250
     90a:	03 c0       	rjmp	.+6      	; 0x912 <socket+0x1d6>
     90c:	8a ef       	ldi	r24, 0xFA	; 250
     90e:	01 c0       	rjmp	.+2      	; 0x912 <socket+0x1d6>
     910:	8a ef       	ldi	r24, 0xFA	; 250
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	bf 90       	pop	r11
     92c:	af 90       	pop	r10
     92e:	7f 90       	pop	r7
     930:	6f 90       	pop	r6
     932:	5f 90       	pop	r5
     934:	4f 90       	pop	r4
     936:	08 95       	ret

00000938 <recvfrom>:
}



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
     938:	2f 92       	push	r2
     93a:	3f 92       	push	r3
     93c:	4f 92       	push	r4
     93e:	5f 92       	push	r5
     940:	6f 92       	push	r6
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	64 97       	sbiw	r28, 0x14	; 20
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	58 2e       	mov	r5, r24
     96e:	3b 01       	movw	r6, r22
     970:	5a 01       	movw	r10, r20
     972:	3a 87       	std	Y+10, r19	; 0x0a
     974:	29 87       	std	Y+9, r18	; 0x09
     976:	1e 87       	std	Y+14, r17	; 0x0e
     978:	0d 87       	std	Y+13, r16	; 0x0d
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
     97a:	28 e0       	ldi	r18, 0x08	; 8
     97c:	28 17       	cp	r18, r24
     97e:	08 f4       	brcc	.+2      	; 0x982 <recvfrom+0x4a>
     980:	2a c2       	rjmp	.+1108   	; 0xdd6 <recvfrom+0x49e>
   //CHECK_SOCKMODE(Sn_MR_UDP);
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
     982:	80 91 00 80 	lds	r24, 0x8000	; 0x808000 <__bss_end+0x735e>
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	98 2f       	mov	r25, r24
     98a:	88 27       	eor	r24, r24
     98c:	20 91 01 80 	lds	r18, 0x8001	; 0x808001 <__bss_end+0x735f>
     990:	1c 01       	movw	r2, r24
     992:	22 0e       	add	r2, r18
     994:	31 1c       	adc	r3, r1
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
     996:	c5 2c       	mov	r12, r5
     998:	d1 2c       	mov	r13, r1
     99a:	76 01       	movw	r14, r12
     99c:	38 e0       	ldi	r19, 0x08	; 8
     99e:	e3 0e       	add	r14, r19
     9a0:	f1 1c       	adc	r15, r1
     9a2:	00 24       	eor	r0, r0
     9a4:	f6 94       	lsr	r15
     9a6:	e7 94       	ror	r14
     9a8:	07 94       	ror	r0
     9aa:	f6 94       	lsr	r15
     9ac:	e7 94       	ror	r14
     9ae:	07 94       	ror	r0
     9b0:	fe 2c       	mov	r15, r14
     9b2:	e0 2c       	mov	r14, r0
     9b4:	b7 01       	movw	r22, r14
     9b6:	70 58       	subi	r23, 0x80	; 128
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	6e d2       	rcall	.+1244   	; 0xe9a <WIZCHIP_READ>
     9be:	4c 01       	movw	r8, r24
     9c0:	8f 70       	andi	r24, 0x0F	; 15
     9c2:	99 27       	eor	r25, r25
     9c4:	02 97       	sbiw	r24, 0x02	; 2
     9c6:	03 97       	sbiw	r24, 0x03	; 3
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <recvfrom+0x94>
     9ca:	09 c2       	rjmp	.+1042   	; 0xdde <recvfrom+0x4a6>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
     9cc:	a1 14       	cp	r10, r1
     9ce:	b1 04       	cpc	r11, r1
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <recvfrom+0x9c>
     9d2:	0a c2       	rjmp	.+1044   	; 0xde8 <recvfrom+0x4b0>
   if(sock_remained_size[sn] == 0)
     9d4:	f6 01       	movw	r30, r12
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	ec 55       	subi	r30, 0x5C	; 92
     9dc:	fc 4f       	sbci	r31, 0xFC	; 252
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	89 2b       	or	r24, r25
     9e4:	21 f5       	brne	.+72     	; 0xa2e <recvfrom+0xf6>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
     9e6:	85 2d       	mov	r24, r5
     9e8:	50 d3       	rcall	.+1696   	; 0x108a <getSn_RX_RSR>
     9ea:	8b 01       	movw	r16, r22
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     9ec:	b7 01       	movw	r22, r14
     9ee:	68 5f       	subi	r22, 0xF8	; 248
     9f0:	7f 47       	sbci	r23, 0x7F	; 127
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	51 d2       	rcall	.+1186   	; 0xe9a <WIZCHIP_READ>
     9f8:	88 23       	and	r24, r24
     9fa:	09 f4       	brne	.+2      	; 0x9fe <recvfrom+0xc6>
     9fc:	fa c1       	rjmp	.+1012   	; 0xdf2 <recvfrom+0x4ba>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0c 2c       	mov	r0, r12
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <recvfrom+0xd2>
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	0a 94       	dec	r0
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <recvfrom+0xce>
     a0e:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <sock_io_mode>
     a12:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <sock_io_mode+0x1>
     a16:	82 23       	and	r24, r18
     a18:	93 23       	and	r25, r19
     a1a:	89 2b       	or	r24, r25
     a1c:	21 f0       	breq	.+8      	; 0xa26 <recvfrom+0xee>
     a1e:	01 15       	cp	r16, r1
     a20:	11 05       	cpc	r17, r1
     a22:	09 f4       	brne	.+2      	; 0xa26 <recvfrom+0xee>
     a24:	eb c1       	rjmp	.+982    	; 0xdfc <recvfrom+0x4c4>
         if(pack_len != 0) break;
     a26:	01 15       	cp	r16, r1
     a28:	11 05       	cpc	r17, r1
     a2a:	e9 f2       	breq	.-70     	; 0x9e6 <recvfrom+0xae>
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <recvfrom+0xfa>
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
     a2e:	00 e0       	ldi	r16, 0x00	; 0
     a30:	10 e0       	ldi	r17, 0x00	; 0
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
     a32:	47 e0       	ldi	r20, 0x07	; 7
     a34:	84 22       	and	r8, r20
     a36:	99 24       	eor	r9, r9
     a38:	53 e0       	ldi	r21, 0x03	; 3
     a3a:	85 16       	cp	r8, r21
     a3c:	91 04       	cpc	r9, r1
     a3e:	09 f4       	brne	.+2      	; 0xa42 <recvfrom+0x10a>
     a40:	30 c1       	rjmp	.+608    	; 0xca2 <recvfrom+0x36a>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	88 16       	cp	r8, r24
     a46:	91 04       	cpc	r9, r1
     a48:	09 f4       	brne	.+2      	; 0xa4c <recvfrom+0x114>
     a4a:	b6 c0       	rjmp	.+364    	; 0xbb8 <recvfrom+0x280>
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	89 16       	cp	r8, r25
     a50:	91 04       	cpc	r9, r1
     a52:	09 f0       	breq	.+2      	; 0xa56 <recvfrom+0x11e>
     a54:	80 c1       	rjmp	.+768    	; 0xd56 <recvfrom+0x41e>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
     a56:	f6 01       	movw	r30, r12
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ec 55       	subi	r30, 0x5C	; 92
     a5e:	fc 4f       	sbci	r31, 0xFC	; 252
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	89 2b       	or	r24, r25
     a66:	09 f0       	breq	.+2      	; 0xa6a <recvfrom+0x132>
     a68:	6f c0       	rjmp	.+222    	; 0xb48 <recvfrom+0x210>
	      {
   			wiz_recv_data(sn, head, 8);
     a6a:	28 e0       	ldi	r18, 0x08	; 8
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	be 01       	movw	r22, r28
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	85 2d       	mov	r24, r5
     a7a:	b2 d3       	rcall	.+1892   	; 0x11e0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
     a7c:	c7 01       	movw	r24, r14
     a7e:	8e 5f       	subi	r24, 0xFE	; 254
     a80:	9f 47       	sbci	r25, 0x7F	; 127
     a82:	9c 01       	movw	r18, r24
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	29 8b       	std	Y+17, r18	; 0x11
     a8a:	3a 8b       	std	Y+18, r19	; 0x12
     a8c:	4b 8b       	std	Y+19, r20	; 0x13
     a8e:	5c 8b       	std	Y+20, r21	; 0x14
     a90:	40 e4       	ldi	r20, 0x40	; 64
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	69 89       	ldd	r22, Y+17	; 0x11
     a96:	7a 89       	ldd	r23, Y+18	; 0x12
     a98:	8b 89       	ldd	r24, Y+19	; 0x13
     a9a:	9c 89       	ldd	r25, Y+20	; 0x14
     a9c:	cb d1       	rcall	.+918    	; 0xe34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
     a9e:	69 89       	ldd	r22, Y+17	; 0x11
     aa0:	7a 89       	ldd	r23, Y+18	; 0x12
     aa2:	8b 89       	ldd	r24, Y+19	; 0x13
     aa4:	9c 89       	ldd	r25, Y+20	; 0x14
     aa6:	f9 d1       	rcall	.+1010   	; 0xe9a <WIZCHIP_READ>
     aa8:	81 11       	cpse	r24, r1
     aaa:	f9 cf       	rjmp	.-14     	; 0xa9e <recvfrom+0x166>
     aac:	30 fe       	sbrs	r3, 0
   			// read peer's IP address, port number & packet length
   	   //A20150601 : For W5300
   		#if _WIZCHIP_ == 5300
   		   if(mr1 & MR_FS)
     aae:	24 c0       	rjmp	.+72     	; 0xaf8 <recvfrom+0x1c0>
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
   		   {
   		      addr[0] = head[1];
     ab2:	e9 85       	ldd	r30, Y+9	; 0x09
     ab4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ab6:	80 83       	st	Z, r24
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
   		      addr[1] = head[0];
     aba:	81 83       	std	Z+1, r24	; 0x01
     abc:	8c 81       	ldd	r24, Y+4	; 0x04
   		      addr[2] = head[3];
     abe:	82 83       	std	Z+2, r24	; 0x02
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
   		      addr[3] = head[2];
     ac2:	83 83       	std	Z+3, r24	; 0x03
     ac4:	8e 81       	ldd	r24, Y+6	; 0x06
   		      *port = head[5];
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	98 2f       	mov	r25, r24
   		      *port = (*port << 8) + head[4];
     aca:	88 27       	eor	r24, r24
     acc:	2d 81       	ldd	r18, Y+5	; 0x05
     ace:	82 0f       	add	r24, r18
     ad0:	91 1d       	adc	r25, r1
     ad2:	ed 85       	ldd	r30, Y+13	; 0x0d
     ad4:	fe 85       	ldd	r31, Y+14	; 0x0e
     ad6:	91 83       	std	Z+1, r25	; 0x01
     ad8:	80 83       	st	Z, r24
     ada:	88 85       	ldd	r24, Y+8	; 0x08
      			sock_remained_size[sn] = head[7];
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	f6 01       	movw	r30, r12
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ec 55       	subi	r30, 0x5C	; 92
     ae6:	fc 4f       	sbci	r31, 0xFC	; 252
     ae8:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
     aea:	88 27       	eor	r24, r24
     aec:	2f 81       	ldd	r18, Y+7	; 0x07
     aee:	82 0f       	add	r24, r18
     af0:	91 1d       	adc	r25, r1
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	80 83       	st	Z, r24
     af6:	23 c0       	rjmp	.+70     	; 0xb3e <recvfrom+0x206>
     af8:	89 81       	ldd	r24, Y+1	; 0x01
   		   }
            else
            {
         #endif
               addr[0] = head[0];
     afa:	e9 85       	ldd	r30, Y+9	; 0x09
     afc:	fa 85       	ldd	r31, Y+10	; 0x0a
     afe:	80 83       	st	Z, r24
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
      			addr[1] = head[1];
     b02:	81 83       	std	Z+1, r24	; 0x01
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
      			addr[2] = head[2];
     b06:	82 83       	std	Z+2, r24	; 0x02
     b08:	8c 81       	ldd	r24, Y+4	; 0x04
      			addr[3] = head[3];
     b0a:	83 83       	std	Z+3, r24	; 0x03
     b0c:	8d 81       	ldd	r24, Y+5	; 0x05
      			*port = head[4];
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	98 2f       	mov	r25, r24
      			*port = (*port << 8) + head[5];
     b12:	88 27       	eor	r24, r24
     b14:	2e 81       	ldd	r18, Y+6	; 0x06
     b16:	82 0f       	add	r24, r18
     b18:	91 1d       	adc	r25, r1
     b1a:	ed 85       	ldd	r30, Y+13	; 0x0d
     b1c:	fe 85       	ldd	r31, Y+14	; 0x0e
     b1e:	91 83       	std	Z+1, r25	; 0x01
     b20:	80 83       	st	Z, r24
     b22:	8f 81       	ldd	r24, Y+7	; 0x07
      			sock_remained_size[sn] = head[6];
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	f6 01       	movw	r30, r12
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	ec 55       	subi	r30, 0x5C	; 92
     b2e:	fc 4f       	sbci	r31, 0xFC	; 252
     b30:	98 2f       	mov	r25, r24
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
     b32:	88 27       	eor	r24, r24
     b34:	28 85       	ldd	r18, Y+8	; 0x08
     b36:	82 0f       	add	r24, r18
     b38:	91 1d       	adc	r25, r1
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
     b3e:	80 e8       	ldi	r24, 0x80	; 128
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
     b40:	f6 01       	movw	r30, r12
     b42:	e4 56       	subi	r30, 0x64	; 100
     b44:	fc 4f       	sbci	r31, 0xFC	; 252
     b46:	80 83       	st	Z, r24
     b48:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	ec 55       	subi	r30, 0x5C	; 92
     b50:	fc 4f       	sbci	r31, 0xFC	; 252
     b52:	80 80       	ld	r8, Z
     b54:	91 80       	ldd	r9, Z+1	; 0x01
     b56:	a8 14       	cp	r10, r8
     b58:	b9 04       	cpc	r11, r9
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <recvfrom+0x226>
     b5c:	45 01       	movw	r8, r10
     b5e:	f6 01       	movw	r30, r12
			else pack_len = sock_remained_size[sn];
			//A20150601 : For W5300
			len = pack_len;
			#if _WIZCHIP_ == 5300
			   if(sock_pack_info[sn] & PACK_FIFOBYTE)
     b60:	e4 56       	subi	r30, 0x64	; 100
     b62:	fc 4f       	sbci	r31, 0xFC	; 252
     b64:	80 81       	ld	r24, Z
     b66:	81 ff       	sbrs	r24, 1
     b68:	1e c0       	rjmp	.+60     	; 0xba6 <recvfrom+0x26e>
     b6a:	f6 01       	movw	r30, r12
			   {
			      *buf++ = sock_remained_byte[sn];
     b6c:	ec 56       	subi	r30, 0x6C	; 108
     b6e:	fc 4f       	sbci	r31, 0xFC	; 252
     b70:	80 81       	ld	r24, Z
     b72:	f3 01       	movw	r30, r6
     b74:	80 83       	st	Z, r24
     b76:	84 01       	movw	r16, r8
			      pack_len -= 1;
     b78:	01 50       	subi	r16, 0x01	; 1
     b7a:	11 09       	sbc	r17, r1
     b7c:	f6 01       	movw	r30, r12
			      sock_remained_size[sn] -= 1;
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	ec 55       	subi	r30, 0x5C	; 92
     b84:	fc 4f       	sbci	r31, 0xFC	; 252
     b86:	80 81       	ld	r24, Z
     b88:	91 81       	ldd	r25, Z+1	; 0x01
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	80 83       	st	Z, r24
     b90:	f6 01       	movw	r30, r12
			      sock_pack_info[sn] &= ~PACK_FIFOBYTE;
     b92:	e4 56       	subi	r30, 0x64	; 100
     b94:	fc 4f       	sbci	r31, 0xFC	; 252
     b96:	80 81       	ld	r24, Z
     b98:	8d 7f       	andi	r24, 0xFD	; 253
     b9a:	80 83       	st	Z, r24
     b9c:	93 01       	movw	r18, r6
			//A20150601 : For W5300
			len = pack_len;
			#if _WIZCHIP_ == 5300
			   if(sock_pack_info[sn] & PACK_FIFOBYTE)
			   {
			      *buf++ = sock_remained_byte[sn];
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	39 01       	movw	r6, r18
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <recvfrom+0x270>
     ba6:	84 01       	movw	r16, r8
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
     ba8:	98 01       	movw	r18, r16
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	b3 01       	movw	r22, r6
     bb0:	85 2d       	mov	r24, r5
     bb2:	16 d3       	rcall	.+1580   	; 0x11e0 <wiz_recv_data>
     bb4:	54 01       	movw	r10, r8
   			sock_pack_info[sn] = PACK_FIRST;
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
			else pack_len = sock_remained_size[sn];
			//A20150601 : For W5300
			len = pack_len;
     bb6:	db c0       	rjmp	.+438    	; 0xd6e <recvfrom+0x436>
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
     bb8:	f6 01       	movw	r30, r12
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	ec 55       	subi	r30, 0x5C	; 92
     bc0:	fc 4f       	sbci	r31, 0xFC	; 252
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	89 2b       	or	r24, r25
     bc8:	09 f0       	breq	.+2      	; 0xbcc <recvfrom+0x294>
     bca:	59 c0       	rjmp	.+178    	; 0xc7e <recvfrom+0x346>
     bcc:	22 e0       	ldi	r18, 0x02	; 2
	      {
   			wiz_recv_data(sn, head, 2);
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	be 01       	movw	r22, r28
     bd6:	6f 5f       	subi	r22, 0xFF	; 255
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	85 2d       	mov	r24, r5
     bdc:	01 d3       	rcall	.+1538   	; 0x11e0 <wiz_recv_data>
     bde:	c7 01       	movw	r24, r14
   			setSn_CR(sn,Sn_CR_RECV);
     be0:	8e 5f       	subi	r24, 0xFE	; 254
     be2:	9f 47       	sbci	r25, 0x7F	; 127
     be4:	9c 01       	movw	r18, r24
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	29 87       	std	Y+9, r18	; 0x09
     bec:	3a 87       	std	Y+10, r19	; 0x0a
     bee:	4b 87       	std	Y+11, r20	; 0x0b
     bf0:	5c 87       	std	Y+12, r21	; 0x0c
     bf2:	40 e4       	ldi	r20, 0x40	; 64
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	69 85       	ldd	r22, Y+9	; 0x09
     bf8:	7a 85       	ldd	r23, Y+10	; 0x0a
     bfa:	8b 85       	ldd	r24, Y+11	; 0x0b
     bfc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bfe:	1a d1       	rcall	.+564    	; 0xe34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
     c00:	69 85       	ldd	r22, Y+9	; 0x09
     c02:	7a 85       	ldd	r23, Y+10	; 0x0a
     c04:	8b 85       	ldd	r24, Y+11	; 0x0b
     c06:	9c 85       	ldd	r25, Y+12	; 0x0c
     c08:	48 d1       	rcall	.+656    	; 0xe9a <WIZCHIP_READ>
     c0a:	81 11       	cpse	r24, r1
     c0c:	f9 cf       	rjmp	.-14     	; 0xc00 <recvfrom+0x2c8>
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	f6 01       	movw	r30, r12
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	ec 55       	subi	r30, 0x5C	; 92
     c1a:	fc 4f       	sbci	r31, 0xFC	; 252
     c1c:	98 2f       	mov	r25, r24
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
     c1e:	88 27       	eor	r24, r24
     c20:	2a 81       	ldd	r18, Y+2	; 0x02
     c22:	82 0f       	add	r24, r18
     c24:	91 1d       	adc	r25, r1
     c26:	02 97       	sbiw	r24, 0x02	; 2
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	80 ff       	sbrs	r24, 0
   			#if _WIZCHIP_ == W5300
   			if(sock_remained_size[sn] & 0x01)
     c2e:	09 c0       	rjmp	.+18     	; 0xc42 <recvfrom+0x30a>
     c30:	03 97       	sbiw	r24, 0x03	; 3
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
     c32:	f6 01       	movw	r30, r12
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ec 55       	subi	r30, 0x5C	; 92
     c3a:	fc 4f       	sbci	r31, 0xFC	; 252
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	80 83       	st	Z, r24
     c40:	08 c0       	rjmp	.+16     	; 0xc52 <recvfrom+0x31a>
     c42:	f6 01       	movw	r30, r12
   			else
   				sock_remained_size[sn] -= 4;
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	ec 55       	subi	r30, 0x5C	; 92
     c4a:	fc 4f       	sbci	r31, 0xFC	; 252
     c4c:	04 97       	sbiw	r24, 0x04	; 4
     c4e:	91 83       	std	Z+1, r25	; 0x01
     c50:	80 83       	st	Z, r24
     c52:	f6 01       	movw	r30, r12
			#endif
   			if(sock_remained_size[sn] > 1514) 
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	ec 55       	subi	r30, 0x5C	; 92
     c5a:	fc 4f       	sbci	r31, 0xFC	; 252
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	8b 3e       	cpi	r24, 0xEB	; 235
     c62:	95 40       	sbci	r25, 0x05	; 5
     c64:	38 f0       	brcs	.+14     	; 0xc74 <recvfrom+0x33c>
   			{
   			   close(sn);
     c66:	85 2d       	mov	r24, r5
     c68:	86 dc       	rcall	.-1780   	; 0x576 <close>
     c6a:	67 e1       	ldi	r22, 0x17	; 23
   			   return SOCKFATAL_PACKLEN;
     c6c:	7c ef       	ldi	r23, 0xFC	; 252
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	c7 c0       	rjmp	.+398    	; 0xe02 <recvfrom+0x4ca>
     c74:	80 e8       	ldi	r24, 0x80	; 128
   			}
   			sock_pack_info[sn] = PACK_FIRST;
     c76:	f6 01       	movw	r30, r12
     c78:	e4 56       	subi	r30, 0x64	; 100
     c7a:	fc 4f       	sbci	r31, 0xFC	; 252
     c7c:	80 83       	st	Z, r24
     c7e:	f6 01       	movw	r30, r12
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ec 55       	subi	r30, 0x5C	; 92
     c86:	fc 4f       	sbci	r31, 0xFC	; 252
     c88:	00 81       	ld	r16, Z
     c8a:	11 81       	ldd	r17, Z+1	; 0x01
     c8c:	a0 16       	cp	r10, r16
     c8e:	b1 06       	cpc	r11, r17
     c90:	08 f4       	brcc	.+2      	; 0xc94 <recvfrom+0x35c>
     c92:	85 01       	movw	r16, r10
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
     c94:	98 01       	movw	r18, r16
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	b3 01       	movw	r22, r6
     c9c:	85 2d       	mov	r24, r5
     c9e:	a0 d2       	rcall	.+1344   	; 0x11e0 <wiz_recv_data>
     ca0:	66 c0       	rjmp	.+204    	; 0xd6e <recvfrom+0x436>
		   break;
     ca2:	f6 01       	movw	r30, r12
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
     ca4:	ee 0f       	add	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	ec 55       	subi	r30, 0x5C	; 92
     caa:	fc 4f       	sbci	r31, 0xFC	; 252
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	89 2b       	or	r24, r25
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <recvfrom+0x37e>
     cb4:	3e c0       	rjmp	.+124    	; 0xd32 <recvfrom+0x3fa>
		   {
   			wiz_recv_data(sn, head, 6);
     cb6:	26 e0       	ldi	r18, 0x06	; 6
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	be 01       	movw	r22, r28
     cc0:	6f 5f       	subi	r22, 0xFF	; 255
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	85 2d       	mov	r24, r5
     cc6:	8c d2       	rcall	.+1304   	; 0x11e0 <wiz_recv_data>
     cc8:	c7 01       	movw	r24, r14
   			setSn_CR(sn,Sn_CR_RECV);
     cca:	8e 5f       	subi	r24, 0xFE	; 254
     ccc:	9f 47       	sbci	r25, 0x7F	; 127
     cce:	9c 01       	movw	r18, r24
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	2d 87       	std	Y+13, r18	; 0x0d
     cd6:	3e 87       	std	Y+14, r19	; 0x0e
     cd8:	4f 87       	std	Y+15, r20	; 0x0f
     cda:	58 8b       	std	Y+16, r21	; 0x10
     cdc:	40 e4       	ldi	r20, 0x40	; 64
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	6d 85       	ldd	r22, Y+13	; 0x0d
     ce2:	7e 85       	ldd	r23, Y+14	; 0x0e
     ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce6:	98 89       	ldd	r25, Y+16	; 0x10
     ce8:	a5 d0       	rcall	.+330    	; 0xe34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
     cea:	6d 85       	ldd	r22, Y+13	; 0x0d
     cec:	7e 85       	ldd	r23, Y+14	; 0x0e
     cee:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf0:	98 89       	ldd	r25, Y+16	; 0x10
     cf2:	d3 d0       	rcall	.+422    	; 0xe9a <WIZCHIP_READ>
     cf4:	81 11       	cpse	r24, r1
     cf6:	f9 cf       	rjmp	.-14     	; 0xcea <recvfrom+0x3b2>
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
   			addr[0] = head[0];
     cfa:	e9 85       	ldd	r30, Y+9	; 0x09
     cfc:	fa 85       	ldd	r31, Y+10	; 0x0a
     cfe:	80 83       	st	Z, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
   			addr[1] = head[1];
     d02:	81 83       	std	Z+1, r24	; 0x01
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
   			addr[2] = head[2];
     d06:	82 83       	std	Z+2, r24	; 0x02
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
   			addr[3] = head[3];
     d0a:	83 83       	std	Z+3, r24	; 0x03
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
   			sock_remained_size[sn] = head[4];
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	f6 01       	movw	r30, r12
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	ec 55       	subi	r30, 0x5C	; 92
     d18:	fc 4f       	sbci	r31, 0xFC	; 252
     d1a:	98 2f       	mov	r25, r24
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
     d1c:	88 27       	eor	r24, r24
     d1e:	2e 81       	ldd	r18, Y+6	; 0x06
     d20:	82 0f       	add	r24, r18
     d22:	91 1d       	adc	r25, r1
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	80 83       	st	Z, r24
     d28:	80 e8       	ldi	r24, 0x80	; 128
   			sock_pack_info[sn] = PACK_FIRST;
     d2a:	f6 01       	movw	r30, r12
     d2c:	e4 56       	subi	r30, 0x64	; 100
     d2e:	fc 4f       	sbci	r31, 0xFC	; 252
     d30:	80 83       	st	Z, r24
     d32:	f6 01       	movw	r30, r12
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	ec 55       	subi	r30, 0x5C	; 92
     d3a:	fc 4f       	sbci	r31, 0xFC	; 252
     d3c:	00 81       	ld	r16, Z
     d3e:	11 81       	ldd	r17, Z+1	; 0x01
     d40:	a0 16       	cp	r10, r16
     d42:	b1 06       	cpc	r11, r17
     d44:	08 f4       	brcc	.+2      	; 0xd48 <recvfrom+0x410>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
     d46:	85 01       	movw	r16, r10
     d48:	98 01       	movw	r18, r16
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	b3 01       	movw	r22, r6
     d50:	85 2d       	mov	r24, r5
     d52:	46 d2       	rcall	.+1164   	; 0x11e0 <wiz_recv_data>
			break;
     d54:	0c c0       	rjmp	.+24     	; 0xd6e <recvfrom+0x436>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
     d56:	a8 01       	movw	r20, r16
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	85 2d       	mov	r24, r5
     d5e:	91 d2       	rcall	.+1314   	; 0x1282 <wiz_recv_ignore>
     d60:	f6 01       	movw	r30, r12
         sock_remained_size[sn] = pack_len;
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	ec 55       	subi	r30, 0x5C	; 92
     d68:	fc 4f       	sbci	r31, 0xFC	; 252
     d6a:	11 83       	std	Z+1, r17	; 0x01
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
     d6c:	00 83       	st	Z, r16
     d6e:	27 01       	movw	r4, r14
     d70:	fe ef       	ldi	r31, 0xFE	; 254
     d72:	4f 1a       	sub	r4, r31
     d74:	ff e7       	ldi	r31, 0x7F	; 127
     d76:	5f 0a       	sbc	r5, r31
     d78:	61 2c       	mov	r6, r1
     d7a:	71 2c       	mov	r7, r1
     d7c:	40 e4       	ldi	r20, 0x40	; 64
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	c3 01       	movw	r24, r6
     d82:	b2 01       	movw	r22, r4
     d84:	57 d0       	rcall	.+174    	; 0xe34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
     d86:	c3 01       	movw	r24, r6
     d88:	b2 01       	movw	r22, r4
     d8a:	87 d0       	rcall	.+270    	; 0xe9a <WIZCHIP_READ>
     d8c:	81 11       	cpse	r24, r1
     d8e:	fb cf       	rjmp	.-10     	; 0xd86 <recvfrom+0x44e>
     d90:	f6 01       	movw	r30, r12
	sock_remained_size[sn] -= pack_len;
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	ec 55       	subi	r30, 0x5C	; 92
     d98:	fc 4f       	sbci	r31, 0xFC	; 252
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	80 1b       	sub	r24, r16
     da0:	91 0b       	sbc	r25, r17
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
     da6:	89 2b       	or	r24, r25
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
     da8:	71 f0       	breq	.+28     	; 0xdc6 <recvfrom+0x48e>
     daa:	f6 01       	movw	r30, r12
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
     dac:	e4 56       	subi	r30, 0x64	; 100
     dae:	fc 4f       	sbci	r31, 0xFC	; 252
     db0:	80 81       	ld	r24, Z
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	80 83       	st	Z, r24
     db6:	00 ff       	sbrs	r16, 0
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
     db8:	0a c0       	rjmp	.+20     	; 0xdce <recvfrom+0x496>
     dba:	f6 01       	movw	r30, r12
     dbc:	e4 56       	subi	r30, 0x64	; 100
     dbe:	fc 4f       	sbci	r31, 0xFC	; 252
     dc0:	82 60       	ori	r24, 0x02	; 2
     dc2:	80 83       	st	Z, r24
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <recvfrom+0x496>
     dc6:	f6 01       	movw	r30, r12
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
     dc8:	e4 56       	subi	r30, 0x64	; 100
     dca:	fc 4f       	sbci	r31, 0xFC	; 252
     dcc:	10 82       	st	Z, r1
     dce:	b5 01       	movw	r22, r10
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	16 c0       	rjmp	.+44     	; 0xe02 <recvfrom+0x4ca>
     dd6:	6f ef       	ldi	r22, 0xFF	; 255
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
     dd8:	7f ef       	ldi	r23, 0xFF	; 255
     dda:	cb 01       	movw	r24, r22
     ddc:	12 c0       	rjmp	.+36     	; 0xe02 <recvfrom+0x4ca>
     dde:	6b ef       	ldi	r22, 0xFB	; 251
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
     de0:	7f ef       	ldi	r23, 0xFF	; 255
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	0d c0       	rjmp	.+26     	; 0xe02 <recvfrom+0x4ca>
     de8:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	08 c0       	rjmp	.+16     	; 0xe02 <recvfrom+0x4ca>
     df2:	6c ef       	ldi	r22, 0xFC	; 252
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
     df4:	7f ef       	ldi	r23, 0xFF	; 255
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	9f ef       	ldi	r25, 0xFF	; 255
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <recvfrom+0x4ca>
     dfc:	60 e0       	ldi	r22, 0x00	; 0
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	cb 01       	movw	r24, r22
     e02:	64 96       	adiw	r28, 0x14	; 20
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	df 90       	pop	r13
     e1c:	cf 90       	pop	r12
     e1e:	bf 90       	pop	r11
     e20:	af 90       	pop	r10
     e22:	9f 90       	pop	r9
     e24:	8f 90       	pop	r8
     e26:	7f 90       	pop	r7
     e28:	6f 90       	pop	r6
     e2a:	5f 90       	pop	r5
     e2c:	4f 90       	pop	r4
     e2e:	3f 90       	pop	r3
     e30:	2f 90       	pop	r2
     e32:	08 95       	ret

00000e34 <WIZCHIP_WRITE>:
     e34:	cf 92       	push	r12
uint8_t getRMSR(uint8_t sn)
{
   if(sn & 0x01)
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
}
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	6b 01       	movw	r12, r22
     e46:	7c 01       	movw	r14, r24
     e48:	14 2f       	mov	r17, r20
     e4a:	05 2f       	mov	r16, r21
     e4c:	c2 e0       	ldi	r28, 0x02	; 2
     e4e:	d1 e0       	ldi	r29, 0x01	; 1
     e50:	ea 85       	ldd	r30, Y+10	; 0x0a
     e52:	fb 85       	ldd	r31, Y+11	; 0x0b
     e54:	09 95       	icall
     e56:	ee 85       	ldd	r30, Y+14	; 0x0e
     e58:	ff 85       	ldd	r31, Y+15	; 0x0f
     e5a:	09 95       	icall
     e5c:	ec 89       	ldd	r30, Y+20	; 0x14
     e5e:	fd 89       	ldd	r31, Y+21	; 0x15
     e60:	40 2f       	mov	r20, r16
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	09 95       	icall
     e68:	ec 89       	ldd	r30, Y+20	; 0x14
     e6a:	fd 89       	ldd	r31, Y+21	; 0x15
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	6f 5f       	subi	r22, 0xFF	; 255
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	8f 4f       	sbci	r24, 0xFF	; 255
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	41 2f       	mov	r20, r17
     e7a:	09 95       	icall
     e7c:	e8 89       	ldd	r30, Y+16	; 0x10
     e7e:	f9 89       	ldd	r31, Y+17	; 0x11
     e80:	09 95       	icall
     e82:	ec 85       	ldd	r30, Y+12	; 0x0c
     e84:	fd 85       	ldd	r31, Y+13	; 0x0d
     e86:	09 95       	icall
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
     e98:	08 95       	ret

00000e9a <WIZCHIP_READ>:
     e9a:	cf 92       	push	r12
     e9c:	df 92       	push	r13
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	6b 01       	movw	r12, r22
     eac:	7c 01       	movw	r14, r24
     eae:	02 e0       	ldi	r16, 0x02	; 2
     eb0:	11 e0       	ldi	r17, 0x01	; 1
     eb2:	d8 01       	movw	r26, r16
     eb4:	1a 96       	adiw	r26, 0x0a	; 10
     eb6:	ed 91       	ld	r30, X+
     eb8:	fc 91       	ld	r31, X
     eba:	1b 97       	sbiw	r26, 0x0b	; 11
     ebc:	09 95       	icall
     ebe:	d8 01       	movw	r26, r16
     ec0:	1e 96       	adiw	r26, 0x0e	; 14
     ec2:	ed 91       	ld	r30, X+
     ec4:	fc 91       	ld	r31, X
     ec6:	1f 97       	sbiw	r26, 0x0f	; 15
     ec8:	09 95       	icall
     eca:	d8 01       	movw	r26, r16
     ecc:	52 96       	adiw	r26, 0x12	; 18
     ece:	ed 91       	ld	r30, X+
     ed0:	fc 91       	ld	r31, X
     ed2:	53 97       	sbiw	r26, 0x13	; 19
     ed4:	c7 01       	movw	r24, r14
     ed6:	b6 01       	movw	r22, r12
     ed8:	09 95       	icall
     eda:	c8 2f       	mov	r28, r24
     edc:	d0 e0       	ldi	r29, 0x00	; 0
     ede:	dc 2f       	mov	r29, r28
     ee0:	cc 27       	eor	r28, r28
     ee2:	d8 01       	movw	r26, r16
     ee4:	52 96       	adiw	r26, 0x12	; 18
     ee6:	ed 91       	ld	r30, X+
     ee8:	fc 91       	ld	r31, X
     eea:	53 97       	sbiw	r26, 0x13	; 19
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	6f 5f       	subi	r22, 0xFF	; 255
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	8f 4f       	sbci	r24, 0xFF	; 255
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	09 95       	icall
     efa:	c8 2b       	or	r28, r24
     efc:	d8 01       	movw	r26, r16
     efe:	50 96       	adiw	r26, 0x10	; 16
     f00:	ed 91       	ld	r30, X+
     f02:	fc 91       	ld	r31, X
     f04:	51 97       	sbiw	r26, 0x11	; 17
     f06:	09 95       	icall
     f08:	d8 01       	movw	r26, r16
     f0a:	1c 96       	adiw	r26, 0x0c	; 12
     f0c:	ed 91       	ld	r30, X+
     f0e:	fc 91       	ld	r31, X
     f10:	1d 97       	sbiw	r26, 0x0d	; 13
     f12:	09 95       	icall
     f14:	ce 01       	movw	r24, r28
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	df 90       	pop	r13
     f24:	cf 90       	pop	r12
     f26:	08 95       	ret

00000f28 <setTMSR>:
     f28:	cf 92       	push	r12
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	d8 2f       	mov	r29, r24
     f36:	c6 2f       	mov	r28, r22
     f38:	8e 7f       	andi	r24, 0xFE	; 254
     f3a:	c8 2e       	mov	r12, r24
     f3c:	d1 2c       	mov	r13, r1
     f3e:	80 ee       	ldi	r24, 0xE0	; 224
     f40:	c8 1a       	sub	r12, r24
     f42:	8f e7       	ldi	r24, 0x7F	; 127
     f44:	d8 0a       	sbc	r13, r24
     f46:	e1 2c       	mov	r14, r1
     f48:	f1 2c       	mov	r15, r1
     f4a:	c7 01       	movw	r24, r14
     f4c:	b6 01       	movw	r22, r12
     f4e:	a5 df       	rcall	.-182    	; 0xe9a <WIZCHIP_READ>
     f50:	d0 ff       	sbrs	r29, 0
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <setTMSR+0x34>
     f54:	ac 01       	movw	r20, r24
     f56:	44 27       	eor	r20, r20
     f58:	4c 2b       	or	r20, r28
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <setTMSR+0x3e>
     f5c:	4c 2f       	mov	r20, r28
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	54 2f       	mov	r21, r20
     f62:	44 27       	eor	r20, r20
     f64:	48 2b       	or	r20, r24
     f66:	c7 01       	movw	r24, r14
     f68:	b6 01       	movw	r22, r12
     f6a:	64 df       	rcall	.-312    	; 0xe34 <WIZCHIP_WRITE>
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <getTMSR>:
     f7a:	80 ff       	sbrs	r24, 0
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <getTMSR+0x16>
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	68 2f       	mov	r22, r24
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	60 5e       	subi	r22, 0xE0	; 224
     f86:	7f 47       	sbci	r23, 0x7F	; 127
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	86 cf       	rjmp	.-244    	; 0xe9a <WIZCHIP_READ>
     f8e:	08 95       	ret
     f90:	8e 7f       	andi	r24, 0xFE	; 254
     f92:	68 2f       	mov	r22, r24
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	60 5e       	subi	r22, 0xE0	; 224
     f98:	7f 47       	sbci	r23, 0x7F	; 127
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	7d df       	rcall	.-262    	; 0xe9a <WIZCHIP_READ>
     fa0:	89 2f       	mov	r24, r25
     fa2:	08 95       	ret

00000fa4 <setRMSR>:
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	d8 2f       	mov	r29, r24
     fb2:	c6 2f       	mov	r28, r22
     fb4:	8e 7f       	andi	r24, 0xFE	; 254
     fb6:	c8 2e       	mov	r12, r24
     fb8:	d1 2c       	mov	r13, r1
     fba:	88 ed       	ldi	r24, 0xD8	; 216
     fbc:	c8 1a       	sub	r12, r24
     fbe:	8f e7       	ldi	r24, 0x7F	; 127
     fc0:	d8 0a       	sbc	r13, r24
     fc2:	e1 2c       	mov	r14, r1
     fc4:	f1 2c       	mov	r15, r1
     fc6:	c7 01       	movw	r24, r14
     fc8:	b6 01       	movw	r22, r12
     fca:	67 df       	rcall	.-306    	; 0xe9a <WIZCHIP_READ>
     fcc:	d0 ff       	sbrs	r29, 0
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <setRMSR+0x34>
     fd0:	ac 01       	movw	r20, r24
     fd2:	44 27       	eor	r20, r20
     fd4:	4c 2b       	or	r20, r28
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <setRMSR+0x3e>
     fd8:	4c 2f       	mov	r20, r28
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	54 2f       	mov	r21, r20
     fde:	44 27       	eor	r20, r20
     fe0:	48 2b       	or	r20, r24
     fe2:	c7 01       	movw	r24, r14
     fe4:	b6 01       	movw	r22, r12
     fe6:	26 df       	rcall	.-436    	; 0xe34 <WIZCHIP_WRITE>
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	08 95       	ret

00000ff6 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	c8 2f       	mov	r28, r24
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
    100e:	c1 2c       	mov	r12, r1
    1010:	d1 2c       	mov	r13, r1
    1012:	76 01       	movw	r14, r12
    1014:	c3 94       	inc	r12
    1016:	02 c0       	rjmp	.+4      	; 0x101c <__DATA_REGION_LENGTH__+0x1c>
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
    1018:	6b 01       	movw	r12, r22
    101a:	7c 01       	movw	r14, r24
{
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
    101c:	0c 2f       	mov	r16, r28
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	08 5f       	subi	r16, 0xF8	; 248
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	00 24       	eor	r0, r0
    1026:	16 95       	lsr	r17
    1028:	07 95       	ror	r16
    102a:	07 94       	ror	r0
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	07 94       	ror	r0
    1032:	10 2f       	mov	r17, r16
    1034:	00 2d       	mov	r16, r0
    1036:	b8 01       	movw	r22, r16
    1038:	6c 5d       	subi	r22, 0xDC	; 220
    103a:	7f 47       	sbci	r23, 0x7F	; 127
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	2c df       	rcall	.-424    	; 0xe9a <WIZCHIP_READ>
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	5c 01       	movw	r10, r24
    1048:	99 24       	eor	r9, r9
    104a:	88 24       	eor	r8, r8
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
    104c:	b8 01       	movw	r22, r16
    104e:	6a 5d       	subi	r22, 0xDA	; 218
    1050:	7f 47       	sbci	r23, 0x7F	; 127
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	21 df       	rcall	.-446    	; 0xe9a <WIZCHIP_READ>
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e0       	ldi	r27, 0x00	; 0
{
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	68 29       	or	r22, r8
    1062:	79 29       	or	r23, r9
    1064:	8a 29       	or	r24, r10
    1066:	9b 29       	or	r25, r11
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
    1068:	c6 16       	cp	r12, r22
    106a:	d7 06       	cpc	r13, r23
    106c:	e8 06       	cpc	r14, r24
    106e:	f9 06       	cpc	r15, r25
    1070:	99 f6       	brne	.-90     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
   }                                                                       
   return free_tx_size;                                                    
}                                                                          
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	9f 90       	pop	r9
    1086:	8f 90       	pop	r8
    1088:	08 95       	ret

0000108a <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
    108a:	7f 92       	push	r7
    108c:	8f 92       	push	r8
    108e:	9f 92       	push	r9
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	78 2e       	mov	r7, r24
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
    10a6:	c1 2c       	mov	r12, r1
    10a8:	d1 2c       	mov	r13, r1
    10aa:	76 01       	movw	r14, r12
    10ac:	c3 94       	inc	r12
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <getSn_RX_RSR+0x2a>
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
      if(received_rx_size == received_rx_size1) break;                                                                         
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
    10b0:	6c 01       	movw	r12, r24
    10b2:	7d 01       	movw	r14, r26
{
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
    10b4:	07 2d       	mov	r16, r7
    10b6:	10 e0       	ldi	r17, 0x00	; 0
    10b8:	e8 01       	movw	r28, r16
    10ba:	28 96       	adiw	r28, 0x08	; 8
    10bc:	00 24       	eor	r0, r0
    10be:	d6 95       	lsr	r29
    10c0:	c7 95       	ror	r28
    10c2:	07 94       	ror	r0
    10c4:	d6 95       	lsr	r29
    10c6:	c7 95       	ror	r28
    10c8:	07 94       	ror	r0
    10ca:	dc 2f       	mov	r29, r28
    10cc:	c0 2d       	mov	r28, r0
    10ce:	be 01       	movw	r22, r28
    10d0:	68 5d       	subi	r22, 0xD8	; 216
    10d2:	7f 47       	sbci	r23, 0x7F	; 127
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	e0 de       	rcall	.-576    	; 0xe9a <WIZCHIP_READ>
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	5c 01       	movw	r10, r24
    10e0:	99 24       	eor	r9, r9
    10e2:	88 24       	eor	r8, r8
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
    10e4:	c6 5d       	subi	r28, 0xD6	; 214
    10e6:	df 47       	sbci	r29, 0x7F	; 127
    10e8:	be 01       	movw	r22, r28
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	d5 de       	rcall	.-598    	; 0xe9a <WIZCHIP_READ>
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
{
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
    10f4:	88 29       	or	r24, r8
    10f6:	99 29       	or	r25, r9
    10f8:	aa 29       	or	r26, r10
    10fa:	bb 29       	or	r27, r11
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
      if(received_rx_size == received_rx_size1) break;                                                                         
    10fc:	c8 16       	cp	r12, r24
    10fe:	d9 06       	cpc	r13, r25
    1100:	ea 06       	cpc	r14, r26
    1102:	fb 06       	cpc	r15, r27
    1104:	a9 f6       	brne	.-86     	; 0x10b0 <getSn_RX_RSR+0x26>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
    1106:	f8 01       	movw	r30, r16
    1108:	e4 56       	subi	r30, 0x64	; 100
    110a:	fc 4f       	sbci	r31, 0xFC	; 252
    110c:	20 81       	ld	r18, Z
    110e:	21 ff       	sbrs	r18, 1
    1110:	05 c0       	rjmp	.+10     	; 0x111c <__stack+0x1d>
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <__stack+0x23>
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	ba 01       	movw	r22, r20
    1122:	8a 01       	movw	r16, r20
    1124:	9b 01       	movw	r18, r22
    1126:	08 0f       	add	r16, r24
    1128:	19 1f       	adc	r17, r25
    112a:	2a 1f       	adc	r18, r26
    112c:	3b 1f       	adc	r19, r27
    112e:	c9 01       	movw	r24, r18
    1130:	b8 01       	movw	r22, r16
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	bf 90       	pop	r11
    1144:	af 90       	pop	r10
    1146:	9f 90       	pop	r9
    1148:	8f 90       	pop	r8
    114a:	7f 90       	pop	r7
    114c:	08 95       	ret

0000114e <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
   uint32_t i = 0;
   if(len == 0)  return;
    1164:	21 15       	cp	r18, r1
    1166:	31 05       	cpc	r19, r1
    1168:	41 05       	cpc	r20, r1
    116a:	51 05       	cpc	r21, r1
    116c:	69 f1       	breq	.+90     	; 0x11c8 <wiz_send_data+0x7a>
    116e:	49 01       	movw	r8, r18
    1170:	5a 01       	movw	r10, r20
    1172:	eb 01       	movw	r28, r22
    1174:	18 2f       	mov	r17, r24
    1176:	c1 2c       	mov	r12, r1
    1178:	d1 2c       	mov	r13, r1
    117a:	76 01       	movw	r14, r12
    117c:	20 c0       	rjmp	.+64     	; 0x11be <wiz_send_data+0x70>
   
   for(i = 0; i < len ; i += 2)
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
    117e:	fe 01       	movw	r30, r28
    1180:	ec 0d       	add	r30, r12
    1182:	fd 1d       	adc	r31, r13
    1184:	40 81       	ld	r20, Z
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	54 2f       	mov	r21, r20
    118a:	44 27       	eor	r20, r20
    118c:	81 81       	ldd	r24, Z+1	; 0x01
    118e:	61 2f       	mov	r22, r17
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	68 5f       	subi	r22, 0xF8	; 248
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	00 24       	eor	r0, r0
    1198:	76 95       	lsr	r23
    119a:	67 95       	ror	r22
    119c:	07 94       	ror	r0
    119e:	76 95       	lsr	r23
    11a0:	67 95       	ror	r22
    11a2:	07 94       	ror	r0
    11a4:	76 2f       	mov	r23, r22
    11a6:	60 2d       	mov	r22, r0
    11a8:	62 5d       	subi	r22, 0xD2	; 210
    11aa:	7f 47       	sbci	r23, 0x7F	; 127
    11ac:	48 2b       	or	r20, r24
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	40 de       	rcall	.-896    	; 0xe34 <WIZCHIP_WRITE>
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint32_t i = 0;
   if(len == 0)  return;
   
   for(i = 0; i < len ; i += 2)
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	c8 0e       	add	r12, r24
    11b8:	d1 1c       	adc	r13, r1
    11ba:	e1 1c       	adc	r14, r1
    11bc:	f1 1c       	adc	r15, r1
    11be:	c8 14       	cp	r12, r8
    11c0:	d9 04       	cpc	r13, r9
    11c2:	ea 04       	cpc	r14, r10
    11c4:	fb 04       	cpc	r15, r11
    11c6:	d8 f2       	brcs	.-74     	; 0x117e <wiz_send_data+0x30>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	df 90       	pop	r13
    11d4:	cf 90       	pop	r12
    11d6:	bf 90       	pop	r11
    11d8:	af 90       	pop	r10
    11da:	9f 90       	pop	r9
    11dc:	8f 90       	pop	r8
    11de:	08 95       	ret

000011e0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
    11e0:	8f 92       	push	r8
    11e2:	9f 92       	push	r9
    11e4:	af 92       	push	r10
    11e6:	bf 92       	push	r11
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
    11f6:	21 15       	cp	r18, r1
    11f8:	31 05       	cpc	r19, r1
    11fa:	41 05       	cpc	r20, r1
    11fc:	51 05       	cpc	r21, r1
    11fe:	a9 f1       	breq	.+106    	; 0x126a <wiz_recv_data+0x8a>
    1200:	49 01       	movw	r8, r18
    1202:	5a 01       	movw	r10, r20
    1204:	eb 01       	movw	r28, r22
    1206:	18 2f       	mov	r17, r24
    1208:	c1 2c       	mov	r12, r1
    120a:	d1 2c       	mov	r13, r1
    120c:	76 01       	movw	r14, r12
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	22 c0       	rjmp	.+68     	; 0x1256 <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
   {
      if((i & 0x01)==0)
    1212:	c0 fc       	sbrc	r12, 0
    1214:	17 c0       	rjmp	.+46     	; 0x1244 <wiz_recv_data+0x64>
      {
         rd = getSn_RX_FIFOR(sn);
    1216:	61 2f       	mov	r22, r17
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	68 5f       	subi	r22, 0xF8	; 248
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	00 24       	eor	r0, r0
    1220:	76 95       	lsr	r23
    1222:	67 95       	ror	r22
    1224:	07 94       	ror	r0
    1226:	76 95       	lsr	r23
    1228:	67 95       	ror	r22
    122a:	07 94       	ror	r0
    122c:	76 2f       	mov	r23, r22
    122e:	60 2d       	mov	r22, r0
    1230:	60 5d       	subi	r22, 0xD0	; 208
    1232:	7f 47       	sbci	r23, 0x7F	; 127
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	30 de       	rcall	.-928    	; 0xe9a <WIZCHIP_READ>
         wizdata[i]   = (uint8_t)(rd >> 8);
    123a:	fe 01       	movw	r30, r28
    123c:	ec 0d       	add	r30, r12
    123e:	fd 1d       	adc	r31, r13
    1240:	90 83       	st	Z, r25
    1242:	04 c0       	rjmp	.+8      	; 0x124c <wiz_recv_data+0x6c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
    1244:	fe 01       	movw	r30, r28
    1246:	ec 0d       	add	r30, r12
    1248:	fd 1d       	adc	r31, r13
    124a:	80 83       	st	Z, r24
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
      
   for(i = 0; i < len; i++)
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	c9 1a       	sub	r12, r25
    1250:	d9 0a       	sbc	r13, r25
    1252:	e9 0a       	sbc	r14, r25
    1254:	f9 0a       	sbc	r15, r25
    1256:	c8 14       	cp	r12, r8
    1258:	d9 04       	cpc	r13, r9
    125a:	ea 04       	cpc	r14, r10
    125c:	fb 04       	cpc	r15, r11
    125e:	c8 f2       	brcs	.-78     	; 0x1212 <wiz_recv_data+0x32>
         rd = getSn_RX_FIFOR(sn);
         wizdata[i]   = (uint8_t)(rd >> 8);
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
    1260:	e1 2f       	mov	r30, r17
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	ec 56       	subi	r30, 0x6C	; 108
    1266:	fc 4f       	sbci	r31, 0xFC	; 252
    1268:	80 83       	st	Z, r24
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	cf 90       	pop	r12
    1278:	bf 90       	pop	r11
    127a:	af 90       	pop	r10
    127c:	9f 90       	pop	r9
    127e:	8f 90       	pop	r8
    1280:	08 95       	ret

00001282 <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint32_t len)
{
    1282:	8f 92       	push	r8
    1284:	9f 92       	push	r9
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	cf 93       	push	r28
    1294:	c8 2f       	mov	r28, r24
    1296:	6a 01       	movw	r12, r20
    1298:	7b 01       	movw	r14, r22
   uint32_t i = 0;
   for(i = 0; i < len ; i += 2) getSn_RX_FIFOR(sn);
    129a:	81 2c       	mov	r8, r1
    129c:	91 2c       	mov	r9, r1
    129e:	54 01       	movw	r10, r8
    12a0:	17 c0       	rjmp	.+46     	; 0x12d0 <wiz_recv_ignore+0x4e>
    12a2:	6c 2f       	mov	r22, r28
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	68 5f       	subi	r22, 0xF8	; 248
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	00 24       	eor	r0, r0
    12ac:	76 95       	lsr	r23
    12ae:	67 95       	ror	r22
    12b0:	07 94       	ror	r0
    12b2:	76 95       	lsr	r23
    12b4:	67 95       	ror	r22
    12b6:	07 94       	ror	r0
    12b8:	76 2f       	mov	r23, r22
    12ba:	60 2d       	mov	r22, r0
    12bc:	60 5d       	subi	r22, 0xD0	; 208
    12be:	7f 47       	sbci	r23, 0x7F	; 127
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	ea dd       	rcall	.-1068   	; 0xe9a <WIZCHIP_READ>
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	88 0e       	add	r8, r24
    12ca:	91 1c       	adc	r9, r1
    12cc:	a1 1c       	adc	r10, r1
    12ce:	b1 1c       	adc	r11, r1
    12d0:	8c 14       	cp	r8, r12
    12d2:	9d 04       	cpc	r9, r13
    12d4:	ae 04       	cpc	r10, r14
    12d6:	bf 04       	cpc	r11, r15
    12d8:	20 f3       	brcs	.-56     	; 0x12a2 <wiz_recv_ignore+0x20>
}
    12da:	cf 91       	pop	r28
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	cf 90       	pop	r12
    12e4:	bf 90       	pop	r11
    12e6:	af 90       	pop	r10
    12e8:	9f 90       	pop	r9
    12ea:	8f 90       	pop	r8
    12ec:	08 95       	ret

000012ee <wizchip_cris_enter>:
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
    12ee:	08 95       	ret

000012f0 <wizchip_cris_exit>:
    12f0:	08 95       	ret

000012f2 <wizchip_cs_select>:
    12f2:	08 95       	ret

000012f4 <wizchip_cs_deselect>:
    12f4:	08 95       	ret

000012f6 <wizchip_bus_readdata>:
    12f6:	fb 01       	movw	r30, r22
    12f8:	80 81       	ld	r24, Z
    12fa:	08 95       	ret

000012fc <wizchip_bus_writedata>:
    12fc:	fb 01       	movw	r30, r22
    12fe:	40 83       	st	Z, r20
    1300:	08 95       	ret

00001302 <reg_wizchip_cris_cbfunc>:
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	19 f0       	breq	.+6      	; 0x130c <reg_wizchip_cris_cbfunc+0xa>
    1306:	61 15       	cp	r22, r1
    1308:	71 05       	cpc	r23, r1
    130a:	59 f4       	brne	.+22     	; 0x1322 <reg_wizchip_cris_cbfunc+0x20>
    130c:	e2 e0       	ldi	r30, 0x02	; 2
    130e:	f1 e0       	ldi	r31, 0x01	; 1
    1310:	87 e7       	ldi	r24, 0x77	; 119
    1312:	99 e0       	ldi	r25, 0x09	; 9
    1314:	93 87       	std	Z+11, r25	; 0x0b
    1316:	82 87       	std	Z+10, r24	; 0x0a
    1318:	88 e7       	ldi	r24, 0x78	; 120
    131a:	99 e0       	ldi	r25, 0x09	; 9
    131c:	95 87       	std	Z+13, r25	; 0x0d
    131e:	84 87       	std	Z+12, r24	; 0x0c
    1320:	08 95       	ret
    1322:	e2 e0       	ldi	r30, 0x02	; 2
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	93 87       	std	Z+11, r25	; 0x0b
    1328:	82 87       	std	Z+10, r24	; 0x0a
    132a:	75 87       	std	Z+13, r23	; 0x0d
    132c:	64 87       	std	Z+12, r22	; 0x0c
    132e:	08 95       	ret

00001330 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
    1330:	6f 92       	push	r6
    1332:	7f 92       	push	r7
    1334:	8f 92       	push	r8
    1336:	9f 92       	push	r9
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	00 d0       	rcall	.+0      	; 0x134e <wizchip_sw_reset+0x1e>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <wizchip_sw_reset+0x20>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <wizchip_sw_reset+0x22>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
    1356:	68 e0       	ldi	r22, 0x08	; 8
    1358:	70 e8       	ldi	r23, 0x80	; 128
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9d dd       	rcall	.-1222   	; 0xe9a <WIZCHIP_READ>
    1360:	99 83       	std	Y+1, r25	; 0x01
    1362:	68 e0       	ldi	r22, 0x08	; 8
    1364:	70 e8       	ldi	r23, 0x80	; 128
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	97 dd       	rcall	.-1234   	; 0xe9a <WIZCHIP_READ>
    136c:	8a 83       	std	Y+2, r24	; 0x02
    136e:	6a e0       	ldi	r22, 0x0A	; 10
    1370:	70 e8       	ldi	r23, 0x80	; 128
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	91 dd       	rcall	.-1246   	; 0xe9a <WIZCHIP_READ>
    1378:	9b 83       	std	Y+3, r25	; 0x03
    137a:	6a e0       	ldi	r22, 0x0A	; 10
    137c:	70 e8       	ldi	r23, 0x80	; 128
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	8b dd       	rcall	.-1258   	; 0xe9a <WIZCHIP_READ>
    1384:	8c 83       	std	Y+4, r24	; 0x04
    1386:	6c e0       	ldi	r22, 0x0C	; 12
    1388:	70 e8       	ldi	r23, 0x80	; 128
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	85 dd       	rcall	.-1270   	; 0xe9a <WIZCHIP_READ>
    1390:	9d 83       	std	Y+5, r25	; 0x05
    1392:	6c e0       	ldi	r22, 0x0C	; 12
    1394:	70 e8       	ldi	r23, 0x80	; 128
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	7f dd       	rcall	.-1282   	; 0xe9a <WIZCHIP_READ>
    139c:	8e 83       	std	Y+6, r24	; 0x06
   getGAR(gw);  
    139e:	60 e1       	ldi	r22, 0x10	; 16
    13a0:	70 e8       	ldi	r23, 0x80	; 128
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	79 dd       	rcall	.-1294   	; 0xe9a <WIZCHIP_READ>
    13a8:	79 2e       	mov	r7, r25
    13aa:	60 e1       	ldi	r22, 0x10	; 16
    13ac:	70 e8       	ldi	r23, 0x80	; 128
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	73 dd       	rcall	.-1306   	; 0xe9a <WIZCHIP_READ>
    13b4:	68 2e       	mov	r6, r24
    13b6:	62 e1       	ldi	r22, 0x12	; 18
    13b8:	70 e8       	ldi	r23, 0x80	; 128
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	6d dd       	rcall	.-1318   	; 0xe9a <WIZCHIP_READ>
    13c0:	99 2e       	mov	r9, r25
    13c2:	62 e1       	ldi	r22, 0x12	; 18
    13c4:	70 e8       	ldi	r23, 0x80	; 128
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	67 dd       	rcall	.-1330   	; 0xe9a <WIZCHIP_READ>
    13cc:	88 2e       	mov	r8, r24
   getSUBR(sn);  
    13ce:	64 e1       	ldi	r22, 0x14	; 20
    13d0:	70 e8       	ldi	r23, 0x80	; 128
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	61 dd       	rcall	.-1342   	; 0xe9a <WIZCHIP_READ>
    13d8:	b9 2e       	mov	r11, r25
    13da:	64 e1       	ldi	r22, 0x14	; 20
    13dc:	70 e8       	ldi	r23, 0x80	; 128
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	5b dd       	rcall	.-1354   	; 0xe9a <WIZCHIP_READ>
    13e4:	a8 2e       	mov	r10, r24
    13e6:	66 e1       	ldi	r22, 0x16	; 22
    13e8:	70 e8       	ldi	r23, 0x80	; 128
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	55 dd       	rcall	.-1366   	; 0xe9a <WIZCHIP_READ>
    13f0:	e9 2e       	mov	r14, r25
    13f2:	66 e1       	ldi	r22, 0x16	; 22
    13f4:	70 e8       	ldi	r23, 0x80	; 128
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	4f dd       	rcall	.-1378   	; 0xe9a <WIZCHIP_READ>
    13fc:	c8 2e       	mov	r12, r24
   getSIPR(sip);
    13fe:	68 e1       	ldi	r22, 0x18	; 24
    1400:	70 e8       	ldi	r23, 0x80	; 128
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	49 dd       	rcall	.-1390   	; 0xe9a <WIZCHIP_READ>
    1408:	09 2f       	mov	r16, r25
    140a:	68 e1       	ldi	r22, 0x18	; 24
    140c:	70 e8       	ldi	r23, 0x80	; 128
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	43 dd       	rcall	.-1402   	; 0xe9a <WIZCHIP_READ>
    1414:	d8 2e       	mov	r13, r24
    1416:	6a e1       	ldi	r22, 0x1A	; 26
    1418:	70 e8       	ldi	r23, 0x80	; 128
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	3d dd       	rcall	.-1414   	; 0xe9a <WIZCHIP_READ>
    1420:	19 2f       	mov	r17, r25
    1422:	6a e1       	ldi	r22, 0x1A	; 26
    1424:	70 e8       	ldi	r23, 0x80	; 128
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	37 dd       	rcall	.-1426   	; 0xe9a <WIZCHIP_READ>
    142c:	f8 2e       	mov	r15, r24
    142e:	10 92 00 80 	sts	0x8000, r1	; 0x808000 <__bss_end+0x735e>
   setMR(MR_RST);
    1432:	80 e8       	ldi	r24, 0x80	; 128
    1434:	80 93 01 80 	sts	0x8001, r24	; 0x808001 <__bss_end+0x735f>
    1438:	49 81       	ldd	r20, Y+1	; 0x01
    143a:	50 e0       	ldi	r21, 0x00	; 0
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
    143c:	54 2f       	mov	r21, r20
    143e:	44 27       	eor	r20, r20
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	48 0f       	add	r20, r24
    1444:	51 1d       	adc	r21, r1
    1446:	68 e0       	ldi	r22, 0x08	; 8
    1448:	70 e8       	ldi	r23, 0x80	; 128
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	f2 dc       	rcall	.-1564   	; 0xe34 <WIZCHIP_WRITE>
    1450:	4b 81       	ldd	r20, Y+3	; 0x03
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	54 2f       	mov	r21, r20
    1456:	44 27       	eor	r20, r20
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	48 0f       	add	r20, r24
    145c:	51 1d       	adc	r21, r1
    145e:	6a e0       	ldi	r22, 0x0A	; 10
    1460:	70 e8       	ldi	r23, 0x80	; 128
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	e6 dc       	rcall	.-1588   	; 0xe34 <WIZCHIP_WRITE>
    1468:	4d 81       	ldd	r20, Y+5	; 0x05
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	54 2f       	mov	r21, r20
    146e:	44 27       	eor	r20, r20
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	48 0f       	add	r20, r24
    1474:	51 1d       	adc	r21, r1
    1476:	6c e0       	ldi	r22, 0x0C	; 12
    1478:	70 e8       	ldi	r23, 0x80	; 128
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	da dc       	rcall	.-1612   	; 0xe34 <WIZCHIP_WRITE>
    1480:	47 2d       	mov	r20, r7
    1482:	50 e0       	ldi	r21, 0x00	; 0
   setGAR(gw);
    1484:	54 2f       	mov	r21, r20
    1486:	44 27       	eor	r20, r20
    1488:	46 0d       	add	r20, r6
    148a:	51 1d       	adc	r21, r1
    148c:	60 e1       	ldi	r22, 0x10	; 16
    148e:	70 e8       	ldi	r23, 0x80	; 128
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	cf dc       	rcall	.-1634   	; 0xe34 <WIZCHIP_WRITE>
    1496:	49 2d       	mov	r20, r9
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	54 2f       	mov	r21, r20
    149c:	44 27       	eor	r20, r20
    149e:	48 0d       	add	r20, r8
    14a0:	51 1d       	adc	r21, r1
    14a2:	62 e1       	ldi	r22, 0x12	; 18
    14a4:	70 e8       	ldi	r23, 0x80	; 128
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	c4 dc       	rcall	.-1656   	; 0xe34 <WIZCHIP_WRITE>
    14ac:	4b 2d       	mov	r20, r11
    14ae:	50 e0       	ldi	r21, 0x00	; 0
   setSUBR(sn);
    14b0:	54 2f       	mov	r21, r20
    14b2:	44 27       	eor	r20, r20
    14b4:	4a 0d       	add	r20, r10
    14b6:	51 1d       	adc	r21, r1
    14b8:	64 e1       	ldi	r22, 0x14	; 20
    14ba:	70 e8       	ldi	r23, 0x80	; 128
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	b9 dc       	rcall	.-1678   	; 0xe34 <WIZCHIP_WRITE>
    14c2:	4e 2d       	mov	r20, r14
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	54 2f       	mov	r21, r20
    14c8:	44 27       	eor	r20, r20
    14ca:	4c 0d       	add	r20, r12
    14cc:	51 1d       	adc	r21, r1
    14ce:	66 e1       	ldi	r22, 0x16	; 22
    14d0:	70 e8       	ldi	r23, 0x80	; 128
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	ae dc       	rcall	.-1700   	; 0xe34 <WIZCHIP_WRITE>
    14d8:	40 2f       	mov	r20, r16
    14da:	50 e0       	ldi	r21, 0x00	; 0
   setSIPR(sip);
    14dc:	54 2f       	mov	r21, r20
    14de:	44 27       	eor	r20, r20
    14e0:	4d 0d       	add	r20, r13
    14e2:	51 1d       	adc	r21, r1
    14e4:	68 e1       	ldi	r22, 0x18	; 24
    14e6:	70 e8       	ldi	r23, 0x80	; 128
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a3 dc       	rcall	.-1722   	; 0xe34 <WIZCHIP_WRITE>
    14ee:	41 2f       	mov	r20, r17
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	54 2f       	mov	r21, r20
    14f4:	44 27       	eor	r20, r20
    14f6:	4f 0d       	add	r20, r15
    14f8:	51 1d       	adc	r21, r1
    14fa:	6a e1       	ldi	r22, 0x1A	; 26
    14fc:	70 e8       	ldi	r23, 0x80	; 128
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	98 dc       	rcall	.-1744   	; 0xe34 <WIZCHIP_WRITE>
    1504:	26 96       	adiw	r28, 0x06	; 6
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
}
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	bf 90       	pop	r11
    1522:	af 90       	pop	r10
    1524:	9f 90       	pop	r9
    1526:	8f 90       	pop	r8
    1528:	7f 90       	pop	r7
    152a:	6f 90       	pop	r6
    152c:	08 95       	ret

0000152e <wizchip_init>:
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
    1536:	cf 93       	push	r28
    1538:	7c 01       	movw	r14, r24
    153a:	8b 01       	movw	r16, r22
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
    153c:	f9 de       	rcall	.-526    	; 0x1330 <wizchip_sw_reset>
   if(txsize)
    153e:	e1 14       	cp	r14, r1
    1540:	f1 04       	cpc	r15, r1
    1542:	69 f4       	brne	.+26     	; 0x155e <wizchip_init+0x30>
    1544:	1f c0       	rjmp	.+62     	; 0x1584 <wizchip_init+0x56>
      tmp = 0;
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] > 64) 
    1546:	f7 01       	movw	r30, r14
    1548:	e8 0f       	add	r30, r24
    154a:	f1 1d       	adc	r31, r1
    154c:	87 fd       	sbrc	r24, 7
    154e:	fa 95       	dec	r31
    1550:	90 81       	ld	r25, Z
    1552:	91 34       	cpi	r25, 0x41	; 65
    1554:	08 f0       	brcs	.+2      	; 0x1558 <wizchip_init+0x2a>
    1556:	3b c0       	rjmp	.+118    	; 0x15ce <wizchip_init+0xa0>
				return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
			tmp += txsize[i];
    1558:	29 0f       	add	r18, r25
   if(txsize)
   {
      tmp = 0;
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <wizchip_init+0x34>
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	88 30       	cpi	r24, 0x08	; 8
    1564:	84 f3       	brlt	.-32     	; 0x1546 <wizchip_init+0x18>
				return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
			tmp += txsize[i];
			if(tmp > 128) 
				return -1;
		}
		if(tmp % 8) return -1;
    1566:	27 70       	andi	r18, 0x07	; 7
    1568:	a1 f5       	brne	.+104    	; 0x15d2 <wizchip_init+0xa4>
    156a:	c0 e0       	ldi	r28, 0x00	; 0
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <wizchip_init+0x52>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
    156e:	f7 01       	movw	r30, r14
    1570:	ec 0f       	add	r30, r28
    1572:	f1 1d       	adc	r31, r1
    1574:	c7 fd       	sbrc	r28, 7
    1576:	fa 95       	dec	r31
    1578:	60 81       	ld	r22, Z
    157a:	8c 2f       	mov	r24, r28
    157c:	d5 dc       	rcall	.-1622   	; 0xf28 <setTMSR>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    157e:	cf 5f       	subi	r28, 0xFF	; 255
    1580:	c8 30       	cpi	r28, 0x08	; 8
    1582:	ac f3       	brlt	.-22     	; 0x156e <wizchip_init+0x40>
			setSn_TXBUF_SIZE(i, txsize[i]);
#endif
		}	
   }

   if(rxsize)
    1584:	01 15       	cp	r16, r1
    1586:	11 05       	cpc	r17, r1
    1588:	69 f4       	brne	.+26     	; 0x15a4 <wizchip_init+0x76>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	27 c0       	rjmp	.+78     	; 0x15dc <wizchip_init+0xae>
   {
      tmp = 0;
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
    158e:	f8 01       	movw	r30, r16
    1590:	e8 0f       	add	r30, r24
    1592:	f1 1d       	adc	r31, r1
    1594:	87 fd       	sbrc	r24, 7
    1596:	fa 95       	dec	r31
    1598:	90 81       	ld	r25, Z
    159a:	91 34       	cpi	r25, 0x41	; 65
    159c:	e0 f4       	brcc	.+56     	; 0x15d6 <wizchip_init+0xa8>
			tmp += rxsize[i];
    159e:	29 0f       	add	r18, r25

   if(rxsize)
   {
      tmp = 0;
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <wizchip_init+0x7a>
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	88 30       	cpi	r24, 0x08	; 8
    15aa:	8c f3       	brlt	.-30     	; 0x158e <wizchip_init+0x60>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
    15ac:	27 70       	andi	r18, 0x07	; 7
    15ae:	a9 f4       	brne	.+42     	; 0x15da <wizchip_init+0xac>
    15b0:	c0 e0       	ldi	r28, 0x00	; 0
    15b2:	09 c0       	rjmp	.+18     	; 0x15c6 <wizchip_init+0x98>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
    15b4:	f8 01       	movw	r30, r16
    15b6:	ec 0f       	add	r30, r28
    15b8:	f1 1d       	adc	r31, r1
    15ba:	c7 fd       	sbrc	r28, 7
    15bc:	fa 95       	dec	r31
    15be:	60 81       	ld	r22, Z
    15c0:	8c 2f       	mov	r24, r28
    15c2:	f0 dc       	rcall	.-1568   	; 0xfa4 <setRMSR>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    15c4:	cf 5f       	subi	r28, 0xFF	; 255
    15c6:	c8 30       	cpi	r28, 0x08	; 8
    15c8:	ac f3       	brlt	.-22     	; 0x15b4 <wizchip_init+0x86>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <wizchip_init+0xae>
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] > 64) 
				return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <wizchip_init+0xae>
			tmp += txsize[i];
			if(tmp > 128) 
				return -1;
		}
		if(tmp % 8) return -1;
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <wizchip_init+0xae>
   {
      tmp = 0;
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <wizchip_init+0xae>
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
    15da:	8f ef       	ldi	r24, 0xFF	; 255
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
}
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	08 95       	ret

000015e8 <default_ip_assign>:
}

uint32_t getDHCPLeasetime(void)
{
	return dhcp_lease_time;
}
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ca ec       	ldi	r28, 0xCA	; 202
    15ee:	d3 e0       	ldi	r29, 0x03	; 3
    15f0:	48 81       	ld	r20, Y
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	54 2f       	mov	r21, r20
    15f6:	44 27       	eor	r20, r20
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	48 0f       	add	r20, r24
    15fc:	51 1d       	adc	r21, r1
    15fe:	68 e1       	ldi	r22, 0x18	; 24
    1600:	70 e8       	ldi	r23, 0x80	; 128
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	16 dc       	rcall	.-2004   	; 0xe34 <WIZCHIP_WRITE>
    1608:	4a 81       	ldd	r20, Y+2	; 0x02
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	54 2f       	mov	r21, r20
    160e:	44 27       	eor	r20, r20
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	48 0f       	add	r20, r24
    1614:	51 1d       	adc	r21, r1
    1616:	6a e1       	ldi	r22, 0x1A	; 26
    1618:	70 e8       	ldi	r23, 0x80	; 128
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0a dc       	rcall	.-2028   	; 0xe34 <WIZCHIP_WRITE>
    1620:	c2 ec       	ldi	r28, 0xC2	; 194
    1622:	d3 e0       	ldi	r29, 0x03	; 3
    1624:	48 81       	ld	r20, Y
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	54 2f       	mov	r21, r20
    162a:	44 27       	eor	r20, r20
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	48 0f       	add	r20, r24
    1630:	51 1d       	adc	r21, r1
    1632:	64 e1       	ldi	r22, 0x14	; 20
    1634:	70 e8       	ldi	r23, 0x80	; 128
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	fc db       	rcall	.-2056   	; 0xe34 <WIZCHIP_WRITE>
    163c:	4a 81       	ldd	r20, Y+2	; 0x02
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	54 2f       	mov	r21, r20
    1642:	44 27       	eor	r20, r20
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	48 0f       	add	r20, r24
    1648:	51 1d       	adc	r21, r1
    164a:	66 e1       	ldi	r22, 0x16	; 22
    164c:	70 e8       	ldi	r23, 0x80	; 128
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	f0 db       	rcall	.-2080   	; 0xe34 <WIZCHIP_WRITE>
    1654:	c6 ec       	ldi	r28, 0xC6	; 198
    1656:	d3 e0       	ldi	r29, 0x03	; 3
    1658:	48 81       	ld	r20, Y
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	54 2f       	mov	r21, r20
    165e:	44 27       	eor	r20, r20
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	48 0f       	add	r20, r24
    1664:	51 1d       	adc	r21, r1
    1666:	60 e1       	ldi	r22, 0x10	; 16
    1668:	70 e8       	ldi	r23, 0x80	; 128
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	e2 db       	rcall	.-2108   	; 0xe34 <WIZCHIP_WRITE>
    1670:	4a 81       	ldd	r20, Y+2	; 0x02
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	54 2f       	mov	r21, r20
    1676:	44 27       	eor	r20, r20
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	48 0f       	add	r20, r24
    167c:	51 1d       	adc	r21, r1
    167e:	62 e1       	ldi	r22, 0x12	; 18
    1680:	70 e8       	ldi	r23, 0x80	; 128
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	d6 db       	rcall	.-2132   	; 0xe34 <WIZCHIP_WRITE>
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret

0000168e <default_ip_update>:
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	10 92 00 80 	sts	0x8000, r1	; 0x808000 <__bss_end+0x735e>
    1696:	80 e8       	ldi	r24, 0x80	; 128
    1698:	80 93 01 80 	sts	0x8001, r24	; 0x808001 <__bss_end+0x735f>
    169c:	a5 df       	rcall	.-182    	; 0x15e8 <default_ip_assign>
    169e:	cf ef       	ldi	r28, 0xFF	; 255
    16a0:	db e0       	ldi	r29, 0x0B	; 11
    16a2:	48 81       	ld	r20, Y
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	54 2f       	mov	r21, r20
    16a8:	44 27       	eor	r20, r20
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	48 0f       	add	r20, r24
    16ae:	51 1d       	adc	r21, r1
    16b0:	68 e0       	ldi	r22, 0x08	; 8
    16b2:	70 e8       	ldi	r23, 0x80	; 128
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	bd db       	rcall	.-2182   	; 0xe34 <WIZCHIP_WRITE>
    16ba:	4a 81       	ldd	r20, Y+2	; 0x02
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	54 2f       	mov	r21, r20
    16c0:	44 27       	eor	r20, r20
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	48 0f       	add	r20, r24
    16c6:	51 1d       	adc	r21, r1
    16c8:	6a e0       	ldi	r22, 0x0A	; 10
    16ca:	70 e8       	ldi	r23, 0x80	; 128
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	b1 db       	rcall	.-2206   	; 0xe34 <WIZCHIP_WRITE>
    16d2:	4c 81       	ldd	r20, Y+4	; 0x04
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	54 2f       	mov	r21, r20
    16d8:	44 27       	eor	r20, r20
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	48 0f       	add	r20, r24
    16de:	51 1d       	adc	r21, r1
    16e0:	6c e0       	ldi	r22, 0x0C	; 12
    16e2:	70 e8       	ldi	r23, 0x80	; 128
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a5 db       	rcall	.-2230   	; 0xe34 <WIZCHIP_WRITE>
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <default_ip_conflict>:
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	10 92 00 80 	sts	0x8000, r1	; 0x808000 <__bss_end+0x735e>
    16f8:	80 e8       	ldi	r24, 0x80	; 128
    16fa:	80 93 01 80 	sts	0x8001, r24	; 0x808001 <__bss_end+0x735f>
    16fe:	cf ef       	ldi	r28, 0xFF	; 255
    1700:	db e0       	ldi	r29, 0x0B	; 11
    1702:	48 81       	ld	r20, Y
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	54 2f       	mov	r21, r20
    1708:	44 27       	eor	r20, r20
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	48 0f       	add	r20, r24
    170e:	51 1d       	adc	r21, r1
    1710:	68 e0       	ldi	r22, 0x08	; 8
    1712:	70 e8       	ldi	r23, 0x80	; 128
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	8d db       	rcall	.-2278   	; 0xe34 <WIZCHIP_WRITE>
    171a:	4a 81       	ldd	r20, Y+2	; 0x02
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	54 2f       	mov	r21, r20
    1720:	44 27       	eor	r20, r20
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	48 0f       	add	r20, r24
    1726:	51 1d       	adc	r21, r1
    1728:	6a e0       	ldi	r22, 0x0A	; 10
    172a:	70 e8       	ldi	r23, 0x80	; 128
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	81 db       	rcall	.-2302   	; 0xe34 <WIZCHIP_WRITE>
    1732:	4c 81       	ldd	r20, Y+4	; 0x04
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	54 2f       	mov	r21, r20
    1738:	44 27       	eor	r20, r20
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	48 0f       	add	r20, r24
    173e:	51 1d       	adc	r21, r1
    1740:	6c e0       	ldi	r22, 0x0C	; 12
    1742:	70 e8       	ldi	r23, 0x80	; 128
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	75 db       	rcall	.-2326   	; 0xe34 <WIZCHIP_WRITE>
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <makeDHCPMSG>:
    1750:	68 e0       	ldi	r22, 0x08	; 8
    1752:	70 e8       	ldi	r23, 0x80	; 128
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a0 db       	rcall	.-2240   	; 0xe9a <WIZCHIP_READ>
    175a:	68 e0       	ldi	r22, 0x08	; 8
    175c:	70 e8       	ldi	r23, 0x80	; 128
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9b db       	rcall	.-2250   	; 0xe9a <WIZCHIP_READ>
    1764:	6a e0       	ldi	r22, 0x0A	; 10
    1766:	70 e8       	ldi	r23, 0x80	; 128
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	96 db       	rcall	.-2260   	; 0xe9a <WIZCHIP_READ>
    176e:	6a e0       	ldi	r22, 0x0A	; 10
    1770:	70 e8       	ldi	r23, 0x80	; 128
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	91 db       	rcall	.-2270   	; 0xe9a <WIZCHIP_READ>
    1778:	6c e0       	ldi	r22, 0x0C	; 12
    177a:	70 e8       	ldi	r23, 0x80	; 128
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	8c db       	rcall	.-2280   	; 0xe9a <WIZCHIP_READ>
    1782:	6c e0       	ldi	r22, 0x0C	; 12
    1784:	70 e8       	ldi	r23, 0x80	; 128
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	87 db       	rcall	.-2290   	; 0xe9a <WIZCHIP_READ>
    178c:	e0 91 11 0c 	lds	r30, 0x0C11	; 0x800c11 <pDHCPMSG>
    1790:	f0 91 12 0c 	lds	r31, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	80 83       	st	Z, r24
    1798:	e0 91 11 0c 	lds	r30, 0x0C11	; 0x800c11 <pDHCPMSG>
    179c:	f0 91 12 0c 	lds	r31, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    17a0:	81 83       	std	Z+1, r24	; 0x01
    17a2:	a0 91 11 0c 	lds	r26, 0x0C11	; 0x800c11 <pDHCPMSG>
    17a6:	b0 91 12 0c 	lds	r27, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    17aa:	86 e0       	ldi	r24, 0x06	; 6
    17ac:	12 96       	adiw	r26, 0x02	; 2
    17ae:	8c 93       	st	X, r24
    17b0:	12 97       	sbiw	r26, 0x02	; 2
    17b2:	13 96       	adiw	r26, 0x03	; 3
    17b4:	1c 92       	st	X, r1
    17b6:	13 97       	sbiw	r26, 0x03	; 3
    17b8:	80 91 05 0c 	lds	r24, 0x0C05	; 0x800c05 <DHCP_XID>
    17bc:	90 91 06 0c 	lds	r25, 0x0C06	; 0x800c06 <DHCP_XID+0x1>
    17c0:	20 91 07 0c 	lds	r18, 0x0C07	; 0x800c07 <DHCP_XID+0x2>
    17c4:	30 91 08 0c 	lds	r19, 0x0C08	; 0x800c08 <DHCP_XID+0x3>
    17c8:	14 96       	adiw	r26, 0x04	; 4
    17ca:	3c 93       	st	X, r19
    17cc:	14 97       	sbiw	r26, 0x04	; 4
    17ce:	15 96       	adiw	r26, 0x05	; 5
    17d0:	2c 93       	st	X, r18
    17d2:	15 97       	sbiw	r26, 0x05	; 5
    17d4:	16 96       	adiw	r26, 0x06	; 6
    17d6:	9c 93       	st	X, r25
    17d8:	16 97       	sbiw	r26, 0x06	; 6
    17da:	17 96       	adiw	r26, 0x07	; 7
    17dc:	8c 93       	st	X, r24
    17de:	17 97       	sbiw	r26, 0x07	; 7
    17e0:	19 96       	adiw	r26, 0x09	; 9
    17e2:	1c 92       	st	X, r1
    17e4:	1e 92       	st	-X, r1
    17e6:	18 97       	sbiw	r26, 0x08	; 8
    17e8:	80 e8       	ldi	r24, 0x80	; 128
    17ea:	1a 96       	adiw	r26, 0x0a	; 10
    17ec:	8c 93       	st	X, r24
    17ee:	1a 97       	sbiw	r26, 0x0a	; 10
    17f0:	1b 96       	adiw	r26, 0x0b	; 11
    17f2:	1c 92       	st	X, r1
    17f4:	1b 97       	sbiw	r26, 0x0b	; 11
    17f6:	1c 96       	adiw	r26, 0x0c	; 12
    17f8:	1c 92       	st	X, r1
    17fa:	1c 97       	sbiw	r26, 0x0c	; 12
    17fc:	1d 96       	adiw	r26, 0x0d	; 13
    17fe:	1c 92       	st	X, r1
    1800:	1d 97       	sbiw	r26, 0x0d	; 13
    1802:	1e 96       	adiw	r26, 0x0e	; 14
    1804:	1c 92       	st	X, r1
    1806:	1e 97       	sbiw	r26, 0x0e	; 14
    1808:	1f 96       	adiw	r26, 0x0f	; 15
    180a:	1c 92       	st	X, r1
    180c:	1f 97       	sbiw	r26, 0x0f	; 15
    180e:	50 96       	adiw	r26, 0x10	; 16
    1810:	1c 92       	st	X, r1
    1812:	50 97       	sbiw	r26, 0x10	; 16
    1814:	51 96       	adiw	r26, 0x11	; 17
    1816:	1c 92       	st	X, r1
    1818:	51 97       	sbiw	r26, 0x11	; 17
    181a:	52 96       	adiw	r26, 0x12	; 18
    181c:	1c 92       	st	X, r1
    181e:	52 97       	sbiw	r26, 0x12	; 18
    1820:	53 96       	adiw	r26, 0x13	; 19
    1822:	1c 92       	st	X, r1
    1824:	53 97       	sbiw	r26, 0x13	; 19
    1826:	54 96       	adiw	r26, 0x14	; 20
    1828:	1c 92       	st	X, r1
    182a:	54 97       	sbiw	r26, 0x14	; 20
    182c:	55 96       	adiw	r26, 0x15	; 21
    182e:	1c 92       	st	X, r1
    1830:	55 97       	sbiw	r26, 0x15	; 21
    1832:	56 96       	adiw	r26, 0x16	; 22
    1834:	1c 92       	st	X, r1
    1836:	56 97       	sbiw	r26, 0x16	; 22
    1838:	57 96       	adiw	r26, 0x17	; 23
    183a:	1c 92       	st	X, r1
    183c:	57 97       	sbiw	r26, 0x17	; 23
    183e:	58 96       	adiw	r26, 0x18	; 24
    1840:	1c 92       	st	X, r1
    1842:	58 97       	sbiw	r26, 0x18	; 24
    1844:	59 96       	adiw	r26, 0x19	; 25
    1846:	1c 92       	st	X, r1
    1848:	59 97       	sbiw	r26, 0x19	; 25
    184a:	5a 96       	adiw	r26, 0x1a	; 26
    184c:	1c 92       	st	X, r1
    184e:	5a 97       	sbiw	r26, 0x1a	; 26
    1850:	5b 96       	adiw	r26, 0x1b	; 27
    1852:	1c 92       	st	X, r1
    1854:	5b 97       	sbiw	r26, 0x1b	; 27
    1856:	ef ef       	ldi	r30, 0xFF	; 255
    1858:	fb e0       	ldi	r31, 0x0B	; 11
    185a:	80 81       	ld	r24, Z
    185c:	5c 96       	adiw	r26, 0x1c	; 28
    185e:	8c 93       	st	X, r24
    1860:	5c 97       	sbiw	r26, 0x1c	; 28
    1862:	81 81       	ldd	r24, Z+1	; 0x01
    1864:	5d 96       	adiw	r26, 0x1d	; 29
    1866:	8c 93       	st	X, r24
    1868:	5d 97       	sbiw	r26, 0x1d	; 29
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	5e 96       	adiw	r26, 0x1e	; 30
    186e:	8c 93       	st	X, r24
    1870:	5e 97       	sbiw	r26, 0x1e	; 30
    1872:	83 81       	ldd	r24, Z+3	; 0x03
    1874:	5f 96       	adiw	r26, 0x1f	; 31
    1876:	8c 93       	st	X, r24
    1878:	5f 97       	sbiw	r26, 0x1f	; 31
    187a:	84 81       	ldd	r24, Z+4	; 0x04
    187c:	90 96       	adiw	r26, 0x20	; 32
    187e:	8c 93       	st	X, r24
    1880:	90 97       	sbiw	r26, 0x20	; 32
    1882:	85 81       	ldd	r24, Z+5	; 0x05
    1884:	91 96       	adiw	r26, 0x21	; 33
    1886:	8c 93       	st	X, r24
    1888:	91 97       	sbiw	r26, 0x21	; 33
    188a:	86 e0       	ldi	r24, 0x06	; 6
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <makeDHCPMSG+0x148>
    188e:	fd 01       	movw	r30, r26
    1890:	e8 0f       	add	r30, r24
    1892:	f1 1d       	adc	r31, r1
    1894:	14 8e       	std	Z+28, r1	; 0x1c
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	80 31       	cpi	r24, 0x10	; 16
    189a:	c8 f3       	brcs	.-14     	; 0x188e <makeDHCPMSG+0x13e>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <makeDHCPMSG+0x15a>
    18a0:	fd 01       	movw	r30, r26
    18a2:	e8 0f       	add	r30, r24
    18a4:	f1 1d       	adc	r31, r1
    18a6:	14 a6       	std	Z+44, r1	; 0x2c
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	80 34       	cpi	r24, 0x40	; 64
    18ac:	c8 f3       	brcs	.-14     	; 0x18a0 <makeDHCPMSG+0x150>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	07 c0       	rjmp	.+14     	; 0x18c0 <makeDHCPMSG+0x170>
    18b2:	fd 01       	movw	r30, r26
    18b4:	e8 0f       	add	r30, r24
    18b6:	f1 1d       	adc	r31, r1
    18b8:	e4 59       	subi	r30, 0x94	; 148
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	10 82       	st	Z, r1
    18be:	8f 5f       	subi	r24, 0xFF	; 255
    18c0:	88 23       	and	r24, r24
    18c2:	bc f7       	brge	.-18     	; 0x18b2 <makeDHCPMSG+0x162>
    18c4:	fd 01       	movw	r30, r26
    18c6:	e4 51       	subi	r30, 0x14	; 20
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	83 e6       	ldi	r24, 0x63	; 99
    18cc:	80 83       	st	Z, r24
    18ce:	31 96       	adiw	r30, 0x01	; 1
    18d0:	92 e8       	ldi	r25, 0x82	; 130
    18d2:	90 83       	st	Z, r25
    18d4:	31 96       	adiw	r30, 0x01	; 1
    18d6:	93 e5       	ldi	r25, 0x53	; 83
    18d8:	90 83       	st	Z, r25
    18da:	a1 51       	subi	r26, 0x11	; 17
    18dc:	bf 4f       	sbci	r27, 0xFF	; 255
    18de:	8c 93       	st	X, r24
    18e0:	08 95       	ret

000018e2 <send_DHCP_DECLINE>:
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <send_DHCP_DECLINE+0xa>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <send_DHCP_DECLINE+0xc>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	2e df       	rcall	.-420    	; 0x1750 <makeDHCPMSG>
    18f4:	a0 91 11 0c 	lds	r26, 0x0C11	; 0x800c11 <pDHCPMSG>
    18f8:	b0 91 12 0c 	lds	r27, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    18fc:	1a 96       	adiw	r26, 0x0a	; 10
    18fe:	1c 92       	st	X, r1
    1900:	1a 97       	sbiw	r26, 0x0a	; 10
    1902:	1b 96       	adiw	r26, 0x0b	; 11
    1904:	1c 92       	st	X, r1
    1906:	1b 97       	sbiw	r26, 0x0b	; 11
    1908:	fd 01       	movw	r30, r26
    190a:	e0 51       	subi	r30, 0x10	; 16
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	85 e3       	ldi	r24, 0x35	; 53
    1910:	80 83       	st	Z, r24
    1912:	31 96       	adiw	r30, 0x01	; 1
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	90 83       	st	Z, r25
    1918:	31 96       	adiw	r30, 0x01	; 1
    191a:	84 e0       	ldi	r24, 0x04	; 4
    191c:	80 83       	st	Z, r24
    191e:	31 96       	adiw	r30, 0x01	; 1
    1920:	2d e3       	ldi	r18, 0x3D	; 61
    1922:	20 83       	st	Z, r18
    1924:	31 96       	adiw	r30, 0x01	; 1
    1926:	27 e0       	ldi	r18, 0x07	; 7
    1928:	20 83       	st	Z, r18
    192a:	31 96       	adiw	r30, 0x01	; 1
    192c:	90 83       	st	Z, r25
    192e:	4f ef       	ldi	r20, 0xFF	; 255
    1930:	5b e0       	ldi	r21, 0x0B	; 11
    1932:	fa 01       	movw	r30, r20
    1934:	90 81       	ld	r25, Z
    1936:	9d 01       	movw	r18, r26
    1938:	2a 50       	subi	r18, 0x0A	; 10
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	f9 01       	movw	r30, r18
    193e:	90 83       	st	Z, r25
    1940:	fa 01       	movw	r30, r20
    1942:	91 81       	ldd	r25, Z+1	; 0x01
    1944:	2f 5f       	subi	r18, 0xFF	; 255
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	f9 01       	movw	r30, r18
    194a:	90 83       	st	Z, r25
    194c:	fa 01       	movw	r30, r20
    194e:	92 81       	ldd	r25, Z+2	; 0x02
    1950:	2f 5f       	subi	r18, 0xFF	; 255
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	f9 01       	movw	r30, r18
    1956:	90 83       	st	Z, r25
    1958:	fa 01       	movw	r30, r20
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	2f 5f       	subi	r18, 0xFF	; 255
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	f9 01       	movw	r30, r18
    1962:	90 83       	st	Z, r25
    1964:	fa 01       	movw	r30, r20
    1966:	94 81       	ldd	r25, Z+4	; 0x04
    1968:	2f 5f       	subi	r18, 0xFF	; 255
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	f9 01       	movw	r30, r18
    196e:	90 83       	st	Z, r25
    1970:	fa 01       	movw	r30, r20
    1972:	95 81       	ldd	r25, Z+5	; 0x05
    1974:	fd 01       	movw	r30, r26
    1976:	e5 50       	subi	r30, 0x05	; 5
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	90 83       	st	Z, r25
    197c:	31 96       	adiw	r30, 0x01	; 1
    197e:	92 e3       	ldi	r25, 0x32	; 50
    1980:	90 83       	st	Z, r25
    1982:	31 96       	adiw	r30, 0x01	; 1
    1984:	80 83       	st	Z, r24
    1986:	4a ec       	ldi	r20, 0xCA	; 202
    1988:	53 e0       	ldi	r21, 0x03	; 3
    198a:	fa 01       	movw	r30, r20
    198c:	90 81       	ld	r25, Z
    198e:	2c 5f       	subi	r18, 0xFC	; 252
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	f9 01       	movw	r30, r18
    1994:	90 83       	st	Z, r25
    1996:	fa 01       	movw	r30, r20
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	f9 01       	movw	r30, r18
    19a0:	90 83       	st	Z, r25
    19a2:	fa 01       	movw	r30, r20
    19a4:	92 81       	ldd	r25, Z+2	; 0x02
    19a6:	2f 5f       	subi	r18, 0xFF	; 255
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	f9 01       	movw	r30, r18
    19ac:	90 83       	st	Z, r25
    19ae:	fa 01       	movw	r30, r20
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	fd 01       	movw	r30, r26
    19b4:	ef 5f       	subi	r30, 0xFF	; 255
    19b6:	fe 4f       	sbci	r31, 0xFE	; 254
    19b8:	90 83       	st	Z, r25
    19ba:	31 96       	adiw	r30, 0x01	; 1
    19bc:	96 e3       	ldi	r25, 0x36	; 54
    19be:	90 83       	st	Z, r25
    19c0:	31 96       	adiw	r30, 0x01	; 1
    19c2:	80 83       	st	Z, r24
    19c4:	4d e0       	ldi	r20, 0x0D	; 13
    19c6:	5c e0       	ldi	r21, 0x0C	; 12
    19c8:	fa 01       	movw	r30, r20
    19ca:	20 81       	ld	r18, Z
    19cc:	cd 01       	movw	r24, r26
    19ce:	8c 5f       	subi	r24, 0xFC	; 252
    19d0:	9e 4f       	sbci	r25, 0xFE	; 254
    19d2:	fc 01       	movw	r30, r24
    19d4:	20 83       	st	Z, r18
    19d6:	fa 01       	movw	r30, r20
    19d8:	21 81       	ldd	r18, Z+1	; 0x01
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	fc 01       	movw	r30, r24
    19de:	20 83       	st	Z, r18
    19e0:	fa 01       	movw	r30, r20
    19e2:	22 81       	ldd	r18, Z+2	; 0x02
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	fc 01       	movw	r30, r24
    19e8:	20 83       	st	Z, r18
    19ea:	fa 01       	movw	r30, r20
    19ec:	83 81       	ldd	r24, Z+3	; 0x03
    19ee:	fd 01       	movw	r30, r26
    19f0:	e9 5f       	subi	r30, 0xF9	; 249
    19f2:	fe 4f       	sbci	r31, 0xFE	; 254
    19f4:	80 83       	st	Z, r24
    19f6:	31 96       	adiw	r30, 0x01	; 1
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	80 83       	st	Z, r24
    19fc:	8d e1       	ldi	r24, 0x1D	; 29
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	07 c0       	rjmp	.+14     	; 0x1a10 <send_DHCP_DECLINE+0x12e>
    1a02:	fd 01       	movw	r30, r26
    1a04:	e8 0f       	add	r30, r24
    1a06:	f9 1f       	adc	r31, r25
    1a08:	e4 51       	subi	r30, 0x14	; 20
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	10 82       	st	Z, r1
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	88 33       	cpi	r24, 0x38	; 56
    1a12:	f1 e0       	ldi	r31, 0x01	; 1
    1a14:	9f 07       	cpc	r25, r31
    1a16:	ac f3       	brlt	.-22     	; 0x1a02 <send_DHCP_DECLINE+0x120>
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
    1a20:	8c 83       	std	Y+4, r24	; 0x04
    1a22:	88 e5       	ldi	r24, 0x58	; 88
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <puts>
    1a2a:	60 91 11 0c 	lds	r22, 0x0C11	; 0x800c11 <pDHCPMSG>
    1a2e:	70 91 12 0c 	lds	r23, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    1a32:	03 e4       	ldi	r16, 0x43	; 67
    1a34:	10 e0       	ldi	r17, 0x00	; 0
    1a36:	9e 01       	movw	r18, r28
    1a38:	2f 5f       	subi	r18, 0xFF	; 255
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3c:	44 e2       	ldi	r20, 0x24	; 36
    1a3e:	52 e0       	ldi	r21, 0x02	; 2
    1a40:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <DHCP_SOCKET>
    1a44:	0e 94 c7 00 	call	0x18e	; 0x18e <sendto>
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <parseDHCPMSG>:
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	28 97       	sbiw	r28, 0x08	; 8
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <DHCP_SOCKET>
    1a7e:	05 db       	rcall	.-2550   	; 0x108a <getSn_RX_RSR>
    1a80:	61 15       	cp	r22, r1
    1a82:	71 05       	cpc	r23, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <parseDHCPMSG+0x2e>
    1a86:	40 c1       	rjmp	.+640    	; 0x1d08 <parseDHCPMSG+0x2ae>
    1a88:	e0 91 11 0c 	lds	r30, 0x0C11	; 0x800c11 <pDHCPMSG>
    1a8c:	f0 91 12 0c 	lds	r31, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    1a90:	8e 01       	movw	r16, r28
    1a92:	09 5f       	subi	r16, 0xF9	; 249
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	9e 01       	movw	r18, r28
    1a98:	2f 5f       	subi	r18, 0xFF	; 255
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	ab 01       	movw	r20, r22
    1a9e:	bf 01       	movw	r22, r30
    1aa0:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <DHCP_SOCKET>
    1aa4:	0e 94 9c 04 	call	0x938	; 0x938 <recvfrom>
    1aa8:	6b 01       	movw	r12, r22
    1aaa:	7c 01       	movw	r14, r24
    1aac:	3c 81       	ldd	r19, Y+4	; 0x04
    1aae:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	df 92       	push	r13
    1ab6:	cf 92       	push	r12
    1ab8:	48 85       	ldd	r20, Y+8	; 0x08
    1aba:	4f 93       	push	r20
    1abc:	4f 81       	ldd	r20, Y+7	; 0x07
    1abe:	4f 93       	push	r20
    1ac0:	1f 92       	push	r1
    1ac2:	3f 93       	push	r19
    1ac4:	1f 92       	push	r1
    1ac6:	2f 93       	push	r18
    1ac8:	1f 92       	push	r1
    1aca:	9f 93       	push	r25
    1acc:	1f 92       	push	r1
    1ace:	8f 93       	push	r24
    1ad0:	8f e6       	ldi	r24, 0x6F	; 111
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	9f 93       	push	r25
    1ad6:	8f 93       	push	r24
    1ad8:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <printf>
    1adc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ade:	98 85       	ldd	r25, Y+8	; 0x08
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	83 34       	cpi	r24, 0x43	; 67
    1aec:	91 05       	cpc	r25, r1
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <parseDHCPMSG+0x98>
    1af0:	09 c1       	rjmp	.+530    	; 0x1d04 <parseDHCPMSG+0x2aa>
    1af2:	e0 91 11 0c 	lds	r30, 0x0C11	; 0x800c11 <pDHCPMSG>
    1af6:	f0 91 12 0c 	lds	r31, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    1afa:	94 8d       	ldd	r25, Z+28	; 0x1c
    1afc:	80 91 ff 0b 	lds	r24, 0x0BFF	; 0x800bff <DHCP_CHADDR>
    1b00:	98 13       	cpse	r25, r24
    1b02:	19 c0       	rjmp	.+50     	; 0x1b36 <parseDHCPMSG+0xdc>
    1b04:	95 8d       	ldd	r25, Z+29	; 0x1d
    1b06:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <DHCP_CHADDR+0x1>
    1b0a:	98 13       	cpse	r25, r24
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <parseDHCPMSG+0xdc>
    1b0e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b10:	80 91 01 0c 	lds	r24, 0x0C01	; 0x800c01 <DHCP_CHADDR+0x2>
    1b14:	98 13       	cpse	r25, r24
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <parseDHCPMSG+0xdc>
    1b18:	97 8d       	ldd	r25, Z+31	; 0x1f
    1b1a:	80 91 02 0c 	lds	r24, 0x0C02	; 0x800c02 <DHCP_CHADDR+0x3>
    1b1e:	98 13       	cpse	r25, r24
    1b20:	0a c0       	rjmp	.+20     	; 0x1b36 <parseDHCPMSG+0xdc>
    1b22:	90 a1       	ldd	r25, Z+32	; 0x20
    1b24:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <DHCP_CHADDR+0x4>
    1b28:	98 13       	cpse	r25, r24
    1b2a:	05 c0       	rjmp	.+10     	; 0x1b36 <parseDHCPMSG+0xdc>
    1b2c:	91 a1       	ldd	r25, Z+33	; 0x21
    1b2e:	80 91 04 0c 	lds	r24, 0x0C04	; 0x800c04 <DHCP_CHADDR+0x5>
    1b32:	98 17       	cp	r25, r24
    1b34:	31 f0       	breq	.+12     	; 0x1b42 <parseDHCPMSG+0xe8>
    1b36:	8e e9       	ldi	r24, 0x9E	; 158
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <puts>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	e4 c0       	rjmp	.+456    	; 0x1d0a <parseDHCPMSG+0x2b0>
    1b42:	90 91 0d 0c 	lds	r25, 0x0C0D	; 0x800c0d <DHCP_SIP>
    1b46:	91 11       	cpse	r25, r1
    1b48:	0c c0       	rjmp	.+24     	; 0x1b62 <parseDHCPMSG+0x108>
    1b4a:	80 91 0e 0c 	lds	r24, 0x0C0E	; 0x800c0e <DHCP_SIP+0x1>
    1b4e:	81 11       	cpse	r24, r1
    1b50:	08 c0       	rjmp	.+16     	; 0x1b62 <parseDHCPMSG+0x108>
    1b52:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <DHCP_SIP+0x2>
    1b56:	81 11       	cpse	r24, r1
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <parseDHCPMSG+0x108>
    1b5a:	80 91 10 0c 	lds	r24, 0x0C10	; 0x800c10 <DHCP_SIP+0x3>
    1b5e:	88 23       	and	r24, r24
    1b60:	59 f1       	breq	.+86     	; 0x1bb8 <parseDHCPMSG+0x15e>
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	98 13       	cpse	r25, r24
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <parseDHCPMSG+0x12c>
    1b68:	2a 81       	ldd	r18, Y+2	; 0x02
    1b6a:	90 91 0e 0c 	lds	r25, 0x0C0E	; 0x800c0e <DHCP_SIP+0x1>
    1b6e:	29 13       	cpse	r18, r25
    1b70:	0a c0       	rjmp	.+20     	; 0x1b86 <parseDHCPMSG+0x12c>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <DHCP_SIP+0x2>
    1b78:	29 13       	cpse	r18, r25
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <parseDHCPMSG+0x12c>
    1b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7e:	90 91 10 0c 	lds	r25, 0x0C10	; 0x800c10 <DHCP_SIP+0x3>
    1b82:	29 17       	cp	r18, r25
    1b84:	c9 f0       	breq	.+50     	; 0x1bb8 <parseDHCPMSG+0x15e>
    1b86:	90 91 09 0c 	lds	r25, 0x0C09	; 0x800c09 <DHCP_REAL_SIP>
    1b8a:	89 13       	cpse	r24, r25
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <parseDHCPMSG+0x152>
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	80 91 0a 0c 	lds	r24, 0x0C0A	; 0x800c0a <DHCP_REAL_SIP+0x1>
    1b94:	98 13       	cpse	r25, r24
    1b96:	0a c0       	rjmp	.+20     	; 0x1bac <parseDHCPMSG+0x152>
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <DHCP_REAL_SIP+0x2>
    1b9e:	98 13       	cpse	r25, r24
    1ba0:	05 c0       	rjmp	.+10     	; 0x1bac <parseDHCPMSG+0x152>
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	80 91 0c 0c 	lds	r24, 0x0C0C	; 0x800c0c <DHCP_REAL_SIP+0x3>
    1ba8:	98 17       	cp	r25, r24
    1baa:	31 f0       	breq	.+12     	; 0x1bb8 <parseDHCPMSG+0x15e>
    1bac:	8c ec       	ldi	r24, 0xCC	; 204
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <puts>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	a9 c0       	rjmp	.+338    	; 0x1d0a <parseDHCPMSG+0x2b0>
    1bb8:	e0 51       	subi	r30, 0x10	; 16
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	30 ef       	ldi	r19, 0xF0	; 240
    1bbe:	c3 1a       	sub	r12, r19
    1bc0:	d1 08       	sbc	r13, r1
    1bc2:	ce 0e       	add	r12, r30
    1bc4:	df 1e       	adc	r13, r31
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	98 c0       	rjmp	.+304    	; 0x1cfa <parseDHCPMSG+0x2a0>
    1bca:	90 81       	ld	r25, Z
    1bcc:	96 30       	cpi	r25, 0x06	; 6
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <parseDHCPMSG+0x178>
    1bd0:	44 c0       	rjmp	.+136    	; 0x1c5a <parseDHCPMSG+0x200>
    1bd2:	30 f4       	brcc	.+12     	; 0x1be0 <parseDHCPMSG+0x186>
    1bd4:	91 30       	cpi	r25, 0x01	; 1
    1bd6:	b9 f0       	breq	.+46     	; 0x1c06 <parseDHCPMSG+0x1ac>
    1bd8:	88 f0       	brcs	.+34     	; 0x1bfc <parseDHCPMSG+0x1a2>
    1bda:	93 30       	cpi	r25, 0x03	; 3
    1bdc:	29 f1       	breq	.+74     	; 0x1c28 <parseDHCPMSG+0x1ce>
    1bde:	84 c0       	rjmp	.+264    	; 0x1ce8 <parseDHCPMSG+0x28e>
    1be0:	95 33       	cpi	r25, 0x35	; 53
    1be2:	71 f0       	breq	.+28     	; 0x1c00 <parseDHCPMSG+0x1a6>
    1be4:	20 f4       	brcc	.+8      	; 0x1bee <parseDHCPMSG+0x194>
    1be6:	93 33       	cpi	r25, 0x33	; 51
    1be8:	09 f4       	brne	.+2      	; 0x1bec <parseDHCPMSG+0x192>
    1bea:	50 c0       	rjmp	.+160    	; 0x1c8c <parseDHCPMSG+0x232>
    1bec:	7d c0       	rjmp	.+250    	; 0x1ce8 <parseDHCPMSG+0x28e>
    1bee:	96 33       	cpi	r25, 0x36	; 54
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <parseDHCPMSG+0x19a>
    1bf2:	5a c0       	rjmp	.+180    	; 0x1ca8 <parseDHCPMSG+0x24e>
    1bf4:	9f 3f       	cpi	r25, 0xFF	; 255
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <parseDHCPMSG+0x1a0>
    1bf8:	7f c0       	rjmp	.+254    	; 0x1cf8 <parseDHCPMSG+0x29e>
    1bfa:	76 c0       	rjmp	.+236    	; 0x1ce8 <parseDHCPMSG+0x28e>
    1bfc:	31 96       	adiw	r30, 0x01	; 1
    1bfe:	7d c0       	rjmp	.+250    	; 0x1cfa <parseDHCPMSG+0x2a0>
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	33 96       	adiw	r30, 0x03	; 3
    1c04:	7a c0       	rjmp	.+244    	; 0x1cfa <parseDHCPMSG+0x2a0>
    1c06:	92 81       	ldd	r25, Z+2	; 0x02
    1c08:	a2 ec       	ldi	r26, 0xC2	; 194
    1c0a:	b3 e0       	ldi	r27, 0x03	; 3
    1c0c:	9c 93       	st	X, r25
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	11 96       	adiw	r26, 0x01	; 1
    1c12:	9c 93       	st	X, r25
    1c14:	11 97       	sbiw	r26, 0x01	; 1
    1c16:	94 81       	ldd	r25, Z+4	; 0x04
    1c18:	12 96       	adiw	r26, 0x02	; 2
    1c1a:	9c 93       	st	X, r25
    1c1c:	12 97       	sbiw	r26, 0x02	; 2
    1c1e:	95 81       	ldd	r25, Z+5	; 0x05
    1c20:	13 96       	adiw	r26, 0x03	; 3
    1c22:	9c 93       	st	X, r25
    1c24:	36 96       	adiw	r30, 0x06	; 6
    1c26:	69 c0       	rjmp	.+210    	; 0x1cfa <parseDHCPMSG+0x2a0>
    1c28:	91 81       	ldd	r25, Z+1	; 0x01
    1c2a:	22 81       	ldd	r18, Z+2	; 0x02
    1c2c:	a6 ec       	ldi	r26, 0xC6	; 198
    1c2e:	b3 e0       	ldi	r27, 0x03	; 3
    1c30:	2c 93       	st	X, r18
    1c32:	23 81       	ldd	r18, Z+3	; 0x03
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	2c 93       	st	X, r18
    1c38:	11 97       	sbiw	r26, 0x01	; 1
    1c3a:	24 81       	ldd	r18, Z+4	; 0x04
    1c3c:	12 96       	adiw	r26, 0x02	; 2
    1c3e:	2c 93       	st	X, r18
    1c40:	12 97       	sbiw	r26, 0x02	; 2
    1c42:	9f 01       	movw	r18, r30
    1c44:	2a 5f       	subi	r18, 0xFA	; 250
    1c46:	3f 4f       	sbci	r19, 0xFF	; 255
    1c48:	45 81       	ldd	r20, Z+5	; 0x05
    1c4a:	13 96       	adiw	r26, 0x03	; 3
    1c4c:	4c 93       	st	X, r20
    1c4e:	e9 2f       	mov	r30, r25
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	34 97       	sbiw	r30, 0x04	; 4
    1c54:	e2 0f       	add	r30, r18
    1c56:	f3 1f       	adc	r31, r19
    1c58:	50 c0       	rjmp	.+160    	; 0x1cfa <parseDHCPMSG+0x2a0>
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	22 81       	ldd	r18, Z+2	; 0x02
    1c5e:	ae eb       	ldi	r26, 0xBE	; 190
    1c60:	b3 e0       	ldi	r27, 0x03	; 3
    1c62:	2c 93       	st	X, r18
    1c64:	23 81       	ldd	r18, Z+3	; 0x03
    1c66:	11 96       	adiw	r26, 0x01	; 1
    1c68:	2c 93       	st	X, r18
    1c6a:	11 97       	sbiw	r26, 0x01	; 1
    1c6c:	24 81       	ldd	r18, Z+4	; 0x04
    1c6e:	12 96       	adiw	r26, 0x02	; 2
    1c70:	2c 93       	st	X, r18
    1c72:	12 97       	sbiw	r26, 0x02	; 2
    1c74:	9f 01       	movw	r18, r30
    1c76:	2a 5f       	subi	r18, 0xFA	; 250
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	45 81       	ldd	r20, Z+5	; 0x05
    1c7c:	13 96       	adiw	r26, 0x03	; 3
    1c7e:	4c 93       	st	X, r20
    1c80:	e9 2f       	mov	r30, r25
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	34 97       	sbiw	r30, 0x04	; 4
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	37 c0       	rjmp	.+110    	; 0x1cfa <parseDHCPMSG+0x2a0>
    1c8c:	4a e0       	ldi	r20, 0x0A	; 10
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <dhcp_lease_time>
    1c98:	50 93 2f 01 	sts	0x012F, r21	; 0x80012f <dhcp_lease_time+0x1>
    1c9c:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <dhcp_lease_time+0x2>
    1ca0:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <dhcp_lease_time+0x3>
    1ca4:	36 96       	adiw	r30, 0x06	; 6
    1ca6:	29 c0       	rjmp	.+82     	; 0x1cfa <parseDHCPMSG+0x2a0>
    1ca8:	92 81       	ldd	r25, Z+2	; 0x02
    1caa:	ad e0       	ldi	r26, 0x0D	; 13
    1cac:	bc e0       	ldi	r27, 0x0C	; 12
    1cae:	9c 93       	st	X, r25
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	11 96       	adiw	r26, 0x01	; 1
    1cb4:	9c 93       	st	X, r25
    1cb6:	11 97       	sbiw	r26, 0x01	; 1
    1cb8:	94 81       	ldd	r25, Z+4	; 0x04
    1cba:	12 96       	adiw	r26, 0x02	; 2
    1cbc:	9c 93       	st	X, r25
    1cbe:	12 97       	sbiw	r26, 0x02	; 2
    1cc0:	95 81       	ldd	r25, Z+5	; 0x05
    1cc2:	13 96       	adiw	r26, 0x03	; 3
    1cc4:	9c 93       	st	X, r25
    1cc6:	99 81       	ldd	r25, Y+1	; 0x01
    1cc8:	a9 e0       	ldi	r26, 0x09	; 9
    1cca:	bc e0       	ldi	r27, 0x0C	; 12
    1ccc:	9c 93       	st	X, r25
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	11 96       	adiw	r26, 0x01	; 1
    1cd2:	9c 93       	st	X, r25
    1cd4:	11 97       	sbiw	r26, 0x01	; 1
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	12 96       	adiw	r26, 0x02	; 2
    1cda:	9c 93       	st	X, r25
    1cdc:	12 97       	sbiw	r26, 0x02	; 2
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	13 96       	adiw	r26, 0x03	; 3
    1ce2:	9c 93       	st	X, r25
    1ce4:	36 96       	adiw	r30, 0x06	; 6
    1ce6:	09 c0       	rjmp	.+18     	; 0x1cfa <parseDHCPMSG+0x2a0>
    1ce8:	9f 01       	movw	r18, r30
    1cea:	2e 5f       	subi	r18, 0xFE	; 254
    1cec:	3f 4f       	sbci	r19, 0xFF	; 255
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	e9 0f       	add	r30, r25
    1cf4:	f1 1d       	adc	r31, r1
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <parseDHCPMSG+0x2a0>
    1cf8:	f6 01       	movw	r30, r12
    1cfa:	ec 15       	cp	r30, r12
    1cfc:	fd 05       	cpc	r31, r13
    1cfe:	08 f4       	brcc	.+2      	; 0x1d02 <parseDHCPMSG+0x2a8>
    1d00:	64 cf       	rjmp	.-312    	; 0x1bca <parseDHCPMSG+0x170>
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <parseDHCPMSG+0x2b0>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <parseDHCPMSG+0x2b0>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	28 96       	adiw	r28, 0x08	; 8
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
    1d22:	df 90       	pop	r13
    1d24:	cf 90       	pop	r12
    1d26:	08 95       	ret

00001d28 <check_DHCP_leasedIP>:
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	6e e1       	ldi	r22, 0x1E	; 30
    1d3a:	70 e8       	ldi	r23, 0x80	; 128
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	ac d8       	rcall	.-3752   	; 0xe9a <WIZCHIP_READ>
    1d42:	ec 01       	movw	r28, r24
    1d44:	43 e0       	ldi	r20, 0x03	; 3
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	6e e1       	ldi	r22, 0x1E	; 30
    1d4a:	70 e8       	ldi	r23, 0x80	; 128
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	71 d8       	rcall	.-3870   	; 0xe34 <WIZCHIP_WRITE>
    1d52:	08 e8       	ldi	r16, 0x88	; 136
    1d54:	13 e1       	ldi	r17, 0x13	; 19
    1d56:	2a ec       	ldi	r18, 0xCA	; 202
    1d58:	33 e0       	ldi	r19, 0x03	; 3
    1d5a:	41 e1       	ldi	r20, 0x11	; 17
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	6a e0       	ldi	r22, 0x0A	; 10
    1d60:	72 e0       	ldi	r23, 0x02	; 2
    1d62:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <DHCP_SOCKET>
    1d66:	0e 94 c7 00 	call	0x18e	; 0x18e <sendto>
    1d6a:	6b 01       	movw	r12, r22
    1d6c:	7c 01       	movw	r14, r24
    1d6e:	ae 01       	movw	r20, r28
    1d70:	55 27       	eor	r21, r21
    1d72:	6e e1       	ldi	r22, 0x1E	; 30
    1d74:	70 e8       	ldi	r23, 0x80	; 128
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	5c d8       	rcall	.-3912   	; 0xe34 <WIZCHIP_WRITE>
    1d7c:	83 ef       	ldi	r24, 0xF3	; 243
    1d7e:	c8 16       	cp	r12, r24
    1d80:	8f ef       	ldi	r24, 0xFF	; 255
    1d82:	d8 06       	cpc	r13, r24
    1d84:	e8 06       	cpc	r14, r24
    1d86:	f8 06       	cpc	r15, r24
    1d88:	29 f4       	brne	.+10     	; 0x1d94 <check_DHCP_leasedIP+0x6c>
    1d8a:	8c e1       	ldi	r24, 0x1C	; 28
    1d8c:	92 e0       	ldi	r25, 0x02	; 2
    1d8e:	29 d7       	rcall	.+3666   	; 0x2be2 <puts>
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	1a c0       	rjmp	.+52     	; 0x1dc8 <check_DHCP_leasedIP+0xa0>
    1d94:	a6 dd       	rcall	.-1204   	; 0x18e2 <send_DHCP_DECLINE>
    1d96:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <dhcp_tick_1s>
    1d9a:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <dhcp_tick_1s+0x1>
    1d9e:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <dhcp_tick_1s+0x2>
    1da2:	70 91 bb 03 	lds	r23, 0x03BB	; 0x8003bb <dhcp_tick_1s+0x3>
    1da6:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <dhcp_tick_1s>
    1daa:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <dhcp_tick_1s+0x1>
    1dae:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <dhcp_tick_1s+0x2>
    1db2:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <dhcp_tick_1s+0x3>
    1db6:	84 1b       	sub	r24, r20
    1db8:	95 0b       	sbc	r25, r21
    1dba:	a6 0b       	sbc	r26, r22
    1dbc:	b7 0b       	sbc	r27, r23
    1dbe:	02 97       	sbiw	r24, 0x02	; 2
    1dc0:	a1 05       	cpc	r26, r1
    1dc2:	b1 05       	cpc	r27, r1
    1dc4:	80 f3       	brcs	.-32     	; 0x1da6 <check_DHCP_leasedIP+0x7e>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	08 95       	ret

00001dda <reset_DHCP_timeout>:
    1dda:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <dhcp_tick_1s>
    1dde:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <dhcp_tick_1s+0x1>
    1de2:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <dhcp_tick_1s+0x2>
    1de6:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <dhcp_tick_1s+0x3>
    1dea:	8a e0       	ldi	r24, 0x0A	; 10
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e0       	ldi	r26, 0x00	; 0
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dhcp_tick_next>
    1df6:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <dhcp_tick_next+0x1>
    1dfa:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <dhcp_tick_next+0x2>
    1dfe:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <dhcp_tick_next+0x3>
    1e02:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <dhcp_retry_count>
    1e06:	08 95       	ret

00001e08 <DHCP_init>:
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	f8 2e       	mov	r15, r24
    1e14:	8b 01       	movw	r16, r22
    1e16:	68 e0       	ldi	r22, 0x08	; 8
    1e18:	70 e8       	ldi	r23, 0x80	; 128
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	3d d8       	rcall	.-3974   	; 0xe9a <WIZCHIP_READ>
    1e20:	cf ef       	ldi	r28, 0xFF	; 255
    1e22:	db e0       	ldi	r29, 0x0B	; 11
    1e24:	98 83       	st	Y, r25
    1e26:	68 e0       	ldi	r22, 0x08	; 8
    1e28:	70 e8       	ldi	r23, 0x80	; 128
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	35 d8       	rcall	.-3990   	; 0xe9a <WIZCHIP_READ>
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	6a e0       	ldi	r22, 0x0A	; 10
    1e34:	70 e8       	ldi	r23, 0x80	; 128
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	2f d8       	rcall	.-4002   	; 0xe9a <WIZCHIP_READ>
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	6a e0       	ldi	r22, 0x0A	; 10
    1e40:	70 e8       	ldi	r23, 0x80	; 128
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	29 d8       	rcall	.-4014   	; 0xe9a <WIZCHIP_READ>
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	6c e0       	ldi	r22, 0x0C	; 12
    1e4c:	70 e8       	ldi	r23, 0x80	; 128
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	23 d8       	rcall	.-4026   	; 0xe9a <WIZCHIP_READ>
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	6c e0       	ldi	r22, 0x0C	; 12
    1e58:	70 e8       	ldi	r23, 0x80	; 128
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	1d d8       	rcall	.-4038   	; 0xe9a <WIZCHIP_READ>
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	58 81       	ld	r21, Y
    1e64:	99 81       	ldd	r25, Y+1	; 0x01
    1e66:	4a 81       	ldd	r20, Y+2	; 0x02
    1e68:	3b 81       	ldd	r19, Y+3	; 0x03
    1e6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6c:	95 2b       	or	r25, r21
    1e6e:	94 2b       	or	r25, r20
    1e70:	93 2b       	or	r25, r19
    1e72:	92 2b       	or	r25, r18
    1e74:	89 2b       	or	r24, r25
    1e76:	71 f5       	brne	.+92     	; 0x1ed4 <DHCP_init+0xcc>
    1e78:	84 ee       	ldi	r24, 0xE4	; 228
    1e7a:	88 83       	st	Y, r24
    1e7c:	8d e8       	ldi	r24, 0x8D	; 141
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	8c e8       	ldi	r24, 0x8C	; 140
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	8e e4       	ldi	r24, 0x4E	; 78
    1e86:	8b 83       	std	Y+3, r24	; 0x03
    1e88:	80 ee       	ldi	r24, 0xE0	; 224
    1e8a:	8c 83       	std	Y+4, r24	; 0x04
    1e8c:	83 e1       	ldi	r24, 0x13	; 19
    1e8e:	8d 83       	std	Y+5, r24	; 0x05
    1e90:	4d e8       	ldi	r20, 0x8D	; 141
    1e92:	54 ee       	ldi	r21, 0xE4	; 228
    1e94:	68 e0       	ldi	r22, 0x08	; 8
    1e96:	70 e8       	ldi	r23, 0x80	; 128
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 1a 07 	call	0xe34	; 0xe34 <WIZCHIP_WRITE>
    1ea0:	4a 81       	ldd	r20, Y+2	; 0x02
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	54 2f       	mov	r21, r20
    1ea6:	44 27       	eor	r20, r20
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	48 0f       	add	r20, r24
    1eac:	51 1d       	adc	r21, r1
    1eae:	6a e0       	ldi	r22, 0x0A	; 10
    1eb0:	70 e8       	ldi	r23, 0x80	; 128
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 1a 07 	call	0xe34	; 0xe34 <WIZCHIP_WRITE>
    1eba:	4c 81       	ldd	r20, Y+4	; 0x04
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	54 2f       	mov	r21, r20
    1ec0:	44 27       	eor	r20, r20
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	48 0f       	add	r20, r24
    1ec6:	51 1d       	adc	r21, r1
    1ec8:	6c e0       	ldi	r22, 0x0C	; 12
    1eca:	70 e8       	ldi	r23, 0x80	; 128
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 1a 07 	call	0xe34	; 0xe34 <WIZCHIP_WRITE>
    1ed4:	f0 92 13 0c 	sts	0x0C13, r15	; 0x800c13 <DHCP_SOCKET>
    1ed8:	10 93 12 0c 	sts	0x0C12, r17	; 0x800c12 <pDHCPMSG+0x1>
    1edc:	00 93 11 0c 	sts	0x0C11, r16	; 0x800c11 <pDHCPMSG>
    1ee0:	ef ef       	ldi	r30, 0xFF	; 255
    1ee2:	fb e0       	ldi	r31, 0x0B	; 11
    1ee4:	43 81       	ldd	r20, Z+3	; 0x03
    1ee6:	84 2f       	mov	r24, r20
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e0       	ldi	r26, 0x00	; 0
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	88 58       	subi	r24, 0x88	; 136
    1ef0:	99 4a       	sbci	r25, 0xA9	; 169
    1ef2:	ab 4c       	sbci	r26, 0xCB	; 203
    1ef4:	bd 4e       	sbci	r27, 0xED	; 237
    1ef6:	34 81       	ldd	r19, Z+4	; 0x04
    1ef8:	83 0f       	add	r24, r19
    1efa:	91 1d       	adc	r25, r1
    1efc:	a1 1d       	adc	r26, r1
    1efe:	b1 1d       	adc	r27, r1
    1f00:	25 81       	ldd	r18, Z+5	; 0x05
    1f02:	82 0f       	add	r24, r18
    1f04:	91 1d       	adc	r25, r1
    1f06:	a1 1d       	adc	r26, r1
    1f08:	b1 1d       	adc	r27, r1
    1f0a:	34 27       	eor	r19, r20
    1f0c:	23 27       	eor	r18, r19
    1f0e:	82 0f       	add	r24, r18
    1f10:	91 1d       	adc	r25, r1
    1f12:	a1 1d       	adc	r26, r1
    1f14:	b1 1d       	adc	r27, r1
    1f16:	80 93 05 0c 	sts	0x0C05, r24	; 0x800c05 <DHCP_XID>
    1f1a:	90 93 06 0c 	sts	0x0C06, r25	; 0x800c06 <DHCP_XID+0x1>
    1f1e:	a0 93 07 0c 	sts	0x0C07, r26	; 0x800c07 <DHCP_XID+0x2>
    1f22:	b0 93 08 0c 	sts	0x0C08, r27	; 0x800c08 <DHCP_XID+0x3>
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	68 e1       	ldi	r22, 0x18	; 24
    1f2c:	70 e8       	ldi	r23, 0x80	; 128
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 1a 07 	call	0xe34	; 0xe34 <WIZCHIP_WRITE>
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	6a e1       	ldi	r22, 0x1A	; 26
    1f3c:	70 e8       	ldi	r23, 0x80	; 128
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 1a 07 	call	0xe34	; 0xe34 <WIZCHIP_WRITE>
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	60 e1       	ldi	r22, 0x10	; 16
    1f4c:	70 e8       	ldi	r23, 0x80	; 128
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 1a 07 	call	0xe34	; 0xe34 <WIZCHIP_WRITE>
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	62 e1       	ldi	r22, 0x12	; 18
    1f5c:	70 e8       	ldi	r23, 0x80	; 128
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 1a 07 	call	0xe34	; 0xe34 <WIZCHIP_WRITE>
    1f66:	39 df       	rcall	.-398    	; 0x1dda <reset_DHCP_timeout>
    1f68:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <dhcp_state>
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	ff 90       	pop	r15
    1f76:	08 95       	ret

00001f78 <DHCP_time_handler>:
    1f78:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <dhcp_tick_1s>
    1f7c:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <dhcp_tick_1s+0x1>
    1f80:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <dhcp_tick_1s+0x2>
    1f84:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <dhcp_tick_1s+0x3>
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	a1 1d       	adc	r26, r1
    1f8c:	b1 1d       	adc	r27, r1
    1f8e:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <dhcp_tick_1s>
    1f92:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <dhcp_tick_1s+0x1>
    1f96:	a0 93 ba 03 	sts	0x03BA, r26	; 0x8003ba <dhcp_tick_1s+0x2>
    1f9a:	b0 93 bb 03 	sts	0x03BB, r27	; 0x8003bb <dhcp_tick_1s+0x3>
    1f9e:	08 95       	ret

00001fa0 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
  nibble &= 0x0F;
    1fa0:	8f 70       	andi	r24, 0x0F	; 15
  if (nibble <= 9)
    1fa2:	8a 30       	cpi	r24, 0x0A	; 10
    1fa4:	10 f4       	brcc	.+4      	; 0x1faa <NibbleToHex+0xa>
    return nibble + '0';
    1fa6:	80 5d       	subi	r24, 0xD0	; 208
    1fa8:	08 95       	ret
  else 
    return nibble + ('A'-0x0A);
    1faa:	89 5c       	subi	r24, 0xC9	; 201
}
    1fac:	08 95       	ret

00001fae <send_DHCP_DISCOVER>:
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
}

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
    1fae:	5f 92       	push	r5
    1fb0:	6f 92       	push	r6
    1fb2:	7f 92       	push	r7
    1fb4:	8f 92       	push	r8
    1fb6:	9f 92       	push	r9
    1fb8:	af 92       	push	r10
    1fba:	bf 92       	push	r11
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <send_DHCP_DISCOVER+0x20>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <send_DHCP_DISCOVER+0x22>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
   
   makeDHCPMSG();
    1fd4:	bd db       	rcall	.-2182   	; 0x1750 <makeDHCPMSG>
   DHCP_SIP[0]=0;
    1fd6:	ed e0       	ldi	r30, 0x0D	; 13
    1fd8:	fc e0       	ldi	r31, 0x0C	; 12
    1fda:	10 82       	st	Z, r1
   DHCP_SIP[1]=0;
    1fdc:	11 82       	std	Z+1, r1	; 0x01
   DHCP_SIP[2]=0;
    1fde:	12 82       	std	Z+2, r1	; 0x02
   DHCP_SIP[3]=0;
    1fe0:	13 82       	std	Z+3, r1	; 0x03
   DHCP_REAL_SIP[0]=0;
    1fe2:	e9 e0       	ldi	r30, 0x09	; 9
    1fe4:	fc e0       	ldi	r31, 0x0C	; 12
    1fe6:	10 82       	st	Z, r1
   DHCP_REAL_SIP[1]=0;
    1fe8:	11 82       	std	Z+1, r1	; 0x01
   DHCP_REAL_SIP[2]=0;
    1fea:	12 82       	std	Z+2, r1	; 0x02
   DHCP_REAL_SIP[3]=0;
    1fec:	13 82       	std	Z+3, r1	; 0x03

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
    1fee:	e0 90 11 0c 	lds	r14, 0x0C11	; 0x800c11 <pDHCPMSG>
    1ff2:	f0 90 12 0c 	lds	r15, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    1ff6:	f7 01       	movw	r30, r14
    1ff8:	e0 51       	subi	r30, 0x10	; 16
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	85 e3       	ldi	r24, 0x35	; 53
    1ffe:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0x01;
    2000:	31 96       	adiw	r30, 0x01	; 1
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
    2006:	31 96       	adiw	r30, 0x01	; 1
    2008:	80 83       	st	Z, r24
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
    200a:	31 96       	adiw	r30, 0x01	; 1
    200c:	9d e3       	ldi	r25, 0x3D	; 61
    200e:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x07;
    2010:	31 96       	adiw	r30, 0x01	; 1
    2012:	97 e0       	ldi	r25, 0x07	; 7
    2014:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x01;
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
    201a:	ef ef       	ldi	r30, 0xFF	; 255
    201c:	fb e0       	ldi	r31, 0x0B	; 11
    201e:	80 81       	ld	r24, Z
    2020:	d7 01       	movw	r26, r14
    2022:	aa 50       	subi	r26, 0x0A	; 10
    2024:	bf 4f       	sbci	r27, 0xFF	; 255
    2026:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
    2028:	81 81       	ldd	r24, Z+1	; 0x01
    202a:	11 96       	adiw	r26, 0x01	; 1
    202c:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	11 96       	adiw	r26, 0x01	; 1
    2032:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
    2034:	53 80       	ldd	r5, Z+3	; 0x03
    2036:	11 96       	adiw	r26, 0x01	; 1
    2038:	5c 92       	st	X, r5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
    203a:	64 80       	ldd	r6, Z+4	; 0x04
    203c:	11 96       	adiw	r26, 0x01	; 1
    203e:	6c 92       	st	X, r6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    2040:	75 80       	ldd	r7, Z+5	; 0x05
    2042:	f7 01       	movw	r30, r14
    2044:	e5 50       	subi	r30, 0x05	; 5
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	70 82       	st	Z, r7
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
    204a:	31 96       	adiw	r30, 0x01	; 1
    204c:	8c e0       	ldi	r24, 0x0C	; 12
    204e:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
    2050:	31 96       	adiw	r30, 0x01	; 1
    2052:	10 82       	st	Z, r1
    2054:	02 e1       	ldi	r16, 0x12	; 18
    2056:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    2058:	c1 2c       	mov	r12, r1
    205a:	d1 2c       	mov	r13, r1
    205c:	0b c0       	rjmp	.+22     	; 0x2074 <send_DHCP_DISCOVER+0xc6>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    205e:	f7 01       	movw	r30, r14
    2060:	e0 0f       	add	r30, r16
    2062:	f1 1f       	adc	r31, r17
    2064:	e4 51       	subi	r30, 0x14	; 20
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    206a:	8f ef       	ldi	r24, 0xFF	; 255
    206c:	c8 1a       	sub	r12, r24
    206e:	d8 0a       	sbc	r13, r24
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    2070:	0f 5f       	subi	r16, 0xFF	; 255
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    2074:	f6 01       	movw	r30, r12
    2076:	ee 5d       	subi	r30, 0xDE	; 222
    2078:	fe 4f       	sbci	r31, 0xFE	; 254
    207a:	80 81       	ld	r24, Z
    207c:	81 11       	cpse	r24, r1
    207e:	ef cf       	rjmp	.-34     	; 0x205e <send_DHCP_DISCOVER+0xb0>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
    2080:	48 01       	movw	r8, r16
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	88 1a       	sub	r8, r24
    2086:	98 0a       	sbc	r9, r24
    2088:	85 2d       	mov	r24, r5
    208a:	82 95       	swap	r24
    208c:	8f 70       	andi	r24, 0x0F	; 15
    208e:	88 df       	rcall	.-240    	; 0x1fa0 <NibbleToHex>
    2090:	f7 01       	movw	r30, r14
    2092:	e0 0f       	add	r30, r16
    2094:	f1 1f       	adc	r31, r17
    2096:	e4 51       	subi	r30, 0x14	; 20
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
    209c:	58 01       	movw	r10, r16
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	a8 0e       	add	r10, r24
    20a2:	b1 1c       	adc	r11, r1
    20a4:	85 2d       	mov	r24, r5
    20a6:	7c df       	rcall	.-264    	; 0x1fa0 <NibbleToHex>
    20a8:	8e 0c       	add	r8, r14
    20aa:	9f 1c       	adc	r9, r15
    20ac:	f4 01       	movw	r30, r8
    20ae:	e4 51       	subi	r30, 0x14	; 20
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
    20b4:	48 01       	movw	r8, r16
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	88 0e       	add	r8, r24
    20ba:	91 1c       	adc	r9, r1
    20bc:	86 2d       	mov	r24, r6
    20be:	82 95       	swap	r24
    20c0:	8f 70       	andi	r24, 0x0F	; 15
    20c2:	6e df       	rcall	.-292    	; 0x1fa0 <NibbleToHex>
    20c4:	ae 0c       	add	r10, r14
    20c6:	bf 1c       	adc	r11, r15
    20c8:	f5 01       	movw	r30, r10
    20ca:	e4 51       	subi	r30, 0x14	; 20
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
    20d0:	58 01       	movw	r10, r16
    20d2:	84 e0       	ldi	r24, 0x04	; 4
    20d4:	a8 0e       	add	r10, r24
    20d6:	b1 1c       	adc	r11, r1
    20d8:	86 2d       	mov	r24, r6
    20da:	62 df       	rcall	.-316    	; 0x1fa0 <NibbleToHex>
    20dc:	8e 0c       	add	r8, r14
    20de:	9f 1c       	adc	r9, r15
    20e0:	f4 01       	movw	r30, r8
    20e2:	e4 51       	subi	r30, 0x14	; 20
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
    20e8:	48 01       	movw	r8, r16
    20ea:	85 e0       	ldi	r24, 0x05	; 5
    20ec:	88 0e       	add	r8, r24
    20ee:	91 1c       	adc	r9, r1
    20f0:	87 2d       	mov	r24, r7
    20f2:	82 95       	swap	r24
    20f4:	8f 70       	andi	r24, 0x0F	; 15
    20f6:	54 df       	rcall	.-344    	; 0x1fa0 <NibbleToHex>
    20f8:	ae 0c       	add	r10, r14
    20fa:	bf 1c       	adc	r11, r15
    20fc:	f5 01       	movw	r30, r10
    20fe:	e4 51       	subi	r30, 0x14	; 20
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
    2104:	58 01       	movw	r10, r16
    2106:	86 e0       	ldi	r24, 0x06	; 6
    2108:	a8 0e       	add	r10, r24
    210a:	b1 1c       	adc	r11, r1
    210c:	87 2d       	mov	r24, r7
    210e:	48 df       	rcall	.-368    	; 0x1fa0 <NibbleToHex>
    2110:	8e 0c       	add	r8, r14
    2112:	9f 1c       	adc	r9, r15
    2114:	f4 01       	movw	r30, r8
    2116:	e4 51       	subi	r30, 0x14	; 20
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 83       	st	Z, r24
    211c:	f5 01       	movw	r30, r10
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
    211e:	ec 19       	sub	r30, r12
    2120:	fd 09       	sbc	r31, r13
    2122:	37 97       	sbiw	r30, 0x07	; 7
    2124:	ee 0d       	add	r30, r14
    2126:	ff 1d       	adc	r31, r15
    2128:	e4 51       	subi	r30, 0x14	; 20
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	86 e0       	ldi	r24, 0x06	; 6
    212e:	8c 0d       	add	r24, r12
    2130:	80 83       	st	Z, r24
    2132:	d8 01       	movw	r26, r16

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
    2134:	17 96       	adiw	r26, 0x07	; 7
    2136:	ae 0c       	add	r10, r14
    2138:	bf 1c       	adc	r11, r15
    213a:	f5 01       	movw	r30, r10
    213c:	e4 51       	subi	r30, 0x14	; 20
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	87 e3       	ldi	r24, 0x37	; 55
    2142:	80 83       	st	Z, r24
    2144:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
    2146:	38 96       	adiw	r30, 0x08	; 8
    2148:	ae 0d       	add	r26, r14
    214a:	bf 1d       	adc	r27, r15
    214c:	a4 51       	subi	r26, 0x14	; 20
    214e:	bf 4f       	sbci	r27, 0xFF	; 255
    2150:	86 e0       	ldi	r24, 0x06	; 6
    2152:	8c 93       	st	X, r24
    2154:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = subnetMask;
    2156:	19 96       	adiw	r26, 0x09	; 9
    2158:	ee 0d       	add	r30, r14
    215a:	ff 1d       	adc	r31, r15
    215c:	e4 51       	subi	r30, 0x14	; 20
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	90 83       	st	Z, r25
    2164:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = routersOnSubnet;
    2166:	3a 96       	adiw	r30, 0x0a	; 10
    2168:	ae 0d       	add	r26, r14
    216a:	bf 1d       	adc	r27, r15
    216c:	a4 51       	subi	r26, 0x14	; 20
    216e:	bf 4f       	sbci	r27, 0xFF	; 255
    2170:	93 e0       	ldi	r25, 0x03	; 3
    2172:	9c 93       	st	X, r25
    2174:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = dns;
    2176:	1b 96       	adiw	r26, 0x0b	; 11
    2178:	ee 0d       	add	r30, r14
    217a:	ff 1d       	adc	r31, r15
    217c:	e4 51       	subi	r30, 0x14	; 20
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 83       	st	Z, r24
    2182:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = domainName;
    2184:	3c 96       	adiw	r30, 0x0c	; 12
    2186:	ae 0d       	add	r26, r14
    2188:	bf 1d       	adc	r27, r15
    218a:	a4 51       	subi	r26, 0x14	; 20
    218c:	bf 4f       	sbci	r27, 0xFF	; 255
    218e:	8f e0       	ldi	r24, 0x0F	; 15
    2190:	8c 93       	st	X, r24
    2192:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = dhcpT1value;
    2194:	1d 96       	adiw	r26, 0x0d	; 13
    2196:	ee 0d       	add	r30, r14
    2198:	ff 1d       	adc	r31, r15
    219a:	e4 51       	subi	r30, 0x14	; 20
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	8a e3       	ldi	r24, 0x3A	; 58
    21a0:	80 83       	st	Z, r24
    21a2:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = dhcpT2value;
    21a4:	3e 96       	adiw	r30, 0x0e	; 14
    21a6:	ae 0d       	add	r26, r14
    21a8:	bf 1d       	adc	r27, r15
    21aa:	a4 51       	subi	r26, 0x14	; 20
    21ac:	bf 4f       	sbci	r27, 0xFF	; 255
    21ae:	8b e3       	ldi	r24, 0x3B	; 59
    21b0:	8c 93       	st	X, r24
    21b2:	01 5f       	subi	r16, 0xF1	; 241
	pDHCPMSG->OPT[k++] = endOption;
    21b4:	1f 4f       	sbci	r17, 0xFF	; 255
    21b6:	ee 0d       	add	r30, r14
    21b8:	ff 1d       	adc	r31, r15
    21ba:	e4 51       	subi	r30, 0x14	; 20
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	8f ef       	ldi	r24, 0xFF	; 255
    21c0:	80 83       	st	Z, r24
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <send_DHCP_DISCOVER+0x226>

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
    21c4:	f7 01       	movw	r30, r14
    21c6:	e0 0f       	add	r30, r16
    21c8:	f1 1f       	adc	r31, r17
    21ca:	e4 51       	subi	r30, 0x14	; 20
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	10 82       	st	Z, r1
    21d0:	0f 5f       	subi	r16, 0xFF	; 255
    21d2:	1f 4f       	sbci	r17, 0xFF	; 255
    21d4:	08 33       	cpi	r16, 0x38	; 56
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	18 07       	cpc	r17, r24
    21da:	a0 f3       	brcs	.-24     	; 0x21c4 <send_DHCP_DISCOVER+0x216>
    21dc:	8f ef       	ldi	r24, 0xFF	; 255

	// send broadcasting packet
	ip[0] = 255;
    21de:	89 83       	std	Y+1, r24	; 0x01
	ip[1] = 255;
    21e0:	8a 83       	std	Y+2, r24	; 0x02
	ip[2] = 255;
    21e2:	8b 83       	std	Y+3, r24	; 0x03
	ip[3] = 255;
    21e4:	8c 83       	std	Y+4, r24	; 0x04

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
    21e6:	86 e3       	ldi	r24, 0x36	; 54
    21e8:	92 e0       	ldi	r25, 0x02	; 2
    21ea:	fb d4       	rcall	.+2550   	; 0x2be2 <puts>
    21ec:	60 91 11 0c 	lds	r22, 0x0C11	; 0x800c11 <pDHCPMSG>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
    21f0:	70 91 12 0c 	lds	r23, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    21f4:	03 e4       	ldi	r16, 0x43	; 67
    21f6:	10 e0       	ldi	r17, 0x00	; 0
    21f8:	9e 01       	movw	r18, r28
    21fa:	2f 5f       	subi	r18, 0xFF	; 255
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	44 e2       	ldi	r20, 0x24	; 36
    2200:	52 e0       	ldi	r21, 0x02	; 2
    2202:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <DHCP_SOCKET>
    2206:	0e 94 c7 00 	call	0x18e	; 0x18e <sendto>
    220a:	0f 90       	pop	r0
}
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	cf 90       	pop	r12
    2222:	bf 90       	pop	r11
    2224:	af 90       	pop	r10
    2226:	9f 90       	pop	r9
    2228:	8f 90       	pop	r8
    222a:	7f 90       	pop	r7
    222c:	6f 90       	pop	r6
    222e:	5f 90       	pop	r5
    2230:	08 95       	ret

00002232 <send_DHCP_REQUEST>:
    2232:	5f 92       	push	r5

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
    2234:	6f 92       	push	r6
    2236:	7f 92       	push	r7
    2238:	8f 92       	push	r8
    223a:	9f 92       	push	r9
    223c:	af 92       	push	r10
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	00 d0       	rcall	.+0      	; 0x2252 <send_DHCP_REQUEST+0x20>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <send_DHCP_REQUEST+0x22>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
	int i;
	uint8_t ip[4];
	uint16_t k = 0;

   makeDHCPMSG();
    2258:	7b da       	rcall	.-2826   	; 0x1750 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
    225a:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <dhcp_state>
    225e:	83 50       	subi	r24, 0x03	; 3
    2260:	82 30       	cpi	r24, 0x02	; 2
    2262:	00 f5       	brcc	.+64     	; 0x22a4 <send_DHCP_REQUEST+0x72>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
    2264:	e0 91 11 0c 	lds	r30, 0x0C11	; 0x800c11 <pDHCPMSG>
    2268:	f0 91 12 0c 	lds	r31, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    226c:	12 86       	std	Z+10, r1	; 0x0a
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
    226e:	13 86       	std	Z+11, r1	; 0x0b
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
    2270:	aa ec       	ldi	r26, 0xCA	; 202
    2272:	b3 e0       	ldi	r27, 0x03	; 3
    2274:	8c 91       	ld	r24, X
    2276:	84 87       	std	Z+12, r24	; 0x0c
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
    2278:	11 96       	adiw	r26, 0x01	; 1
    227a:	8c 91       	ld	r24, X
    227c:	11 97       	sbiw	r26, 0x01	; 1
    227e:	85 87       	std	Z+13, r24	; 0x0d
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
    2280:	12 96       	adiw	r26, 0x02	; 2
    2282:	8c 91       	ld	r24, X
    2284:	12 97       	sbiw	r26, 0x02	; 2
    2286:	86 87       	std	Z+14, r24	; 0x0e
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
    2288:	13 96       	adiw	r26, 0x03	; 3
    228a:	8c 91       	ld	r24, X
    228c:	87 87       	std	Z+15, r24	; 0x0f
   	ip[0] = DHCP_SIP[0];
    228e:	ed e0       	ldi	r30, 0x0D	; 13
    2290:	fc e0       	ldi	r31, 0x0C	; 12
    2292:	80 81       	ld	r24, Z
    2294:	89 83       	std	Y+1, r24	; 0x01
   	ip[1] = DHCP_SIP[1];
    2296:	81 81       	ldd	r24, Z+1	; 0x01
    2298:	8a 83       	std	Y+2, r24	; 0x02
   	ip[2] = DHCP_SIP[2];
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	8b 83       	std	Y+3, r24	; 0x03
   	ip[3] = DHCP_SIP[3];   	   	   	
    229e:	83 81       	ldd	r24, Z+3	; 0x03
    22a0:	8c 83       	std	Y+4, r24	; 0x04
    22a2:	05 c0       	rjmp	.+10     	; 0x22ae <send_DHCP_REQUEST+0x7c>
   }
   else
   {
   	ip[0] = 255;
    22a4:	8f ef       	ldi	r24, 0xFF	; 255
    22a6:	89 83       	std	Y+1, r24	; 0x01
   	ip[1] = 255;
    22a8:	8a 83       	std	Y+2, r24	; 0x02
   	ip[2] = 255;
    22aa:	8b 83       	std	Y+3, r24	; 0x03
   	ip[3] = 255;   	   	   	
    22ac:	8c 83       	std	Y+4, r24	; 0x04
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
    22ae:	e0 90 11 0c 	lds	r14, 0x0C11	; 0x800c11 <pDHCPMSG>
    22b2:	f0 90 12 0c 	lds	r15, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    22b6:	f7 01       	movw	r30, r14
    22b8:	e0 51       	subi	r30, 0x10	; 16
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	85 e3       	ldi	r24, 0x35	; 53
    22be:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0x01;
    22c0:	31 96       	adiw	r30, 0x01	; 1
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
    22c6:	31 96       	adiw	r30, 0x01	; 1
    22c8:	93 e0       	ldi	r25, 0x03	; 3
    22ca:	90 83       	st	Z, r25

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
    22cc:	31 96       	adiw	r30, 0x01	; 1
    22ce:	9d e3       	ldi	r25, 0x3D	; 61
    22d0:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x07;
    22d2:	31 96       	adiw	r30, 0x01	; 1
    22d4:	97 e0       	ldi	r25, 0x07	; 7
    22d6:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x01;
    22d8:	31 96       	adiw	r30, 0x01	; 1
    22da:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
    22dc:	ef ef       	ldi	r30, 0xFF	; 255
    22de:	fb e0       	ldi	r31, 0x0B	; 11
    22e0:	80 81       	ld	r24, Z
    22e2:	d7 01       	movw	r26, r14
    22e4:	aa 50       	subi	r26, 0x0A	; 10
    22e6:	bf 4f       	sbci	r27, 0xFF	; 255
    22e8:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
    22ea:	81 81       	ldd	r24, Z+1	; 0x01
    22ec:	11 96       	adiw	r26, 0x01	; 1
    22ee:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	11 96       	adiw	r26, 0x01	; 1
    22f4:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
    22f6:	53 80       	ldd	r5, Z+3	; 0x03
    22f8:	11 96       	adiw	r26, 0x01	; 1
    22fa:	5c 92       	st	X, r5
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
    22fc:	64 80       	ldd	r6, Z+4	; 0x04
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	6c 92       	st	X, r6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    2302:	75 80       	ldd	r7, Z+5	; 0x05
    2304:	f7 01       	movw	r30, r14
    2306:	e5 50       	subi	r30, 0x05	; 5
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	70 82       	st	Z, r7

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	8f 3f       	cpi	r24, 0xFF	; 255
    2310:	71 f5       	brne	.+92     	; 0x236e <send_DHCP_REQUEST+0x13c>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
    2312:	82 e3       	ldi	r24, 0x32	; 50
    2314:	31 96       	adiw	r30, 0x01	; 1
    2316:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = 0x04;
    2318:	84 e0       	ldi	r24, 0x04	; 4
    231a:	31 96       	adiw	r30, 0x01	; 1
    231c:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
    231e:	ea ec       	ldi	r30, 0xCA	; 202
    2320:	f3 e0       	ldi	r31, 0x03	; 3
    2322:	90 81       	ld	r25, Z
    2324:	14 96       	adiw	r26, 0x04	; 4
    2326:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	11 96       	adiw	r26, 0x01	; 1
    232c:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
    232e:	92 81       	ldd	r25, Z+2	; 0x02
    2330:	11 96       	adiw	r26, 0x01	; 1
    2332:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	f7 01       	movw	r30, r14
    2338:	ef 5f       	subi	r30, 0xFF	; 255
    233a:	fe 4f       	sbci	r31, 0xFE	; 254
    233c:	90 83       	st	Z, r25
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
    233e:	96 e3       	ldi	r25, 0x36	; 54
    2340:	31 96       	adiw	r30, 0x01	; 1
    2342:	90 83       	st	Z, r25
		pDHCPMSG->OPT[k++] = 0x04;
    2344:	31 96       	adiw	r30, 0x01	; 1
    2346:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
    2348:	ed e0       	ldi	r30, 0x0D	; 13
    234a:	fc e0       	ldi	r31, 0x0C	; 12
    234c:	80 81       	ld	r24, Z
    234e:	14 96       	adiw	r26, 0x04	; 4
    2350:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	11 96       	adiw	r26, 0x01	; 1
    2356:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	11 96       	adiw	r26, 0x01	; 1
    235c:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
    235e:	83 81       	ldd	r24, Z+3	; 0x03
    2360:	f7 01       	movw	r30, r14
    2362:	e9 5f       	subi	r30, 0xF9	; 249
    2364:	fe 4f       	sbci	r31, 0xFE	; 254
    2366:	80 83       	st	Z, r24
    2368:	0c e1       	ldi	r16, 0x1C	; 28
    236a:	10 e0       	ldi	r17, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <send_DHCP_REQUEST+0x140>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    236e:	00 e1       	ldi	r16, 0x10	; 16
    2370:	10 e0       	ldi	r17, 0x00	; 0
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
    2372:	f8 01       	movw	r30, r16
    2374:	31 96       	adiw	r30, 0x01	; 1
    2376:	d7 01       	movw	r26, r14
    2378:	a0 0f       	add	r26, r16
    237a:	b1 1f       	adc	r27, r17
    237c:	a4 51       	subi	r26, 0x14	; 20
    237e:	bf 4f       	sbci	r27, 0xFF	; 255
    2380:	8c e0       	ldi	r24, 0x0C	; 12
    2382:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = 0; // length of hostname
    2384:	0e 5f       	subi	r16, 0xFE	; 254
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	ee 0d       	add	r30, r14
    238a:	ff 1d       	adc	r31, r15
    238c:	e4 51       	subi	r30, 0x14	; 20
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	10 82       	st	Z, r1
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    2392:	c1 2c       	mov	r12, r1
    2394:	d1 2c       	mov	r13, r1
    2396:	0b c0       	rjmp	.+22     	; 0x23ae <send_DHCP_REQUEST+0x17c>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    2398:	f7 01       	movw	r30, r14
    239a:	e0 0f       	add	r30, r16
    239c:	f1 1f       	adc	r31, r17
    239e:	e4 51       	subi	r30, 0x14	; 20
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 83       	st	Z, r24
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0; // length of hostname
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    23a4:	8f ef       	ldi	r24, 0xFF	; 255
    23a6:	c8 1a       	sub	r12, r24
    23a8:	d8 0a       	sbc	r13, r24
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    23aa:	0f 5f       	subi	r16, 0xFF	; 255
    23ac:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0; // length of hostname
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    23ae:	f6 01       	movw	r30, r12
    23b0:	ee 5d       	subi	r30, 0xDE	; 222
    23b2:	fe 4f       	sbci	r31, 0xFE	; 254
    23b4:	80 81       	ld	r24, Z
    23b6:	81 11       	cpse	r24, r1
    23b8:	ef cf       	rjmp	.-34     	; 0x2398 <send_DHCP_REQUEST+0x166>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
    23ba:	48 01       	movw	r8, r16
    23bc:	8f ef       	ldi	r24, 0xFF	; 255
    23be:	88 1a       	sub	r8, r24
    23c0:	98 0a       	sbc	r9, r24
    23c2:	85 2d       	mov	r24, r5
    23c4:	82 95       	swap	r24
    23c6:	8f 70       	andi	r24, 0x0F	; 15
    23c8:	eb dd       	rcall	.-1066   	; 0x1fa0 <NibbleToHex>
    23ca:	f7 01       	movw	r30, r14
    23cc:	e0 0f       	add	r30, r16
    23ce:	f1 1f       	adc	r31, r17
    23d0:	e4 51       	subi	r30, 0x14	; 20
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
    23d6:	58 01       	movw	r10, r16
    23d8:	82 e0       	ldi	r24, 0x02	; 2
    23da:	a8 0e       	add	r10, r24
    23dc:	b1 1c       	adc	r11, r1
    23de:	85 2d       	mov	r24, r5
    23e0:	df dd       	rcall	.-1090   	; 0x1fa0 <NibbleToHex>
    23e2:	8e 0c       	add	r8, r14
    23e4:	9f 1c       	adc	r9, r15
    23e6:	f4 01       	movw	r30, r8
    23e8:	e4 51       	subi	r30, 0x14	; 20
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
    23ee:	48 01       	movw	r8, r16
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	88 0e       	add	r8, r24
    23f4:	91 1c       	adc	r9, r1
    23f6:	86 2d       	mov	r24, r6
    23f8:	82 95       	swap	r24
    23fa:	8f 70       	andi	r24, 0x0F	; 15
    23fc:	d1 dd       	rcall	.-1118   	; 0x1fa0 <NibbleToHex>
    23fe:	ae 0c       	add	r10, r14
    2400:	bf 1c       	adc	r11, r15
    2402:	f5 01       	movw	r30, r10
    2404:	e4 51       	subi	r30, 0x14	; 20
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
    240a:	58 01       	movw	r10, r16
    240c:	84 e0       	ldi	r24, 0x04	; 4
    240e:	a8 0e       	add	r10, r24
    2410:	b1 1c       	adc	r11, r1
    2412:	86 2d       	mov	r24, r6
    2414:	c5 dd       	rcall	.-1142   	; 0x1fa0 <NibbleToHex>
    2416:	8e 0c       	add	r8, r14
    2418:	9f 1c       	adc	r9, r15
    241a:	f4 01       	movw	r30, r8
    241c:	e4 51       	subi	r30, 0x14	; 20
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
    2422:	48 01       	movw	r8, r16
    2424:	85 e0       	ldi	r24, 0x05	; 5
    2426:	88 0e       	add	r8, r24
    2428:	91 1c       	adc	r9, r1
    242a:	87 2d       	mov	r24, r7
    242c:	82 95       	swap	r24
    242e:	8f 70       	andi	r24, 0x0F	; 15
    2430:	b7 dd       	rcall	.-1170   	; 0x1fa0 <NibbleToHex>
    2432:	ae 0c       	add	r10, r14
    2434:	bf 1c       	adc	r11, r15
    2436:	f5 01       	movw	r30, r10
    2438:	e4 51       	subi	r30, 0x14	; 20
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
    243e:	58 01       	movw	r10, r16
    2440:	86 e0       	ldi	r24, 0x06	; 6
    2442:	a8 0e       	add	r10, r24
    2444:	b1 1c       	adc	r11, r1
    2446:	87 2d       	mov	r24, r7
    2448:	ab dd       	rcall	.-1194   	; 0x1fa0 <NibbleToHex>
    244a:	8e 0c       	add	r8, r14
    244c:	9f 1c       	adc	r9, r15
    244e:	f4 01       	movw	r30, r8
    2450:	e4 51       	subi	r30, 0x14	; 20
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 83       	st	Z, r24
    2456:	f5 01       	movw	r30, r10
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
    2458:	ec 19       	sub	r30, r12
    245a:	fd 09       	sbc	r31, r13
    245c:	37 97       	sbiw	r30, 0x07	; 7
    245e:	ee 0d       	add	r30, r14
    2460:	ff 1d       	adc	r31, r15
    2462:	e4 51       	subi	r30, 0x14	; 20
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	86 e0       	ldi	r24, 0x06	; 6
    2468:	8c 0d       	add	r24, r12
    246a:	80 83       	st	Z, r24
    246c:	d8 01       	movw	r26, r16
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
    246e:	17 96       	adiw	r26, 0x07	; 7
    2470:	ae 0c       	add	r10, r14
    2472:	bf 1c       	adc	r11, r15
    2474:	f5 01       	movw	r30, r10
    2476:	e4 51       	subi	r30, 0x14	; 20
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	87 e3       	ldi	r24, 0x37	; 55
    247c:	80 83       	st	Z, r24
    247e:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = 0x08;
    2480:	38 96       	adiw	r30, 0x08	; 8
    2482:	ae 0d       	add	r26, r14
    2484:	bf 1d       	adc	r27, r15
    2486:	a4 51       	subi	r26, 0x14	; 20
    2488:	bf 4f       	sbci	r27, 0xFF	; 255
    248a:	88 e0       	ldi	r24, 0x08	; 8
    248c:	8c 93       	st	X, r24
    248e:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = subnetMask;
    2490:	19 96       	adiw	r26, 0x09	; 9
    2492:	ee 0d       	add	r30, r14
    2494:	ff 1d       	adc	r31, r15
    2496:	e4 51       	subi	r30, 0x14	; 20
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	80 83       	st	Z, r24
    249e:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = routersOnSubnet;
    24a0:	3a 96       	adiw	r30, 0x0a	; 10
    24a2:	ae 0d       	add	r26, r14
    24a4:	bf 1d       	adc	r27, r15
    24a6:	a4 51       	subi	r26, 0x14	; 20
    24a8:	bf 4f       	sbci	r27, 0xFF	; 255
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	8c 93       	st	X, r24
    24ae:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = dns;
    24b0:	1b 96       	adiw	r26, 0x0b	; 11
    24b2:	ee 0d       	add	r30, r14
    24b4:	ff 1d       	adc	r31, r15
    24b6:	e4 51       	subi	r30, 0x14	; 20
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	86 e0       	ldi	r24, 0x06	; 6
    24bc:	80 83       	st	Z, r24
    24be:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = domainName;
    24c0:	3c 96       	adiw	r30, 0x0c	; 12
    24c2:	ae 0d       	add	r26, r14
    24c4:	bf 1d       	adc	r27, r15
    24c6:	a4 51       	subi	r26, 0x14	; 20
    24c8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ca:	8f e0       	ldi	r24, 0x0F	; 15
    24cc:	8c 93       	st	X, r24
    24ce:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = dhcpT1value;
    24d0:	1d 96       	adiw	r26, 0x0d	; 13
    24d2:	ee 0d       	add	r30, r14
    24d4:	ff 1d       	adc	r31, r15
    24d6:	e4 51       	subi	r30, 0x14	; 20
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	8a e3       	ldi	r24, 0x3A	; 58
    24dc:	80 83       	st	Z, r24
    24de:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = dhcpT2value;
    24e0:	3e 96       	adiw	r30, 0x0e	; 14
    24e2:	ae 0d       	add	r26, r14
    24e4:	bf 1d       	adc	r27, r15
    24e6:	a4 51       	subi	r26, 0x14	; 20
    24e8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ea:	8b e3       	ldi	r24, 0x3B	; 59
    24ec:	8c 93       	st	X, r24
    24ee:	d8 01       	movw	r26, r16
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
    24f0:	1f 96       	adiw	r26, 0x0f	; 15
    24f2:	ee 0d       	add	r30, r14
    24f4:	ff 1d       	adc	r31, r15
    24f6:	e4 51       	subi	r30, 0x14	; 20
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	8f e1       	ldi	r24, 0x1F	; 31
    24fc:	80 83       	st	Z, r24
    24fe:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k++] = staticRoute;
    2500:	70 96       	adiw	r30, 0x10	; 16
    2502:	ae 0d       	add	r26, r14
    2504:	bf 1d       	adc	r27, r15
    2506:	a4 51       	subi	r26, 0x14	; 20
    2508:	bf 4f       	sbci	r27, 0xFF	; 255
    250a:	81 e2       	ldi	r24, 0x21	; 33
    250c:	8c 93       	st	X, r24
    250e:	ee 0d       	add	r30, r14
	pDHCPMSG->OPT[k++] = endOption;
    2510:	ff 1d       	adc	r31, r15
    2512:	e4 51       	subi	r30, 0x14	; 20
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	8f ef       	ldi	r24, 0xFF	; 255
    2518:	80 83       	st	Z, r24
    251a:	0f 5e       	subi	r16, 0xEF	; 239

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
    251e:	08 c0       	rjmp	.+16     	; 0x2530 <send_DHCP_REQUEST+0x2fe>
    2520:	f7 01       	movw	r30, r14
    2522:	e0 0f       	add	r30, r16
    2524:	f1 1f       	adc	r31, r17
    2526:	e4 51       	subi	r30, 0x14	; 20
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	10 82       	st	Z, r1
    252c:	0f 5f       	subi	r16, 0xFF	; 255
    252e:	1f 4f       	sbci	r17, 0xFF	; 255
    2530:	08 33       	cpi	r16, 0x38	; 56
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	18 07       	cpc	r17, r24
    2536:	a4 f3       	brlt	.-24     	; 0x2520 <send_DHCP_REQUEST+0x2ee>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
    2538:	8c e4       	ldi	r24, 0x4C	; 76
    253a:	92 e0       	ldi	r25, 0x02	; 2
    253c:	52 d3       	rcall	.+1700   	; 0x2be2 <puts>
    253e:	60 91 11 0c 	lds	r22, 0x0C11	; 0x800c11 <pDHCPMSG>
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
    2542:	70 91 12 0c 	lds	r23, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    2546:	03 e4       	ldi	r16, 0x43	; 67
    2548:	10 e0       	ldi	r17, 0x00	; 0
    254a:	9e 01       	movw	r18, r28
    254c:	2f 5f       	subi	r18, 0xFF	; 255
    254e:	3f 4f       	sbci	r19, 0xFF	; 255
    2550:	44 e2       	ldi	r20, 0x24	; 36
    2552:	52 e0       	ldi	r21, 0x02	; 2
    2554:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <DHCP_SOCKET>
    2558:	0e 94 c7 00 	call	0x18e	; 0x18e <sendto>
    255c:	0f 90       	pop	r0

}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	ef 90       	pop	r14
    2570:	df 90       	pop	r13
    2572:	cf 90       	pop	r12
    2574:	bf 90       	pop	r11
    2576:	af 90       	pop	r10
    2578:	9f 90       	pop	r9
    257a:	8f 90       	pop	r8
    257c:	7f 90       	pop	r7
    257e:	6f 90       	pop	r6
    2580:	5f 90       	pop	r5
    2582:	08 95       	ret

00002584 <check_DHCP_timeout>:
    2584:	cf 93       	push	r28

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
    2586:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <dhcp_retry_count>
    258a:	82 30       	cpi	r24, 0x02	; 2
    258c:	0c f0       	brlt	.+2      	; 0x2590 <check_DHCP_timeout+0xc>
    258e:	4e c0       	rjmp	.+156    	; 0x262c <check_DHCP_timeout+0xa8>
		if (dhcp_tick_next < dhcp_tick_1s) {
    2590:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <dhcp_tick_next>
    2594:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <dhcp_tick_next+0x1>
    2598:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <dhcp_tick_next+0x2>
    259c:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <dhcp_tick_next+0x3>
    25a0:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <dhcp_tick_1s>
    25a4:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <dhcp_tick_1s+0x1>
    25a8:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <dhcp_tick_1s+0x2>
    25ac:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <dhcp_tick_1s+0x3>
    25b0:	48 17       	cp	r20, r24
    25b2:	59 07       	cpc	r21, r25
    25b4:	6a 07       	cpc	r22, r26
    25b6:	7b 07       	cpc	r23, r27
    25b8:	08 f0       	brcs	.+2      	; 0x25bc <check_DHCP_timeout+0x38>
    25ba:	4d c0       	rjmp	.+154    	; 0x2656 <check_DHCP_timeout+0xd2>

			switch ( dhcp_state ) {
    25bc:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <dhcp_state>
    25c0:	82 30       	cpi	r24, 0x02	; 2
    25c2:	49 f0       	breq	.+18     	; 0x25d6 <check_DHCP_timeout+0x52>
    25c4:	84 30       	cpi	r24, 0x04	; 4
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <check_DHCP_timeout+0x5c>
    25c8:	81 30       	cpi	r24, 0x01	; 1
    25ca:	71 f4       	brne	.+28     	; 0x25e8 <check_DHCP_timeout+0x64>
				case STATE_DHCP_DISCOVER :
					printf("<<timeout>> state : STATE_DHCP_DISCOVER\r\n");
    25cc:	81 e6       	ldi	r24, 0x61	; 97
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	08 d3       	rcall	.+1552   	; 0x2be2 <puts>
					send_DHCP_DISCOVER();
    25d2:	ed dc       	rcall	.-1574   	; 0x1fae <send_DHCP_DISCOVER>
    25d4:	09 c0       	rjmp	.+18     	; 0x25e8 <check_DHCP_timeout+0x64>
				break;
    25d6:	8a e8       	ldi	r24, 0x8A	; 138
		
				case STATE_DHCP_REQUEST :
					printf("<<timeout>> state : STATE_DHCP_REQUEST\r\n");
    25d8:	92 e0       	ldi	r25, 0x02	; 2
    25da:	03 d3       	rcall	.+1542   	; 0x2be2 <puts>

					send_DHCP_REQUEST();
    25dc:	2a de       	rcall	.-940    	; 0x2232 <send_DHCP_REQUEST>
				break;

				case STATE_DHCP_REREQUEST :
					printf("<<timeout>> state : STATE_DHCP_REREQUEST\r\n");
    25de:	04 c0       	rjmp	.+8      	; 0x25e8 <check_DHCP_timeout+0x64>
    25e0:	82 eb       	ldi	r24, 0xB2	; 178
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	fe d2       	rcall	.+1532   	; 0x2be2 <puts>
					
					send_DHCP_REQUEST();
    25e6:	25 de       	rcall	.-950    	; 0x2232 <send_DHCP_REQUEST>
    25e8:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <dhcp_tick_1s>
		
				default :
				break;
			}

			dhcp_tick_1s = 0;
    25ec:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <dhcp_tick_1s+0x1>
    25f0:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <dhcp_tick_1s+0x2>
    25f4:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <dhcp_tick_1s+0x3>
    25f8:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <dhcp_tick_1s>
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
    25fc:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <dhcp_tick_1s+0x1>
    2600:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <dhcp_tick_1s+0x2>
    2604:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <dhcp_tick_1s+0x3>
    2608:	0a 96       	adiw	r24, 0x0a	; 10
    260a:	a1 1d       	adc	r26, r1
    260c:	b1 1d       	adc	r27, r1
    260e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dhcp_tick_next>
    2612:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <dhcp_tick_next+0x1>
    2616:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <dhcp_tick_next+0x2>
    261a:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <dhcp_tick_next+0x3>
    261e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <dhcp_retry_count>
			dhcp_retry_count++;
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <dhcp_retry_count>
    2628:	c1 e0       	ldi	r28, 0x01	; 1
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    262a:	16 c0       	rjmp	.+44     	; 0x2658 <check_DHCP_timeout+0xd4>
    262c:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <dhcp_state>
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
			dhcp_retry_count++;
		}
	} else { // timeout occurred

		switch(dhcp_state) {
    2630:	82 30       	cpi	r24, 0x02	; 2
    2632:	41 f0       	breq	.+16     	; 0x2644 <check_DHCP_timeout+0xc0>
    2634:	84 30       	cpi	r24, 0x04	; 4
    2636:	31 f0       	breq	.+12     	; 0x2644 <check_DHCP_timeout+0xc0>
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	51 f4       	brne	.+20     	; 0x2650 <check_DHCP_timeout+0xcc>
			case STATE_DHCP_DISCOVER:
				dhcp_state = STATE_DHCP_INIT;
    263c:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <dhcp_state>
				ret = DHCP_FAILED;
    2640:	c0 e0       	ldi	r28, 0x00	; 0
				break;
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <check_DHCP_timeout+0xce>
			case STATE_DHCP_REQUEST:
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
    2644:	b4 dc       	rcall	.-1688   	; 0x1fae <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dhcp_state>
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    264c:	c1 e0       	ldi	r28, 0x01	; 1
				break;
			case STATE_DHCP_REQUEST:
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <check_DHCP_timeout+0xce>
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    2650:	c1 e0       	ldi	r28, 0x01	; 1
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
		}
		reset_DHCP_timeout();
    2652:	c3 db       	rcall	.-2170   	; 0x1dda <reset_DHCP_timeout>
    2654:	01 c0       	rjmp	.+2      	; 0x2658 <check_DHCP_timeout+0xd4>
    2656:	c1 e0       	ldi	r28, 0x01	; 1
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    2658:	8c 2f       	mov	r24, r28
				break;
		}
		reset_DHCP_timeout();
	}
	return ret;
}
    265a:	cf 91       	pop	r28
    265c:	08 95       	ret

0000265e <DHCP_run>:
    265e:	cf 93       	push	r28
uint8_t DHCP_run(void)
{
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
    2660:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <dhcp_state>
    2664:	86 30       	cpi	r24, 0x06	; 6
    2666:	09 f4       	brne	.+2      	; 0x266a <DHCP_run+0xc>
    2668:	11 c1       	rjmp	.+546    	; 0x288c <DHCP_run+0x22e>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
    266a:	60 91 13 0c 	lds	r22, 0x0C13	; 0x800c13 <DHCP_SOCKET>
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	68 5f       	subi	r22, 0xF8	; 248
    2672:	7f 4f       	sbci	r23, 0xFF	; 255
    2674:	00 24       	eor	r0, r0
    2676:	76 95       	lsr	r23
    2678:	67 95       	ror	r22
    267a:	07 94       	ror	r0
    267c:	76 95       	lsr	r23
    267e:	67 95       	ror	r22
    2680:	07 94       	ror	r0
    2682:	76 2f       	mov	r23, r22
    2684:	60 2d       	mov	r22, r0
    2686:	68 5f       	subi	r22, 0xF8	; 248
    2688:	7f 47       	sbci	r23, 0x7F	; 127
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <WIZCHIP_READ>
    2692:	82 32       	cpi	r24, 0x22	; 34
    2694:	41 f0       	breq	.+16     	; 0x26a6 <DHCP_run+0x48>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	44 e4       	ldi	r20, 0x44	; 68
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	62 e0       	ldi	r22, 0x02	; 2
    269e:	80 91 13 0c 	lds	r24, 0x0C13	; 0x800c13 <DHCP_SOCKET>
    26a2:	0e 94 9e 03 	call	0x73c	; 0x73c <socket>

	ret = DHCP_RUNNING;
	type = parseDHCPMSG();
    26a6:	d9 d9       	rcall	.-3150   	; 0x1a5a <parseDHCPMSG>

	switch ( dhcp_state ) {
    26a8:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <dhcp_state>
    26ac:	92 30       	cpi	r25, 0x02	; 2
    26ae:	d1 f1       	breq	.+116    	; 0x2724 <DHCP_run+0xc6>
    26b0:	2c f4       	brge	.+10     	; 0x26bc <DHCP_run+0x5e>
    26b2:	99 23       	and	r25, r25
    26b4:	51 f0       	breq	.+20     	; 0x26ca <DHCP_run+0x6c>
    26b6:	91 30       	cpi	r25, 0x01	; 1
    26b8:	99 f0       	breq	.+38     	; 0x26e0 <DHCP_run+0x82>
    26ba:	ea c0       	rjmp	.+468    	; 0x2890 <DHCP_run+0x232>
    26bc:	93 30       	cpi	r25, 0x03	; 3
    26be:	09 f4       	brne	.+2      	; 0x26c2 <DHCP_run+0x64>
    26c0:	5a c0       	rjmp	.+180    	; 0x2776 <DHCP_run+0x118>
    26c2:	94 30       	cpi	r25, 0x04	; 4
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <DHCP_run+0x6a>
    26c6:	a5 c0       	rjmp	.+330    	; 0x2812 <DHCP_run+0x1b4>
    26c8:	e3 c0       	rjmp	.+454    	; 0x2890 <DHCP_run+0x232>
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
    26ca:	ea ec       	ldi	r30, 0xCA	; 202
    26cc:	f3 e0       	ldi	r31, 0x03	; 3
    26ce:	10 82       	st	Z, r1
         DHCP_allocated_ip[1] = 0;
    26d0:	11 82       	std	Z+1, r1	; 0x01
         DHCP_allocated_ip[2] = 0;
    26d2:	12 82       	std	Z+2, r1	; 0x02
         DHCP_allocated_ip[3] = 0;
   		send_DHCP_DISCOVER();
    26d4:	13 82       	std	Z+3, r1	; 0x03
    26d6:	6b dc       	rcall	.-1834   	; 0x1fae <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dhcp_state>
   		break;
    26de:	dd c0       	rjmp	.+442    	; 0x289a <DHCP_run+0x23c>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	f1 f4       	brne	.+60     	; 0x2720 <DHCP_run+0xc2>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
    26e4:	8c ed       	ldi	r24, 0xDC	; 220
    26e6:	92 e0       	ldi	r25, 0x02	; 2
    26e8:	7c d2       	rcall	.+1272   	; 0x2be2 <puts>
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
    26ea:	a0 91 11 0c 	lds	r26, 0x0C11	; 0x800c11 <pDHCPMSG>
    26ee:	b0 91 12 0c 	lds	r27, 0x0C12	; 0x800c12 <pDHCPMSG+0x1>
    26f2:	50 96       	adiw	r26, 0x10	; 16
    26f4:	8c 91       	ld	r24, X
    26f6:	50 97       	sbiw	r26, 0x10	; 16
    26f8:	ea ec       	ldi	r30, 0xCA	; 202
    26fa:	f3 e0       	ldi	r31, 0x03	; 3
    26fc:	80 83       	st	Z, r24
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
    26fe:	51 96       	adiw	r26, 0x11	; 17
    2700:	8c 91       	ld	r24, X
    2702:	51 97       	sbiw	r26, 0x11	; 17
    2704:	81 83       	std	Z+1, r24	; 0x01
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
    2706:	52 96       	adiw	r26, 0x12	; 18
    2708:	8c 91       	ld	r24, X
    270a:	52 97       	sbiw	r26, 0x12	; 18
    270c:	82 83       	std	Z+2, r24	; 0x02
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
    270e:	53 96       	adiw	r26, 0x13	; 19
    2710:	8c 91       	ld	r24, X

				send_DHCP_REQUEST();
    2712:	83 83       	std	Z+3, r24	; 0x03
    2714:	8e dd       	rcall	.-1252   	; 0x2232 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dhcp_state>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    271c:	81 e0       	ldi	r24, 0x01	; 1
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];

				send_DHCP_REQUEST();
				dhcp_state = STATE_DHCP_REQUEST;
			} else ret = check_DHCP_timeout();
    271e:	bd c0       	rjmp	.+378    	; 0x289a <DHCP_run+0x23c>
    2720:	31 df       	rcall	.-414    	; 0x2584 <check_DHCP_timeout>
         break;

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
    2722:	bb c0       	rjmp	.+374    	; 0x289a <DHCP_run+0x23c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
    2724:	85 30       	cpi	r24, 0x05	; 5
    2726:	d9 f4       	brne	.+54     	; 0x275e <DHCP_run+0x100>
    2728:	82 ef       	ldi	r24, 0xF2	; 242
    272a:	92 e0       	ldi	r25, 0x02	; 2
#endif
				if (check_DHCP_leasedIP()) {
    272c:	5a d2       	rcall	.+1204   	; 0x2be2 <puts>
    272e:	fc da       	rcall	.-2568   	; 0x1d28 <check_DHCP_leasedIP>
    2730:	88 23       	and	r24, r24
					// Network info assignment from DHCP
					dhcp_ip_assign();
    2732:	59 f0       	breq	.+22     	; 0x274a <DHCP_run+0xec>
    2734:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <dhcp_ip_assign>
    2738:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <dhcp_ip_assign+0x1>
					reset_DHCP_timeout();
    273c:	09 95       	icall

					dhcp_state = STATE_DHCP_LEASED;
    273e:	4d db       	rcall	.-2406   	; 0x1dda <reset_DHCP_timeout>
    2740:	83 e0       	ldi	r24, 0x03	; 3
    2742:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dhcp_state>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2746:	81 e0       	ldi	r24, 0x01	; 1
					reset_DHCP_timeout();

					dhcp_state = STATE_DHCP_LEASED;
				} else {
					// IP address conflict occurred
					reset_DHCP_timeout();
    2748:	a8 c0       	rjmp	.+336    	; 0x289a <DHCP_run+0x23c>
    274a:	47 db       	rcall	.-2418   	; 0x1dda <reset_DHCP_timeout>
					dhcp_ip_conflict();
    274c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <dhcp_ip_conflict>
    2750:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <dhcp_ip_conflict+0x1>
				    dhcp_state = STATE_DHCP_INIT;
    2754:	09 95       	icall
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2756:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <dhcp_state>
					// IP address conflict occurred
					reset_DHCP_timeout();
					dhcp_ip_conflict();
				    dhcp_state = STATE_DHCP_INIT;
				}
			} else if (type == DHCP_NAK) {
    275a:	81 e0       	ldi	r24, 0x01	; 1

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_NACK\r\n");
    275c:	9e c0       	rjmp	.+316    	; 0x289a <DHCP_run+0x23c>
    275e:	86 30       	cpi	r24, 0x06	; 6
    2760:	41 f4       	brne	.+16     	; 0x2772 <DHCP_run+0x114>
    2762:	86 e0       	ldi	r24, 0x06	; 6
#endif

				reset_DHCP_timeout();
    2764:	93 e0       	ldi	r25, 0x03	; 3
    2766:	3d d2       	rcall	.+1146   	; 0x2be2 <puts>

				dhcp_state = STATE_DHCP_DISCOVER;
    2768:	38 db       	rcall	.-2448   	; 0x1dda <reset_DHCP_timeout>
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dhcp_state>
			} else ret = check_DHCP_timeout();
    2770:	94 c0       	rjmp	.+296    	; 0x289a <DHCP_run+0x23c>
    2772:	08 df       	rcall	.-496    	; 0x2584 <check_DHCP_timeout>
    2774:	92 c0       	rjmp	.+292    	; 0x289a <DHCP_run+0x23c>
		break;

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
    2776:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dhcp_lease_time>
    277a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <dhcp_lease_time+0x1>
    277e:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <dhcp_lease_time+0x2>
    2782:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <dhcp_lease_time+0x3>
    2786:	8f 3f       	cpi	r24, 0xFF	; 255
    2788:	2f ef       	ldi	r18, 0xFF	; 255
    278a:	92 07       	cpc	r25, r18
    278c:	a2 07       	cpc	r26, r18
    278e:	b2 07       	cpc	r27, r18
    2790:	09 f4       	brne	.+2      	; 0x2794 <DHCP_run+0x136>
    2792:	80 c0       	rjmp	.+256    	; 0x2894 <DHCP_run+0x236>
    2794:	b6 95       	lsr	r27
    2796:	a7 95       	ror	r26
    2798:	97 95       	ror	r25
    279a:	87 95       	ror	r24
    279c:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <dhcp_tick_1s>
    27a0:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <dhcp_tick_1s+0x1>
    27a4:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <dhcp_tick_1s+0x2>
    27a8:	70 91 bb 03 	lds	r23, 0x03BB	; 0x8003bb <dhcp_tick_1s+0x3>
    27ac:	84 17       	cp	r24, r20
    27ae:	95 07       	cpc	r25, r21
    27b0:	a6 07       	cpc	r26, r22
    27b2:	b7 07       	cpc	r27, r23
    27b4:	08 f0       	brcs	.+2      	; 0x27b8 <DHCP_run+0x15a>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
    27b6:	70 c0       	rjmp	.+224    	; 0x2898 <DHCP_run+0x23a>
    27b8:	8b e1       	ldi	r24, 0x1B	; 27
    27ba:	93 e0       	ldi	r25, 0x03	; 3
    27bc:	12 d2       	rcall	.+1060   	; 0x2be2 <puts>
#endif

				type = 0;
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
    27be:	aa ec       	ldi	r26, 0xCA	; 202
    27c0:	b3 e0       	ldi	r27, 0x03	; 3
    27c2:	8c 91       	ld	r24, X
    27c4:	ee ec       	ldi	r30, 0xCE	; 206
    27c6:	f3 e0       	ldi	r31, 0x03	; 3
    27c8:	80 83       	st	Z, r24
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
    27ca:	11 96       	adiw	r26, 0x01	; 1
    27cc:	8c 91       	ld	r24, X
    27ce:	11 97       	sbiw	r26, 0x01	; 1
    27d0:	81 83       	std	Z+1, r24	; 0x01
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
    27d2:	12 96       	adiw	r26, 0x02	; 2
    27d4:	8c 91       	ld	r24, X
    27d6:	12 97       	sbiw	r26, 0x02	; 2
    27d8:	82 83       	std	Z+2, r24	; 0x02
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
    27da:	13 96       	adiw	r26, 0x03	; 3
    27dc:	8c 91       	ld	r24, X
    27de:	83 83       	std	Z+3, r24	; 0x03
				
				DHCP_XID++;
    27e0:	80 91 05 0c 	lds	r24, 0x0C05	; 0x800c05 <DHCP_XID>
    27e4:	90 91 06 0c 	lds	r25, 0x0C06	; 0x800c06 <DHCP_XID+0x1>
    27e8:	a0 91 07 0c 	lds	r26, 0x0C07	; 0x800c07 <DHCP_XID+0x2>
    27ec:	b0 91 08 0c 	lds	r27, 0x0C08	; 0x800c08 <DHCP_XID+0x3>
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	a1 1d       	adc	r26, r1
    27f4:	b1 1d       	adc	r27, r1
    27f6:	80 93 05 0c 	sts	0x0C05, r24	; 0x800c05 <DHCP_XID>
    27fa:	90 93 06 0c 	sts	0x0C06, r25	; 0x800c06 <DHCP_XID+0x1>
    27fe:	a0 93 07 0c 	sts	0x0C07, r26	; 0x800c07 <DHCP_XID+0x2>

				send_DHCP_REQUEST();
    2802:	b0 93 08 0c 	sts	0x0C08, r27	; 0x800c08 <DHCP_XID+0x3>

				reset_DHCP_timeout();
    2806:	15 dd       	rcall	.-1494   	; 0x2232 <send_DHCP_REQUEST>
    2808:	e8 da       	rcall	.-2608   	; 0x1dda <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
    280a:	84 e0       	ldi	r24, 0x04	; 4
    280c:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dhcp_state>
    2810:	44 c0       	rjmp	.+136    	; 0x289a <DHCP_run+0x23c>
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
    2812:	85 30       	cpi	r24, 0x05	; 5
    2814:	71 f5       	brne	.+92     	; 0x2872 <DHCP_run+0x214>
				dhcp_retry_count = 0;
    2816:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <dhcp_retry_count>
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
    281a:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <OLD_allocated_ip>
    281e:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <DHCP_allocated_ip>
    2822:	98 13       	cpse	r25, r24
    2824:	12 c0       	rjmp	.+36     	; 0x284a <DHCP_run+0x1ec>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
    2826:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <OLD_allocated_ip+0x1>
    282a:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <DHCP_allocated_ip+0x1>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
				dhcp_retry_count = 0;
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
    282e:	98 13       	cpse	r25, r24
    2830:	0c c0       	rjmp	.+24     	; 0x284a <DHCP_run+0x1ec>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
    2832:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <OLD_allocated_ip+0x2>
    2836:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <DHCP_allocated_ip+0x2>
		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
				dhcp_retry_count = 0;
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
    283a:	98 13       	cpse	r25, r24
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
    283c:	06 c0       	rjmp	.+12     	; 0x284a <DHCP_run+0x1ec>
    283e:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <OLD_allocated_ip+0x3>
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
				dhcp_retry_count = 0;
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
    2842:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <DHCP_allocated_ip+0x3>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
				{
					ret = DHCP_IP_CHANGED;
					dhcp_ip_update();
    2846:	98 17       	cp	r25, r24
    2848:	51 f0       	breq	.+20     	; 0x285e <DHCP_run+0x200>
    284a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <dhcp_ip_update>
               #ifdef _DHCP_DEBUG_
                  printf(">IP changed.\r\n");
    284e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <dhcp_ip_update+0x1>
    2852:	09 95       	icall
    2854:	88 e3       	ldi	r24, 0x38	; 56
               #endif
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
    2856:	93 e0       	ldi	r25, 0x03	; 3
    2858:	c4 d1       	rcall	.+904    	; 0x2be2 <puts>
    285a:	c3 e0       	ldi	r28, 0x03	; 3
    285c:	04 c0       	rjmp	.+8      	; 0x2866 <DHCP_run+0x208>
				dhcp_state = STATE_DHCP_REREQUEST;
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
    285e:	86 e4       	ldi	r24, 0x46	; 70
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
    2860:	93 e0       	ldi	r25, 0x03	; 3
				dhcp_state = STATE_DHCP_LEASED;
    2862:	bf d1       	rcall	.+894    	; 0x2be2 <puts>
    2864:	c4 e0       	ldi	r28, 0x04	; 4
    2866:	b9 da       	rcall	.-2702   	; 0x1dda <reset_DHCP_timeout>
    2868:	83 e0       	ldi	r24, 0x03	; 3
    286a:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dhcp_state>
			} else if (type == DHCP_NAK) {
    286e:	8c 2f       	mov	r24, r28

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
    2870:	14 c0       	rjmp	.+40     	; 0x289a <DHCP_run+0x23c>
    2872:	86 30       	cpi	r24, 0x06	; 6
    2874:	49 f4       	brne	.+18     	; 0x2888 <DHCP_run+0x22a>
    2876:	89 e5       	ldi	r24, 0x59	; 89
#endif

				reset_DHCP_timeout();
    2878:	93 e0       	ldi	r25, 0x03	; 3
    287a:	b3 d1       	rcall	.+870    	; 0x2be2 <puts>

				dhcp_state = STATE_DHCP_DISCOVER;
    287c:	ae da       	rcall	.-2724   	; 0x1dda <reset_DHCP_timeout>
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dhcp_state>
				dhcp_state = STATE_DHCP_REREQUEST;
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
    2884:	84 e0       	ldi	r24, 0x04	; 4
#endif

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
    2886:	09 c0       	rjmp	.+18     	; 0x289a <DHCP_run+0x23c>
    2888:	7d de       	rcall	.-774    	; 0x2584 <check_DHCP_timeout>
    288a:	07 c0       	rjmp	.+14     	; 0x289a <DHCP_run+0x23c>
uint8_t DHCP_run(void)
{
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
    288c:	85 e0       	ldi	r24, 0x05	; 5
    288e:	05 c0       	rjmp	.+10     	; 0x289a <DHCP_run+0x23c>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	03 c0       	rjmp	.+6      	; 0x289a <DHCP_run+0x23c>
				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
    2894:	84 e0       	ldi	r24, 0x04	; 4
    2896:	01 c0       	rjmp	.+2      	; 0x289a <DHCP_run+0x23c>
    2898:	84 e0       	ldi	r24, 0x04	; 4
		default :
   		break;
	}

	return ret;
}
    289a:	cf 91       	pop	r28
    289c:	08 95       	ret

0000289e <uart_putchar>:
static int uart_putchar(char c, FILE *stream);
//Functions for re-directing printf to uart... 
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	1f 92       	push	r1
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	89 83       	std	Y+1, r24	; 0x01
	uint8_t * ptr = (uint8_t *) &c; 
	UART0_write(ptr, 1); 
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	ce 01       	movw	r24, r28
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	78 d1       	rcall	.+752    	; 0x2ba2 <UART0_write>
	return 0;
}
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0f 90       	pop	r0
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	08 95       	ret

000028be <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28be:	8f e0       	ldi	r24, 0x0F	; 15
    28c0:	97 e2       	ldi	r25, 0x27	; 39
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <main+0x4>
    28c6:	00 c0       	rjmp	.+0      	; 0x28c8 <main+0xa>
    28c8:	00 00       	nop

int main(void)
{
    /* Replace with your application code */
	_delay_ms(5);
	GPIO_Init(); 
    28ca:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Init>
	UART0_Init(); 
    28ce:	5d d1       	rcall	.+698    	; 0x2b8a <UART0_Init>
	sysTimerInit();
    28d0:	d7 d0       	rcall	.+430    	; 0x2a80 <sysTimerInit>
    28d2:	0e 94 8b 00 	call	0x116	; 0x116 <External_Mem_Inter_Init>
	External_Mem_Inter_Init(); 
    28d6:	82 e3       	ldi	r24, 0x32	; 50
	
	stdout = &mystdout; //Re-direct PRINTF TO UART... 
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	90 93 9f 0c 	sts	0x0C9F, r25	; 0x800c9f <__iob+0x3>
    28de:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <__iob+0x2>
    28e2:	6a ed       	ldi	r22, 0xDA	; 218
	
	//1) Define the Exit and Entry for ISR
	reg_wizchip_cris_cbfunc(&disable_global_interrupts, &enable_global_interrupts); 
    28e4:	75 e1       	ldi	r23, 0x15	; 21
    28e6:	8c ed       	ldi	r24, 0xDC	; 220
    28e8:	95 e1       	ldi	r25, 0x15	; 21
    28ea:	0e 94 81 09 	call	0x1302	; 0x1302 <reg_wizchip_cris_cbfunc>
    28ee:	60 e4       	ldi	r22, 0x40	; 64
	
	wizchip_init(txBuffer, rxBuffer); 
    28f0:	71 e0       	ldi	r23, 0x01	; 1
    28f2:	88 e4       	ldi	r24, 0x48	; 72
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	0e 94 97 0a 	call	0x152e	; 0x152e <wizchip_init>
    28fa:	78 94       	sei
	
	sei(); //Interrupt global interrupts. 
    28fc:	0e 94 6b 00 	call	0xd6	; 0xd6 <Blinky_Init>
	
	Blinky_Init();
    2900:	62 ed       	ldi	r22, 0xD2	; 210
	
	//DHCP
	DHCP_init(0, ethernetBuffer);
    2902:	73 e0       	ldi	r23, 0x03	; 3
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	80 da       	rcall	.-2816   	; 0x1e08 <DHCP_init>
    2908:	4c eb       	ldi	r20, 0xBC	; 188

	//For SRAM the address 0x0000 - 0x7FFF
	//For Ethernet device  0x8000 - 0x83FF

	sysTimerSubModuleInit(1000, DHCP_time_handler);
    290a:	5f e0       	ldi	r21, 0x0F	; 15
    290c:	68 ee       	ldi	r22, 0xE8	; 232
    290e:	73 e0       	ldi	r23, 0x03	; 3
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	ce d0       	rcall	.+412    	; 0x2ab2 <sysTimerSubModuleInit>
	
	printf("Starting...\r\n");
    2916:	85 e8       	ldi	r24, 0x85	; 133
    2918:	93 e0       	ldi	r25, 0x03	; 3
    291a:	63 d1       	rcall	.+710    	; 0x2be2 <puts>
    291c:	a0 de       	rcall	.-704    	; 0x265e <DHCP_run>
	
    while (1) 
    {
		DHCP_run();
    291e:	fe cf       	rjmp	.-4      	; 0x291c <main+0x5e>

00002920 <queue_writeforTx>:
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
	}

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
    2924:	fc 01       	movw	r30, r24
    2926:	eb 01       	movw	r28, r22
	for(tx_buffer_index_t cnt = 0; cnt < length; cnt++)
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	1b c0       	rjmp	.+54     	; 0x2962 <queue_writeforTx+0x42>
	{
		tx_buffer_index_t i = (ptr->_tx_head + 1) % SERIAL_TX_BUFFER_SIZE;
    292c:	24 81       	ldd	r18, Z+4	; 0x04
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	2f 5f       	subi	r18, 0xFF	; 255
    2932:	3f 4f       	sbci	r19, 0xFF	; 255
    2934:	2f 77       	andi	r18, 0x7F	; 127
    2936:	30 78       	andi	r19, 0x80	; 128
    2938:	33 23       	and	r19, r19
    293a:	34 f4       	brge	.+12     	; 0x2948 <queue_writeforTx+0x28>
    293c:	21 50       	subi	r18, 0x01	; 1
    293e:	31 09       	sbc	r19, r1
    2940:	20 68       	ori	r18, 0x80	; 128
    2942:	3f 6f       	ori	r19, 0xFF	; 255
    2944:	2f 5f       	subi	r18, 0xFF	; 255
    2946:	3f 4f       	sbci	r19, 0xFF	; 255
		if(i == ptr->_tx_tail)
    2948:	95 81       	ldd	r25, Z+5	; 0x05
    294a:	92 17       	cp	r25, r18
    294c:	61 f0       	breq	.+24     	; 0x2966 <queue_writeforTx+0x46>
		{
			return; 
		}
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
    294e:	a6 81       	ldd	r26, Z+6	; 0x06
    2950:	b7 81       	ldd	r27, Z+7	; 0x07
    2952:	94 81       	ldd	r25, Z+4	; 0x04
    2954:	a9 0f       	add	r26, r25
    2956:	b1 1d       	adc	r27, r1
    2958:	98 81       	ld	r25, Y
    295a:	9c 93       	st	X, r25
		ptr->_tx_head = i;
    295c:	24 83       	std	Z+4, r18	; 0x04

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
	for(tx_buffer_index_t cnt = 0; cnt < length; cnt++)
    295e:	8f 5f       	subi	r24, 0xFF	; 255
		tx_buffer_index_t i = (ptr->_tx_head + 1) % SERIAL_TX_BUFFER_SIZE;
		if(i == ptr->_tx_tail)
		{
			return; 
		}
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
    2960:	21 96       	adiw	r28, 0x01	; 1

}

void queue_writeforTx(queue_struct * ptr, uint8_t * pData, const uint8_t length) 
{
	for(tx_buffer_index_t cnt = 0; cnt < length; cnt++)
    2962:	84 17       	cp	r24, r20
    2964:	18 f3       	brcs	.-58     	; 0x292c <queue_writeforTx+0xc>
		*(ptr->pTxBuffer + ptr->_tx_head) = *pData++;
		ptr->_tx_head = i;
		
	}
	return; 
}
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	08 95       	ret

0000296c <queue_availableForTx>:

tx_buffer_index_t	queue_availableForTx(queue_struct * ptr)
{
    296c:	fc 01       	movw	r30, r24
	return ((tx_buffer_index_t) (SERIAL_TX_BUFFER_SIZE + ptr->_tx_head - ptr->_tx_tail)) % SERIAL_TX_BUFFER_SIZE;
    296e:	94 81       	ldd	r25, Z+4	; 0x04
    2970:	85 81       	ldd	r24, Z+5	; 0x05
    2972:	98 1b       	sub	r25, r24
    2974:	89 2f       	mov	r24, r25
}
    2976:	8f 77       	andi	r24, 0x7F	; 127
    2978:	08 95       	ret

0000297a <queue_readForTx>:

uint8_t queue_readForTx(queue_struct * ptr)
{
    297a:	fc 01       	movw	r30, r24
	// if the head isn't ahead of the tail, we don't have any characters
	if (ptr->_tx_head == ptr->_tx_tail)
    297c:	94 81       	ldd	r25, Z+4	; 0x04
    297e:	85 81       	ldd	r24, Z+5	; 0x05
    2980:	98 17       	cp	r25, r24
    2982:	59 f0       	breq	.+22     	; 0x299a <queue_readForTx+0x20>
	{
		return -1;
	} else
	{
		unsigned char c = *(ptr->pTxBuffer  + ptr->_tx_tail);
    2984:	a6 81       	ldd	r26, Z+6	; 0x06
    2986:	b7 81       	ldd	r27, Z+7	; 0x07
    2988:	85 81       	ldd	r24, Z+5	; 0x05
    298a:	a8 0f       	add	r26, r24
    298c:	b1 1d       	adc	r27, r1
    298e:	8c 91       	ld	r24, X
		ptr->_tx_tail = (tx_buffer_index_t) (ptr->_tx_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2990:	95 81       	ldd	r25, Z+5	; 0x05
    2992:	9f 5f       	subi	r25, 0xFF	; 255
    2994:	9f 77       	andi	r25, 0x7F	; 127
    2996:	95 83       	std	Z+5, r25	; 0x05
		return (int8_t)c;
    2998:	08 95       	ret
uint8_t queue_readForTx(queue_struct * ptr)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (ptr->_tx_head == ptr->_tx_tail)
	{
		return -1;
    299a:	8f ef       	ldi	r24, 0xFF	; 255
	{
		unsigned char c = *(ptr->pTxBuffer  + ptr->_tx_tail);
		ptr->_tx_tail = (tx_buffer_index_t) (ptr->_tx_tail + 1) % SERIAL_TX_BUFFER_SIZE;
		return (int8_t)c;
	}
    299c:	08 95       	ret

0000299e <__vector_12>:
{
	DISABLE_GLOBAL_INTERRUPTS();
	myTimers[timerIndex].maxValue		= milliSeconds; 
	myTimers[timerIndex].count			= 0u; 
	myTimers[timerIndex].enable			= true; 
	ENABLE_GLOBAL_INTERRUPTS(); 
    299e:	1f 92       	push	r1
    29a0:	0f 92       	push	r0
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	0f 92       	push	r0
    29a6:	11 24       	eor	r1, r1
    29a8:	0b b6       	in	r0, 0x3b	; 59
    29aa:	0f 92       	push	r0
    29ac:	0f 93       	push	r16
    29ae:	1f 93       	push	r17
    29b0:	2f 93       	push	r18
    29b2:	3f 93       	push	r19
    29b4:	4f 93       	push	r20
    29b6:	5f 93       	push	r21
    29b8:	6f 93       	push	r22
    29ba:	7f 93       	push	r23
    29bc:	8f 93       	push	r24
    29be:	9f 93       	push	r25
    29c0:	af 93       	push	r26
    29c2:	bf 93       	push	r27
    29c4:	cf 93       	push	r28
    29c6:	ef 93       	push	r30
    29c8:	ff 93       	push	r31
    29ca:	c0 e0       	ldi	r28, 0x00	; 0
    29cc:	3b c0       	rjmp	.+118    	; 0x2a44 <__vector_12+0xa6>
    29ce:	8c 2f       	mov	r24, r28
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	2b e0       	ldi	r18, 0x0B	; 11
    29d4:	28 9f       	mul	r18, r24
    29d6:	f0 01       	movw	r30, r0
    29d8:	29 9f       	mul	r18, r25
    29da:	f0 0d       	add	r31, r0
    29dc:	11 24       	eor	r1, r1
    29de:	ee 52       	subi	r30, 0x2E	; 46
    29e0:	f4 4f       	sbci	r31, 0xF4	; 244
    29e2:	20 85       	ldd	r18, Z+8	; 0x08
    29e4:	22 23       	and	r18, r18
    29e6:	69 f1       	breq	.+90     	; 0x2a42 <__vector_12+0xa4>
    29e8:	2b e0       	ldi	r18, 0x0B	; 11
    29ea:	28 9f       	mul	r18, r24
    29ec:	f0 01       	movw	r30, r0
    29ee:	29 9f       	mul	r18, r25
    29f0:	f0 0d       	add	r31, r0
    29f2:	11 24       	eor	r1, r1
    29f4:	ee 52       	subi	r30, 0x2E	; 46
    29f6:	f4 4f       	sbci	r31, 0xF4	; 244
    29f8:	40 81       	ld	r20, Z
    29fa:	51 81       	ldd	r21, Z+1	; 0x01
    29fc:	62 81       	ldd	r22, Z+2	; 0x02
    29fe:	73 81       	ldd	r23, Z+3	; 0x03
    2a00:	4f 5f       	subi	r20, 0xFF	; 255
    2a02:	5f 4f       	sbci	r21, 0xFF	; 255
    2a04:	6f 4f       	sbci	r22, 0xFF	; 255
    2a06:	7f 4f       	sbci	r23, 0xFF	; 255
    2a08:	40 83       	st	Z, r20
    2a0a:	51 83       	std	Z+1, r21	; 0x01
    2a0c:	62 83       	std	Z+2, r22	; 0x02
    2a0e:	73 83       	std	Z+3, r23	; 0x03
    2a10:	04 81       	ldd	r16, Z+4	; 0x04
    2a12:	15 81       	ldd	r17, Z+5	; 0x05
    2a14:	26 81       	ldd	r18, Z+6	; 0x06
    2a16:	37 81       	ldd	r19, Z+7	; 0x07
    2a18:	40 17       	cp	r20, r16
    2a1a:	51 07       	cpc	r21, r17
    2a1c:	62 07       	cpc	r22, r18
    2a1e:	73 07       	cpc	r23, r19
    2a20:	80 f0       	brcs	.+32     	; 0x2a42 <__vector_12+0xa4>
    2a22:	2b e0       	ldi	r18, 0x0B	; 11
    2a24:	28 9f       	mul	r18, r24
    2a26:	f0 01       	movw	r30, r0
    2a28:	29 9f       	mul	r18, r25
    2a2a:	f0 0d       	add	r31, r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	ee 52       	subi	r30, 0x2E	; 46
    2a30:	f4 4f       	sbci	r31, 0xF4	; 244
    2a32:	10 82       	st	Z, r1
    2a34:	11 82       	std	Z+1, r1	; 0x01
    2a36:	12 82       	std	Z+2, r1	; 0x02
    2a38:	13 82       	std	Z+3, r1	; 0x03
    2a3a:	01 84       	ldd	r0, Z+9	; 0x09
    2a3c:	f2 85       	ldd	r31, Z+10	; 0x0a
    2a3e:	e0 2d       	mov	r30, r0
    2a40:	09 95       	icall
    2a42:	cf 5f       	subi	r28, 0xFF	; 255
    2a44:	80 91 fe 0b 	lds	r24, 0x0BFE	; 0x800bfe <timeIndex>
    2a48:	c8 17       	cp	r28, r24
    2a4a:	08 f2       	brcs	.-126    	; 0x29ce <__vector_12+0x30>
    2a4c:	ff 91       	pop	r31
    2a4e:	ef 91       	pop	r30
    2a50:	cf 91       	pop	r28
    2a52:	bf 91       	pop	r27
    2a54:	af 91       	pop	r26
    2a56:	9f 91       	pop	r25
    2a58:	8f 91       	pop	r24
    2a5a:	7f 91       	pop	r23
    2a5c:	6f 91       	pop	r22
    2a5e:	5f 91       	pop	r21
    2a60:	4f 91       	pop	r20
    2a62:	3f 91       	pop	r19
    2a64:	2f 91       	pop	r18
    2a66:	1f 91       	pop	r17
    2a68:	0f 91       	pop	r16
    2a6a:	0f 90       	pop	r0
    2a6c:	0b be       	out	0x3b, r0	; 59
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	0f 90       	pop	r0
    2a74:	1f 90       	pop	r1
    2a76:	18 95       	reti

00002a78 <sysTimerStart>:
    2a78:	87 b7       	in	r24, 0x37	; 55
    2a7a:	80 61       	ori	r24, 0x10	; 16
    2a7c:	87 bf       	out	0x37, r24	; 55
    2a7e:	08 95       	ret

00002a80 <sysTimerInit>:
    2a80:	8f b5       	in	r24, 0x2f	; 47
    2a82:	8c 7f       	andi	r24, 0xFC	; 252
    2a84:	8f bd       	out	0x2f, r24	; 47
    2a86:	8e b5       	in	r24, 0x2e	; 46
    2a88:	88 7e       	andi	r24, 0xE8	; 232
    2a8a:	8e bd       	out	0x2e, r24	; 46
    2a8c:	8e b5       	in	r24, 0x2e	; 46
    2a8e:	8a 60       	ori	r24, 0x0A	; 10
    2a90:	8e bd       	out	0x2e, r24	; 46
    2a92:	ea e7       	ldi	r30, 0x7A	; 122
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	80 7e       	andi	r24, 0xE0	; 224
    2a9a:	80 83       	st	Z, r24
    2a9c:	83 e0       	ldi	r24, 0x03	; 3
    2a9e:	8b bd       	out	0x2b, r24	; 43
    2aa0:	88 ee       	ldi	r24, 0xE8	; 232
    2aa2:	8a bd       	out	0x2a, r24	; 42
    2aa4:	1d bc       	out	0x2d, r1	; 45
    2aa6:	1c bc       	out	0x2c, r1	; 44
    2aa8:	86 b7       	in	r24, 0x36	; 54
    2aaa:	8f 7e       	andi	r24, 0xEF	; 239
    2aac:	86 bf       	out	0x36, r24	; 54
    2aae:	e4 cf       	rjmp	.-56     	; 0x2a78 <sysTimerStart>
    2ab0:	08 95       	ret

00002ab2 <sysTimerSubModuleInit>:
}

void sysTimerSubModuleInit(const uint32_t milliSeconds, void (*ptrFunction)(void))
{
	DISABLE_GLOBAL_INTERRUPTS();
    2ab2:	f8 94       	cli
	myTimers[timeIndex].maxValue		= milliSeconds;
    2ab4:	20 91 fe 0b 	lds	r18, 0x0BFE	; 0x800bfe <timeIndex>
    2ab8:	3b e0       	ldi	r19, 0x0B	; 11
    2aba:	23 9f       	mul	r18, r19
    2abc:	f0 01       	movw	r30, r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	ee 52       	subi	r30, 0x2E	; 46
    2ac2:	f4 4f       	sbci	r31, 0xF4	; 244
    2ac4:	64 83       	std	Z+4, r22	; 0x04
    2ac6:	75 83       	std	Z+5, r23	; 0x05
    2ac8:	86 83       	std	Z+6, r24	; 0x06
    2aca:	97 83       	std	Z+7, r25	; 0x07
	myTimers[timeIndex].count			= 0u;
    2acc:	10 82       	st	Z, r1
    2ace:	11 82       	std	Z+1, r1	; 0x01
    2ad0:	12 82       	std	Z+2, r1	; 0x02
    2ad2:	13 82       	std	Z+3, r1	; 0x03
	myTimers[timeIndex].enable			= true;
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	90 87       	std	Z+8, r25	; 0x08
	myTimers[timeIndex].ptrFunc			= ptrFunction;
    2ad8:	52 87       	std	Z+10, r21	; 0x0a
    2ada:	41 87       	std	Z+9, r20	; 0x09
	timeIndex++;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	82 0f       	add	r24, r18
    2ae0:	80 93 fe 0b 	sts	0x0BFE, r24	; 0x800bfe <timeIndex>
	ENABLE_GLOBAL_INTERRUPTS();
    2ae4:	78 94       	sei
    2ae6:	08 95       	ret

00002ae8 <__vector_19>:
#define UART0_TX_START()	UCSR0B |=  (1 << UDRIE0) 
#define UART0_TX_STOP()		UCSR0B &= ~((1 << UDRIE0)) 
#define TX_REGISTER			UDR0

ISR(USART0_UDRE_vect)
{
    2ae8:	1f 92       	push	r1
    2aea:	0f 92       	push	r0
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	0f 92       	push	r0
    2af0:	11 24       	eor	r1, r1
    2af2:	0b b6       	in	r0, 0x3b	; 59
    2af4:	0f 92       	push	r0
    2af6:	2f 93       	push	r18
    2af8:	3f 93       	push	r19
    2afa:	4f 93       	push	r20
    2afc:	5f 93       	push	r21
    2afe:	6f 93       	push	r22
    2b00:	7f 93       	push	r23
    2b02:	8f 93       	push	r24
    2b04:	9f 93       	push	r25
    2b06:	af 93       	push	r26
    2b08:	bf 93       	push	r27
    2b0a:	ef 93       	push	r30
    2b0c:	ff 93       	push	r31
	//Check if there is data pending to be written
	if(queue_availableForTx(&queueForUart0) == 0)
    2b0e:	80 e5       	ldi	r24, 0x50	; 80
    2b10:	91 e0       	ldi	r25, 0x01	; 1
    2b12:	2c df       	rcall	.-424    	; 0x296c <queue_availableForTx>
    2b14:	81 11       	cpse	r24, r1
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <__vector_19+0x38>
	{
		//No More data to transmit
		UART0_TX_STOP();
    2b18:	8a b1       	in	r24, 0x0a	; 10
    2b1a:	8f 7d       	andi	r24, 0xDF	; 223
    2b1c:	8a b9       	out	0x0a, r24	; 10
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <__vector_19+0x40>
	}else
	{
		TX_REGISTER = queue_readForTx(&queueForUart0);
    2b20:	80 e5       	ldi	r24, 0x50	; 80
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	2a df       	rcall	.-428    	; 0x297a <queue_readForTx>
    2b26:	8c b9       	out	0x0c, r24	; 12
	}
	
}
    2b28:	ff 91       	pop	r31
    2b2a:	ef 91       	pop	r30
    2b2c:	bf 91       	pop	r27
    2b2e:	af 91       	pop	r26
    2b30:	9f 91       	pop	r25
    2b32:	8f 91       	pop	r24
    2b34:	7f 91       	pop	r23
    2b36:	6f 91       	pop	r22
    2b38:	5f 91       	pop	r21
    2b3a:	4f 91       	pop	r20
    2b3c:	3f 91       	pop	r19
    2b3e:	2f 91       	pop	r18
    2b40:	0f 90       	pop	r0
    2b42:	0b be       	out	0x3b, r0	; 59
    2b44:	0f 90       	pop	r0
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	0f 90       	pop	r0
    2b4a:	1f 90       	pop	r1
    2b4c:	18 95       	reti

00002b4e <__vector_32>:

ISR(USART1_TX_vect)
{
    2b4e:	1f 92       	push	r1
    2b50:	0f 92       	push	r0
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	0f 92       	push	r0
    2b56:	11 24       	eor	r1, r1
	
}
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	0f 90       	pop	r0
    2b5e:	1f 90       	pop	r1
    2b60:	18 95       	reti

00002b62 <__vector_18>:

ISR(USART0_RX_vect)
{
    2b62:	1f 92       	push	r1
    2b64:	0f 92       	push	r0
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	0f 92       	push	r0
    2b6a:	11 24       	eor	r1, r1
	
	
}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	0f 90       	pop	r0
    2b72:	1f 90       	pop	r1
    2b74:	18 95       	reti

00002b76 <__vector_30>:

ISR(USART1_RX_vect)
{
    2b76:	1f 92       	push	r1
    2b78:	0f 92       	push	r0
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	0f 92       	push	r0
    2b7e:	11 24       	eor	r1, r1
	
}
    2b80:	0f 90       	pop	r0
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	0f 90       	pop	r0
    2b86:	1f 90       	pop	r1
    2b88:	18 95       	reti

00002b8a <UART0_Init>:

void UART0_Init(void)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(8>>8); //8 for 115200
    2b8a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)8;
    2b8e:	88 e0       	ldi	r24, 0x08	; 8
    2b90:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = (1 << U2X);
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	8b b9       	out	0x0b, r24	; 11
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
    2b96:	88 e1       	ldi	r24, 0x18	; 24
    2b98:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C = (3<<UCSZ0);
    2b9a:	86 e0       	ldi	r24, 0x06	; 6
    2b9c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    2ba0:	08 95       	ret

00002ba2 <UART0_write>:
}
void UART0_write(const uint8_t * data, const uint8_t numbOfBytes)
{
    2ba2:	46 2f       	mov	r20, r22
	queue_writeforTx(&queueForUart0, data, numbOfBytes); 
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	80 e5       	ldi	r24, 0x50	; 80
    2ba8:	91 e0       	ldi	r25, 0x01	; 1
    2baa:	ba de       	rcall	.-652    	; 0x2920 <queue_writeforTx>
	//Generate Interrupt on UDRIEN UDRIEn: USART Data Register Empty Interrupt Enable
	UART0_TX_START(); 
    2bac:	8a b1       	in	r24, 0x0a	; 10
    2bae:	80 62       	ori	r24, 0x20	; 32
    2bb0:	8a b9       	out	0x0a, r24	; 10
    2bb2:	08 95       	ret

00002bb4 <enable_global_interrupts>:
#include "wiznet_driver.h"
#include "GPIO.h"

void	enable_global_interrupts(void)
{
	sei(); 
    2bb4:	78 94       	sei
    2bb6:	08 95       	ret

00002bb8 <disable_global_interrupts>:
}
void	disable_global_interrupts(void)
{
	cli(); 
    2bb8:	f8 94       	cli
    2bba:	08 95       	ret

00002bbc <printf>:
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	ae 01       	movw	r20, r28
    2bc6:	4b 5f       	subi	r20, 0xFB	; 251
    2bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bca:	fa 01       	movw	r30, r20
    2bcc:	61 91       	ld	r22, Z+
    2bce:	71 91       	ld	r23, Z+
    2bd0:	af 01       	movw	r20, r30
    2bd2:	80 91 9e 0c 	lds	r24, 0x0C9E	; 0x800c9e <__iob+0x2>
    2bd6:	90 91 9f 0c 	lds	r25, 0x0C9F	; 0x800c9f <__iob+0x3>
    2bda:	33 d0       	rcall	.+102    	; 0x2c42 <vfprintf>
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	08 95       	ret

00002be2 <puts>:
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	e0 91 9e 0c 	lds	r30, 0x0C9E	; 0x800c9e <__iob+0x2>
    2bee:	f0 91 9f 0c 	lds	r31, 0x0C9F	; 0x800c9f <__iob+0x3>
    2bf2:	23 81       	ldd	r18, Z+3	; 0x03
    2bf4:	21 ff       	sbrs	r18, 1
    2bf6:	1b c0       	rjmp	.+54     	; 0x2c2e <puts+0x4c>
    2bf8:	8c 01       	movw	r16, r24
    2bfa:	d0 e0       	ldi	r29, 0x00	; 0
    2bfc:	c0 e0       	ldi	r28, 0x00	; 0
    2bfe:	f8 01       	movw	r30, r16
    2c00:	81 91       	ld	r24, Z+
    2c02:	8f 01       	movw	r16, r30
    2c04:	60 91 9e 0c 	lds	r22, 0x0C9E	; 0x800c9e <__iob+0x2>
    2c08:	70 91 9f 0c 	lds	r23, 0x0C9F	; 0x800c9f <__iob+0x3>
    2c0c:	db 01       	movw	r26, r22
    2c0e:	18 96       	adiw	r26, 0x08	; 8
    2c10:	ed 91       	ld	r30, X+
    2c12:	fc 91       	ld	r31, X
    2c14:	19 97       	sbiw	r26, 0x09	; 9
    2c16:	88 23       	and	r24, r24
    2c18:	31 f0       	breq	.+12     	; 0x2c26 <puts+0x44>
    2c1a:	09 95       	icall
    2c1c:	89 2b       	or	r24, r25
    2c1e:	79 f3       	breq	.-34     	; 0x2bfe <puts+0x1c>
    2c20:	df ef       	ldi	r29, 0xFF	; 255
    2c22:	cf ef       	ldi	r28, 0xFF	; 255
    2c24:	ec cf       	rjmp	.-40     	; 0x2bfe <puts+0x1c>
    2c26:	8a e0       	ldi	r24, 0x0A	; 10
    2c28:	09 95       	icall
    2c2a:	89 2b       	or	r24, r25
    2c2c:	19 f0       	breq	.+6      	; 0x2c34 <puts+0x52>
    2c2e:	8f ef       	ldi	r24, 0xFF	; 255
    2c30:	9f ef       	ldi	r25, 0xFF	; 255
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <puts+0x56>
    2c34:	8d 2f       	mov	r24, r29
    2c36:	9c 2f       	mov	r25, r28
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	08 95       	ret

00002c42 <vfprintf>:
    2c42:	2f 92       	push	r2
    2c44:	3f 92       	push	r3
    2c46:	4f 92       	push	r4
    2c48:	5f 92       	push	r5
    2c4a:	6f 92       	push	r6
    2c4c:	7f 92       	push	r7
    2c4e:	8f 92       	push	r8
    2c50:	9f 92       	push	r9
    2c52:	af 92       	push	r10
    2c54:	bf 92       	push	r11
    2c56:	cf 92       	push	r12
    2c58:	df 92       	push	r13
    2c5a:	ef 92       	push	r14
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	1f 93       	push	r17
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	2b 97       	sbiw	r28, 0x0b	; 11
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	6c 01       	movw	r12, r24
    2c78:	7b 01       	movw	r14, r22
    2c7a:	8a 01       	movw	r16, r20
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	17 82       	std	Z+7, r1	; 0x07
    2c80:	16 82       	std	Z+6, r1	; 0x06
    2c82:	83 81       	ldd	r24, Z+3	; 0x03
    2c84:	81 ff       	sbrs	r24, 1
    2c86:	bf c1       	rjmp	.+894    	; 0x3006 <vfprintf+0x3c4>
    2c88:	ce 01       	movw	r24, r28
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	3c 01       	movw	r6, r24
    2c8e:	f6 01       	movw	r30, r12
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	f7 01       	movw	r30, r14
    2c94:	93 fd       	sbrc	r25, 3
    2c96:	85 91       	lpm	r24, Z+
    2c98:	93 ff       	sbrs	r25, 3
    2c9a:	81 91       	ld	r24, Z+
    2c9c:	7f 01       	movw	r14, r30
    2c9e:	88 23       	and	r24, r24
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <vfprintf+0x62>
    2ca2:	ad c1       	rjmp	.+858    	; 0x2ffe <vfprintf+0x3bc>
    2ca4:	85 32       	cpi	r24, 0x25	; 37
    2ca6:	39 f4       	brne	.+14     	; 0x2cb6 <vfprintf+0x74>
    2ca8:	93 fd       	sbrc	r25, 3
    2caa:	85 91       	lpm	r24, Z+
    2cac:	93 ff       	sbrs	r25, 3
    2cae:	81 91       	ld	r24, Z+
    2cb0:	7f 01       	movw	r14, r30
    2cb2:	85 32       	cpi	r24, 0x25	; 37
    2cb4:	21 f4       	brne	.+8      	; 0x2cbe <vfprintf+0x7c>
    2cb6:	b6 01       	movw	r22, r12
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	d6 d1       	rcall	.+940    	; 0x3068 <fputc>
    2cbc:	e8 cf       	rjmp	.-48     	; 0x2c8e <vfprintf+0x4c>
    2cbe:	91 2c       	mov	r9, r1
    2cc0:	21 2c       	mov	r2, r1
    2cc2:	31 2c       	mov	r3, r1
    2cc4:	ff e1       	ldi	r31, 0x1F	; 31
    2cc6:	f3 15       	cp	r31, r3
    2cc8:	d8 f0       	brcs	.+54     	; 0x2d00 <vfprintf+0xbe>
    2cca:	8b 32       	cpi	r24, 0x2B	; 43
    2ccc:	79 f0       	breq	.+30     	; 0x2cec <vfprintf+0xaa>
    2cce:	38 f4       	brcc	.+14     	; 0x2cde <vfprintf+0x9c>
    2cd0:	80 32       	cpi	r24, 0x20	; 32
    2cd2:	79 f0       	breq	.+30     	; 0x2cf2 <vfprintf+0xb0>
    2cd4:	83 32       	cpi	r24, 0x23	; 35
    2cd6:	a1 f4       	brne	.+40     	; 0x2d00 <vfprintf+0xbe>
    2cd8:	23 2d       	mov	r18, r3
    2cda:	20 61       	ori	r18, 0x10	; 16
    2cdc:	1d c0       	rjmp	.+58     	; 0x2d18 <vfprintf+0xd6>
    2cde:	8d 32       	cpi	r24, 0x2D	; 45
    2ce0:	61 f0       	breq	.+24     	; 0x2cfa <vfprintf+0xb8>
    2ce2:	80 33       	cpi	r24, 0x30	; 48
    2ce4:	69 f4       	brne	.+26     	; 0x2d00 <vfprintf+0xbe>
    2ce6:	23 2d       	mov	r18, r3
    2ce8:	21 60       	ori	r18, 0x01	; 1
    2cea:	16 c0       	rjmp	.+44     	; 0x2d18 <vfprintf+0xd6>
    2cec:	83 2d       	mov	r24, r3
    2cee:	82 60       	ori	r24, 0x02	; 2
    2cf0:	38 2e       	mov	r3, r24
    2cf2:	e3 2d       	mov	r30, r3
    2cf4:	e4 60       	ori	r30, 0x04	; 4
    2cf6:	3e 2e       	mov	r3, r30
    2cf8:	2a c0       	rjmp	.+84     	; 0x2d4e <vfprintf+0x10c>
    2cfa:	f3 2d       	mov	r31, r3
    2cfc:	f8 60       	ori	r31, 0x08	; 8
    2cfe:	1d c0       	rjmp	.+58     	; 0x2d3a <vfprintf+0xf8>
    2d00:	37 fc       	sbrc	r3, 7
    2d02:	2d c0       	rjmp	.+90     	; 0x2d5e <vfprintf+0x11c>
    2d04:	20 ed       	ldi	r18, 0xD0	; 208
    2d06:	28 0f       	add	r18, r24
    2d08:	2a 30       	cpi	r18, 0x0A	; 10
    2d0a:	40 f0       	brcs	.+16     	; 0x2d1c <vfprintf+0xda>
    2d0c:	8e 32       	cpi	r24, 0x2E	; 46
    2d0e:	b9 f4       	brne	.+46     	; 0x2d3e <vfprintf+0xfc>
    2d10:	36 fc       	sbrc	r3, 6
    2d12:	75 c1       	rjmp	.+746    	; 0x2ffe <vfprintf+0x3bc>
    2d14:	23 2d       	mov	r18, r3
    2d16:	20 64       	ori	r18, 0x40	; 64
    2d18:	32 2e       	mov	r3, r18
    2d1a:	19 c0       	rjmp	.+50     	; 0x2d4e <vfprintf+0x10c>
    2d1c:	36 fe       	sbrs	r3, 6
    2d1e:	06 c0       	rjmp	.+12     	; 0x2d2c <vfprintf+0xea>
    2d20:	8a e0       	ldi	r24, 0x0A	; 10
    2d22:	98 9e       	mul	r9, r24
    2d24:	20 0d       	add	r18, r0
    2d26:	11 24       	eor	r1, r1
    2d28:	92 2e       	mov	r9, r18
    2d2a:	11 c0       	rjmp	.+34     	; 0x2d4e <vfprintf+0x10c>
    2d2c:	ea e0       	ldi	r30, 0x0A	; 10
    2d2e:	2e 9e       	mul	r2, r30
    2d30:	20 0d       	add	r18, r0
    2d32:	11 24       	eor	r1, r1
    2d34:	22 2e       	mov	r2, r18
    2d36:	f3 2d       	mov	r31, r3
    2d38:	f0 62       	ori	r31, 0x20	; 32
    2d3a:	3f 2e       	mov	r3, r31
    2d3c:	08 c0       	rjmp	.+16     	; 0x2d4e <vfprintf+0x10c>
    2d3e:	8c 36       	cpi	r24, 0x6C	; 108
    2d40:	21 f4       	brne	.+8      	; 0x2d4a <vfprintf+0x108>
    2d42:	83 2d       	mov	r24, r3
    2d44:	80 68       	ori	r24, 0x80	; 128
    2d46:	38 2e       	mov	r3, r24
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <vfprintf+0x10c>
    2d4a:	88 36       	cpi	r24, 0x68	; 104
    2d4c:	41 f4       	brne	.+16     	; 0x2d5e <vfprintf+0x11c>
    2d4e:	f7 01       	movw	r30, r14
    2d50:	93 fd       	sbrc	r25, 3
    2d52:	85 91       	lpm	r24, Z+
    2d54:	93 ff       	sbrs	r25, 3
    2d56:	81 91       	ld	r24, Z+
    2d58:	7f 01       	movw	r14, r30
    2d5a:	81 11       	cpse	r24, r1
    2d5c:	b3 cf       	rjmp	.-154    	; 0x2cc4 <vfprintf+0x82>
    2d5e:	98 2f       	mov	r25, r24
    2d60:	9f 7d       	andi	r25, 0xDF	; 223
    2d62:	95 54       	subi	r25, 0x45	; 69
    2d64:	93 30       	cpi	r25, 0x03	; 3
    2d66:	28 f4       	brcc	.+10     	; 0x2d72 <vfprintf+0x130>
    2d68:	0c 5f       	subi	r16, 0xFC	; 252
    2d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6c:	9f e3       	ldi	r25, 0x3F	; 63
    2d6e:	99 83       	std	Y+1, r25	; 0x01
    2d70:	0d c0       	rjmp	.+26     	; 0x2d8c <vfprintf+0x14a>
    2d72:	83 36       	cpi	r24, 0x63	; 99
    2d74:	31 f0       	breq	.+12     	; 0x2d82 <vfprintf+0x140>
    2d76:	83 37       	cpi	r24, 0x73	; 115
    2d78:	71 f0       	breq	.+28     	; 0x2d96 <vfprintf+0x154>
    2d7a:	83 35       	cpi	r24, 0x53	; 83
    2d7c:	09 f0       	breq	.+2      	; 0x2d80 <vfprintf+0x13e>
    2d7e:	55 c0       	rjmp	.+170    	; 0x2e2a <vfprintf+0x1e8>
    2d80:	20 c0       	rjmp	.+64     	; 0x2dc2 <vfprintf+0x180>
    2d82:	f8 01       	movw	r30, r16
    2d84:	80 81       	ld	r24, Z
    2d86:	89 83       	std	Y+1, r24	; 0x01
    2d88:	0e 5f       	subi	r16, 0xFE	; 254
    2d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8c:	88 24       	eor	r8, r8
    2d8e:	83 94       	inc	r8
    2d90:	91 2c       	mov	r9, r1
    2d92:	53 01       	movw	r10, r6
    2d94:	12 c0       	rjmp	.+36     	; 0x2dba <vfprintf+0x178>
    2d96:	28 01       	movw	r4, r16
    2d98:	f2 e0       	ldi	r31, 0x02	; 2
    2d9a:	4f 0e       	add	r4, r31
    2d9c:	51 1c       	adc	r5, r1
    2d9e:	f8 01       	movw	r30, r16
    2da0:	a0 80       	ld	r10, Z
    2da2:	b1 80       	ldd	r11, Z+1	; 0x01
    2da4:	36 fe       	sbrs	r3, 6
    2da6:	03 c0       	rjmp	.+6      	; 0x2dae <vfprintf+0x16c>
    2da8:	69 2d       	mov	r22, r9
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <vfprintf+0x170>
    2dae:	6f ef       	ldi	r22, 0xFF	; 255
    2db0:	7f ef       	ldi	r23, 0xFF	; 255
    2db2:	c5 01       	movw	r24, r10
    2db4:	4e d1       	rcall	.+668    	; 0x3052 <strnlen>
    2db6:	4c 01       	movw	r8, r24
    2db8:	82 01       	movw	r16, r4
    2dba:	f3 2d       	mov	r31, r3
    2dbc:	ff 77       	andi	r31, 0x7F	; 127
    2dbe:	3f 2e       	mov	r3, r31
    2dc0:	15 c0       	rjmp	.+42     	; 0x2dec <vfprintf+0x1aa>
    2dc2:	28 01       	movw	r4, r16
    2dc4:	22 e0       	ldi	r18, 0x02	; 2
    2dc6:	42 0e       	add	r4, r18
    2dc8:	51 1c       	adc	r5, r1
    2dca:	f8 01       	movw	r30, r16
    2dcc:	a0 80       	ld	r10, Z
    2dce:	b1 80       	ldd	r11, Z+1	; 0x01
    2dd0:	36 fe       	sbrs	r3, 6
    2dd2:	03 c0       	rjmp	.+6      	; 0x2dda <vfprintf+0x198>
    2dd4:	69 2d       	mov	r22, r9
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <vfprintf+0x19c>
    2dda:	6f ef       	ldi	r22, 0xFF	; 255
    2ddc:	7f ef       	ldi	r23, 0xFF	; 255
    2dde:	c5 01       	movw	r24, r10
    2de0:	2d d1       	rcall	.+602    	; 0x303c <strnlen_P>
    2de2:	4c 01       	movw	r8, r24
    2de4:	f3 2d       	mov	r31, r3
    2de6:	f0 68       	ori	r31, 0x80	; 128
    2de8:	3f 2e       	mov	r3, r31
    2dea:	82 01       	movw	r16, r4
    2dec:	33 fc       	sbrc	r3, 3
    2dee:	19 c0       	rjmp	.+50     	; 0x2e22 <vfprintf+0x1e0>
    2df0:	82 2d       	mov	r24, r2
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	88 16       	cp	r8, r24
    2df6:	99 06       	cpc	r9, r25
    2df8:	a0 f4       	brcc	.+40     	; 0x2e22 <vfprintf+0x1e0>
    2dfa:	b6 01       	movw	r22, r12
    2dfc:	80 e2       	ldi	r24, 0x20	; 32
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	33 d1       	rcall	.+614    	; 0x3068 <fputc>
    2e02:	2a 94       	dec	r2
    2e04:	f5 cf       	rjmp	.-22     	; 0x2df0 <vfprintf+0x1ae>
    2e06:	f5 01       	movw	r30, r10
    2e08:	37 fc       	sbrc	r3, 7
    2e0a:	85 91       	lpm	r24, Z+
    2e0c:	37 fe       	sbrs	r3, 7
    2e0e:	81 91       	ld	r24, Z+
    2e10:	5f 01       	movw	r10, r30
    2e12:	b6 01       	movw	r22, r12
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	28 d1       	rcall	.+592    	; 0x3068 <fputc>
    2e18:	21 10       	cpse	r2, r1
    2e1a:	2a 94       	dec	r2
    2e1c:	21 e0       	ldi	r18, 0x01	; 1
    2e1e:	82 1a       	sub	r8, r18
    2e20:	91 08       	sbc	r9, r1
    2e22:	81 14       	cp	r8, r1
    2e24:	91 04       	cpc	r9, r1
    2e26:	79 f7       	brne	.-34     	; 0x2e06 <vfprintf+0x1c4>
    2e28:	e1 c0       	rjmp	.+450    	; 0x2fec <vfprintf+0x3aa>
    2e2a:	84 36       	cpi	r24, 0x64	; 100
    2e2c:	11 f0       	breq	.+4      	; 0x2e32 <vfprintf+0x1f0>
    2e2e:	89 36       	cpi	r24, 0x69	; 105
    2e30:	39 f5       	brne	.+78     	; 0x2e80 <vfprintf+0x23e>
    2e32:	f8 01       	movw	r30, r16
    2e34:	37 fe       	sbrs	r3, 7
    2e36:	07 c0       	rjmp	.+14     	; 0x2e46 <vfprintf+0x204>
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	0c 5f       	subi	r16, 0xFC	; 252
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	08 c0       	rjmp	.+16     	; 0x2e56 <vfprintf+0x214>
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	07 2e       	mov	r0, r23
    2e4c:	00 0c       	add	r0, r0
    2e4e:	88 0b       	sbc	r24, r24
    2e50:	99 0b       	sbc	r25, r25
    2e52:	0e 5f       	subi	r16, 0xFE	; 254
    2e54:	1f 4f       	sbci	r17, 0xFF	; 255
    2e56:	f3 2d       	mov	r31, r3
    2e58:	ff 76       	andi	r31, 0x6F	; 111
    2e5a:	3f 2e       	mov	r3, r31
    2e5c:	97 ff       	sbrs	r25, 7
    2e5e:	09 c0       	rjmp	.+18     	; 0x2e72 <vfprintf+0x230>
    2e60:	90 95       	com	r25
    2e62:	80 95       	com	r24
    2e64:	70 95       	com	r23
    2e66:	61 95       	neg	r22
    2e68:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6e:	f0 68       	ori	r31, 0x80	; 128
    2e70:	3f 2e       	mov	r3, r31
    2e72:	2a e0       	ldi	r18, 0x0A	; 10
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	a3 01       	movw	r20, r6
    2e78:	33 d1       	rcall	.+614    	; 0x30e0 <__ultoa_invert>
    2e7a:	88 2e       	mov	r8, r24
    2e7c:	86 18       	sub	r8, r6
    2e7e:	44 c0       	rjmp	.+136    	; 0x2f08 <vfprintf+0x2c6>
    2e80:	85 37       	cpi	r24, 0x75	; 117
    2e82:	31 f4       	brne	.+12     	; 0x2e90 <vfprintf+0x24e>
    2e84:	23 2d       	mov	r18, r3
    2e86:	2f 7e       	andi	r18, 0xEF	; 239
    2e88:	b2 2e       	mov	r11, r18
    2e8a:	2a e0       	ldi	r18, 0x0A	; 10
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	25 c0       	rjmp	.+74     	; 0x2eda <vfprintf+0x298>
    2e90:	93 2d       	mov	r25, r3
    2e92:	99 7f       	andi	r25, 0xF9	; 249
    2e94:	b9 2e       	mov	r11, r25
    2e96:	8f 36       	cpi	r24, 0x6F	; 111
    2e98:	c1 f0       	breq	.+48     	; 0x2eca <vfprintf+0x288>
    2e9a:	18 f4       	brcc	.+6      	; 0x2ea2 <vfprintf+0x260>
    2e9c:	88 35       	cpi	r24, 0x58	; 88
    2e9e:	79 f0       	breq	.+30     	; 0x2ebe <vfprintf+0x27c>
    2ea0:	ae c0       	rjmp	.+348    	; 0x2ffe <vfprintf+0x3bc>
    2ea2:	80 37       	cpi	r24, 0x70	; 112
    2ea4:	19 f0       	breq	.+6      	; 0x2eac <vfprintf+0x26a>
    2ea6:	88 37       	cpi	r24, 0x78	; 120
    2ea8:	21 f0       	breq	.+8      	; 0x2eb2 <vfprintf+0x270>
    2eaa:	a9 c0       	rjmp	.+338    	; 0x2ffe <vfprintf+0x3bc>
    2eac:	e9 2f       	mov	r30, r25
    2eae:	e0 61       	ori	r30, 0x10	; 16
    2eb0:	be 2e       	mov	r11, r30
    2eb2:	b4 fe       	sbrs	r11, 4
    2eb4:	0d c0       	rjmp	.+26     	; 0x2ed0 <vfprintf+0x28e>
    2eb6:	fb 2d       	mov	r31, r11
    2eb8:	f4 60       	ori	r31, 0x04	; 4
    2eba:	bf 2e       	mov	r11, r31
    2ebc:	09 c0       	rjmp	.+18     	; 0x2ed0 <vfprintf+0x28e>
    2ebe:	34 fe       	sbrs	r3, 4
    2ec0:	0a c0       	rjmp	.+20     	; 0x2ed6 <vfprintf+0x294>
    2ec2:	29 2f       	mov	r18, r25
    2ec4:	26 60       	ori	r18, 0x06	; 6
    2ec6:	b2 2e       	mov	r11, r18
    2ec8:	06 c0       	rjmp	.+12     	; 0x2ed6 <vfprintf+0x294>
    2eca:	28 e0       	ldi	r18, 0x08	; 8
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	05 c0       	rjmp	.+10     	; 0x2eda <vfprintf+0x298>
    2ed0:	20 e1       	ldi	r18, 0x10	; 16
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <vfprintf+0x298>
    2ed6:	20 e1       	ldi	r18, 0x10	; 16
    2ed8:	32 e0       	ldi	r19, 0x02	; 2
    2eda:	f8 01       	movw	r30, r16
    2edc:	b7 fe       	sbrs	r11, 7
    2ede:	07 c0       	rjmp	.+14     	; 0x2eee <vfprintf+0x2ac>
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	0c 5f       	subi	r16, 0xFC	; 252
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	06 c0       	rjmp	.+12     	; 0x2efa <vfprintf+0x2b8>
    2eee:	60 81       	ld	r22, Z
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 5f       	subi	r16, 0xFE	; 254
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	a3 01       	movw	r20, r6
    2efc:	f1 d0       	rcall	.+482    	; 0x30e0 <__ultoa_invert>
    2efe:	88 2e       	mov	r8, r24
    2f00:	86 18       	sub	r8, r6
    2f02:	fb 2d       	mov	r31, r11
    2f04:	ff 77       	andi	r31, 0x7F	; 127
    2f06:	3f 2e       	mov	r3, r31
    2f08:	36 fe       	sbrs	r3, 6
    2f0a:	0d c0       	rjmp	.+26     	; 0x2f26 <vfprintf+0x2e4>
    2f0c:	23 2d       	mov	r18, r3
    2f0e:	2e 7f       	andi	r18, 0xFE	; 254
    2f10:	a2 2e       	mov	r10, r18
    2f12:	89 14       	cp	r8, r9
    2f14:	58 f4       	brcc	.+22     	; 0x2f2c <vfprintf+0x2ea>
    2f16:	34 fe       	sbrs	r3, 4
    2f18:	0b c0       	rjmp	.+22     	; 0x2f30 <vfprintf+0x2ee>
    2f1a:	32 fc       	sbrc	r3, 2
    2f1c:	09 c0       	rjmp	.+18     	; 0x2f30 <vfprintf+0x2ee>
    2f1e:	83 2d       	mov	r24, r3
    2f20:	8e 7e       	andi	r24, 0xEE	; 238
    2f22:	a8 2e       	mov	r10, r24
    2f24:	05 c0       	rjmp	.+10     	; 0x2f30 <vfprintf+0x2ee>
    2f26:	b8 2c       	mov	r11, r8
    2f28:	a3 2c       	mov	r10, r3
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <vfprintf+0x2f0>
    2f2c:	b8 2c       	mov	r11, r8
    2f2e:	01 c0       	rjmp	.+2      	; 0x2f32 <vfprintf+0x2f0>
    2f30:	b9 2c       	mov	r11, r9
    2f32:	a4 fe       	sbrs	r10, 4
    2f34:	0f c0       	rjmp	.+30     	; 0x2f54 <vfprintf+0x312>
    2f36:	fe 01       	movw	r30, r28
    2f38:	e8 0d       	add	r30, r8
    2f3a:	f1 1d       	adc	r31, r1
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 33       	cpi	r24, 0x30	; 48
    2f40:	21 f4       	brne	.+8      	; 0x2f4a <vfprintf+0x308>
    2f42:	9a 2d       	mov	r25, r10
    2f44:	99 7e       	andi	r25, 0xE9	; 233
    2f46:	a9 2e       	mov	r10, r25
    2f48:	09 c0       	rjmp	.+18     	; 0x2f5c <vfprintf+0x31a>
    2f4a:	a2 fe       	sbrs	r10, 2
    2f4c:	06 c0       	rjmp	.+12     	; 0x2f5a <vfprintf+0x318>
    2f4e:	b3 94       	inc	r11
    2f50:	b3 94       	inc	r11
    2f52:	04 c0       	rjmp	.+8      	; 0x2f5c <vfprintf+0x31a>
    2f54:	8a 2d       	mov	r24, r10
    2f56:	86 78       	andi	r24, 0x86	; 134
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <vfprintf+0x31a>
    2f5a:	b3 94       	inc	r11
    2f5c:	a3 fc       	sbrc	r10, 3
    2f5e:	10 c0       	rjmp	.+32     	; 0x2f80 <vfprintf+0x33e>
    2f60:	a0 fe       	sbrs	r10, 0
    2f62:	06 c0       	rjmp	.+12     	; 0x2f70 <vfprintf+0x32e>
    2f64:	b2 14       	cp	r11, r2
    2f66:	80 f4       	brcc	.+32     	; 0x2f88 <vfprintf+0x346>
    2f68:	28 0c       	add	r2, r8
    2f6a:	92 2c       	mov	r9, r2
    2f6c:	9b 18       	sub	r9, r11
    2f6e:	0d c0       	rjmp	.+26     	; 0x2f8a <vfprintf+0x348>
    2f70:	b2 14       	cp	r11, r2
    2f72:	58 f4       	brcc	.+22     	; 0x2f8a <vfprintf+0x348>
    2f74:	b6 01       	movw	r22, r12
    2f76:	80 e2       	ldi	r24, 0x20	; 32
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	76 d0       	rcall	.+236    	; 0x3068 <fputc>
    2f7c:	b3 94       	inc	r11
    2f7e:	f8 cf       	rjmp	.-16     	; 0x2f70 <vfprintf+0x32e>
    2f80:	b2 14       	cp	r11, r2
    2f82:	18 f4       	brcc	.+6      	; 0x2f8a <vfprintf+0x348>
    2f84:	2b 18       	sub	r2, r11
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <vfprintf+0x34a>
    2f88:	98 2c       	mov	r9, r8
    2f8a:	21 2c       	mov	r2, r1
    2f8c:	a4 fe       	sbrs	r10, 4
    2f8e:	0f c0       	rjmp	.+30     	; 0x2fae <vfprintf+0x36c>
    2f90:	b6 01       	movw	r22, r12
    2f92:	80 e3       	ldi	r24, 0x30	; 48
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	68 d0       	rcall	.+208    	; 0x3068 <fputc>
    2f98:	a2 fe       	sbrs	r10, 2
    2f9a:	16 c0       	rjmp	.+44     	; 0x2fc8 <vfprintf+0x386>
    2f9c:	a1 fc       	sbrc	r10, 1
    2f9e:	03 c0       	rjmp	.+6      	; 0x2fa6 <vfprintf+0x364>
    2fa0:	88 e7       	ldi	r24, 0x78	; 120
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <vfprintf+0x368>
    2fa6:	88 e5       	ldi	r24, 0x58	; 88
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	b6 01       	movw	r22, r12
    2fac:	0c c0       	rjmp	.+24     	; 0x2fc6 <vfprintf+0x384>
    2fae:	8a 2d       	mov	r24, r10
    2fb0:	86 78       	andi	r24, 0x86	; 134
    2fb2:	51 f0       	breq	.+20     	; 0x2fc8 <vfprintf+0x386>
    2fb4:	a1 fe       	sbrs	r10, 1
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <vfprintf+0x37a>
    2fb8:	8b e2       	ldi	r24, 0x2B	; 43
    2fba:	01 c0       	rjmp	.+2      	; 0x2fbe <vfprintf+0x37c>
    2fbc:	80 e2       	ldi	r24, 0x20	; 32
    2fbe:	a7 fc       	sbrc	r10, 7
    2fc0:	8d e2       	ldi	r24, 0x2D	; 45
    2fc2:	b6 01       	movw	r22, r12
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	50 d0       	rcall	.+160    	; 0x3068 <fputc>
    2fc8:	89 14       	cp	r8, r9
    2fca:	30 f4       	brcc	.+12     	; 0x2fd8 <vfprintf+0x396>
    2fcc:	b6 01       	movw	r22, r12
    2fce:	80 e3       	ldi	r24, 0x30	; 48
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	4a d0       	rcall	.+148    	; 0x3068 <fputc>
    2fd4:	9a 94       	dec	r9
    2fd6:	f8 cf       	rjmp	.-16     	; 0x2fc8 <vfprintf+0x386>
    2fd8:	8a 94       	dec	r8
    2fda:	f3 01       	movw	r30, r6
    2fdc:	e8 0d       	add	r30, r8
    2fde:	f1 1d       	adc	r31, r1
    2fe0:	80 81       	ld	r24, Z
    2fe2:	b6 01       	movw	r22, r12
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	40 d0       	rcall	.+128    	; 0x3068 <fputc>
    2fe8:	81 10       	cpse	r8, r1
    2fea:	f6 cf       	rjmp	.-20     	; 0x2fd8 <vfprintf+0x396>
    2fec:	22 20       	and	r2, r2
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <vfprintf+0x3b0>
    2ff0:	4e ce       	rjmp	.-868    	; 0x2c8e <vfprintf+0x4c>
    2ff2:	b6 01       	movw	r22, r12
    2ff4:	80 e2       	ldi	r24, 0x20	; 32
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	37 d0       	rcall	.+110    	; 0x3068 <fputc>
    2ffa:	2a 94       	dec	r2
    2ffc:	f7 cf       	rjmp	.-18     	; 0x2fec <vfprintf+0x3aa>
    2ffe:	f6 01       	movw	r30, r12
    3000:	86 81       	ldd	r24, Z+6	; 0x06
    3002:	97 81       	ldd	r25, Z+7	; 0x07
    3004:	02 c0       	rjmp	.+4      	; 0x300a <vfprintf+0x3c8>
    3006:	8f ef       	ldi	r24, 0xFF	; 255
    3008:	9f ef       	ldi	r25, 0xFF	; 255
    300a:	2b 96       	adiw	r28, 0x0b	; 11
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	ff 90       	pop	r15
    3020:	ef 90       	pop	r14
    3022:	df 90       	pop	r13
    3024:	cf 90       	pop	r12
    3026:	bf 90       	pop	r11
    3028:	af 90       	pop	r10
    302a:	9f 90       	pop	r9
    302c:	8f 90       	pop	r8
    302e:	7f 90       	pop	r7
    3030:	6f 90       	pop	r6
    3032:	5f 90       	pop	r5
    3034:	4f 90       	pop	r4
    3036:	3f 90       	pop	r3
    3038:	2f 90       	pop	r2
    303a:	08 95       	ret

0000303c <strnlen_P>:
    303c:	fc 01       	movw	r30, r24
    303e:	05 90       	lpm	r0, Z+
    3040:	61 50       	subi	r22, 0x01	; 1
    3042:	70 40       	sbci	r23, 0x00	; 0
    3044:	01 10       	cpse	r0, r1
    3046:	d8 f7       	brcc	.-10     	; 0x303e <strnlen_P+0x2>
    3048:	80 95       	com	r24
    304a:	90 95       	com	r25
    304c:	8e 0f       	add	r24, r30
    304e:	9f 1f       	adc	r25, r31
    3050:	08 95       	ret

00003052 <strnlen>:
    3052:	fc 01       	movw	r30, r24
    3054:	61 50       	subi	r22, 0x01	; 1
    3056:	70 40       	sbci	r23, 0x00	; 0
    3058:	01 90       	ld	r0, Z+
    305a:	01 10       	cpse	r0, r1
    305c:	d8 f7       	brcc	.-10     	; 0x3054 <strnlen+0x2>
    305e:	80 95       	com	r24
    3060:	90 95       	com	r25
    3062:	8e 0f       	add	r24, r30
    3064:	9f 1f       	adc	r25, r31
    3066:	08 95       	ret

00003068 <fputc>:
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	fb 01       	movw	r30, r22
    3072:	23 81       	ldd	r18, Z+3	; 0x03
    3074:	21 fd       	sbrc	r18, 1
    3076:	03 c0       	rjmp	.+6      	; 0x307e <fputc+0x16>
    3078:	8f ef       	ldi	r24, 0xFF	; 255
    307a:	9f ef       	ldi	r25, 0xFF	; 255
    307c:	2c c0       	rjmp	.+88     	; 0x30d6 <fputc+0x6e>
    307e:	22 ff       	sbrs	r18, 2
    3080:	16 c0       	rjmp	.+44     	; 0x30ae <fputc+0x46>
    3082:	46 81       	ldd	r20, Z+6	; 0x06
    3084:	57 81       	ldd	r21, Z+7	; 0x07
    3086:	24 81       	ldd	r18, Z+4	; 0x04
    3088:	35 81       	ldd	r19, Z+5	; 0x05
    308a:	42 17       	cp	r20, r18
    308c:	53 07       	cpc	r21, r19
    308e:	44 f4       	brge	.+16     	; 0x30a0 <fputc+0x38>
    3090:	a0 81       	ld	r26, Z
    3092:	b1 81       	ldd	r27, Z+1	; 0x01
    3094:	9d 01       	movw	r18, r26
    3096:	2f 5f       	subi	r18, 0xFF	; 255
    3098:	3f 4f       	sbci	r19, 0xFF	; 255
    309a:	31 83       	std	Z+1, r19	; 0x01
    309c:	20 83       	st	Z, r18
    309e:	8c 93       	st	X, r24
    30a0:	26 81       	ldd	r18, Z+6	; 0x06
    30a2:	37 81       	ldd	r19, Z+7	; 0x07
    30a4:	2f 5f       	subi	r18, 0xFF	; 255
    30a6:	3f 4f       	sbci	r19, 0xFF	; 255
    30a8:	37 83       	std	Z+7, r19	; 0x07
    30aa:	26 83       	std	Z+6, r18	; 0x06
    30ac:	14 c0       	rjmp	.+40     	; 0x30d6 <fputc+0x6e>
    30ae:	8b 01       	movw	r16, r22
    30b0:	ec 01       	movw	r28, r24
    30b2:	fb 01       	movw	r30, r22
    30b4:	00 84       	ldd	r0, Z+8	; 0x08
    30b6:	f1 85       	ldd	r31, Z+9	; 0x09
    30b8:	e0 2d       	mov	r30, r0
    30ba:	09 95       	icall
    30bc:	89 2b       	or	r24, r25
    30be:	e1 f6       	brne	.-72     	; 0x3078 <fputc+0x10>
    30c0:	d8 01       	movw	r26, r16
    30c2:	16 96       	adiw	r26, 0x06	; 6
    30c4:	8d 91       	ld	r24, X+
    30c6:	9c 91       	ld	r25, X
    30c8:	17 97       	sbiw	r26, 0x07	; 7
    30ca:	01 96       	adiw	r24, 0x01	; 1
    30cc:	17 96       	adiw	r26, 0x07	; 7
    30ce:	9c 93       	st	X, r25
    30d0:	8e 93       	st	-X, r24
    30d2:	16 97       	sbiw	r26, 0x06	; 6
    30d4:	ce 01       	movw	r24, r28
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	08 95       	ret

000030e0 <__ultoa_invert>:
    30e0:	fa 01       	movw	r30, r20
    30e2:	aa 27       	eor	r26, r26
    30e4:	28 30       	cpi	r18, 0x08	; 8
    30e6:	51 f1       	breq	.+84     	; 0x313c <__ultoa_invert+0x5c>
    30e8:	20 31       	cpi	r18, 0x10	; 16
    30ea:	81 f1       	breq	.+96     	; 0x314c <__ultoa_invert+0x6c>
    30ec:	e8 94       	clt
    30ee:	6f 93       	push	r22
    30f0:	6e 7f       	andi	r22, 0xFE	; 254
    30f2:	6e 5f       	subi	r22, 0xFE	; 254
    30f4:	7f 4f       	sbci	r23, 0xFF	; 255
    30f6:	8f 4f       	sbci	r24, 0xFF	; 255
    30f8:	9f 4f       	sbci	r25, 0xFF	; 255
    30fa:	af 4f       	sbci	r26, 0xFF	; 255
    30fc:	b1 e0       	ldi	r27, 0x01	; 1
    30fe:	3e d0       	rcall	.+124    	; 0x317c <__ultoa_invert+0x9c>
    3100:	b4 e0       	ldi	r27, 0x04	; 4
    3102:	3c d0       	rcall	.+120    	; 0x317c <__ultoa_invert+0x9c>
    3104:	67 0f       	add	r22, r23
    3106:	78 1f       	adc	r23, r24
    3108:	89 1f       	adc	r24, r25
    310a:	9a 1f       	adc	r25, r26
    310c:	a1 1d       	adc	r26, r1
    310e:	68 0f       	add	r22, r24
    3110:	79 1f       	adc	r23, r25
    3112:	8a 1f       	adc	r24, r26
    3114:	91 1d       	adc	r25, r1
    3116:	a1 1d       	adc	r26, r1
    3118:	6a 0f       	add	r22, r26
    311a:	71 1d       	adc	r23, r1
    311c:	81 1d       	adc	r24, r1
    311e:	91 1d       	adc	r25, r1
    3120:	a1 1d       	adc	r26, r1
    3122:	20 d0       	rcall	.+64     	; 0x3164 <__ultoa_invert+0x84>
    3124:	09 f4       	brne	.+2      	; 0x3128 <__ultoa_invert+0x48>
    3126:	68 94       	set
    3128:	3f 91       	pop	r19
    312a:	2a e0       	ldi	r18, 0x0A	; 10
    312c:	26 9f       	mul	r18, r22
    312e:	11 24       	eor	r1, r1
    3130:	30 19       	sub	r19, r0
    3132:	30 5d       	subi	r19, 0xD0	; 208
    3134:	31 93       	st	Z+, r19
    3136:	de f6       	brtc	.-74     	; 0x30ee <__ultoa_invert+0xe>
    3138:	cf 01       	movw	r24, r30
    313a:	08 95       	ret
    313c:	46 2f       	mov	r20, r22
    313e:	47 70       	andi	r20, 0x07	; 7
    3140:	40 5d       	subi	r20, 0xD0	; 208
    3142:	41 93       	st	Z+, r20
    3144:	b3 e0       	ldi	r27, 0x03	; 3
    3146:	0f d0       	rcall	.+30     	; 0x3166 <__ultoa_invert+0x86>
    3148:	c9 f7       	brne	.-14     	; 0x313c <__ultoa_invert+0x5c>
    314a:	f6 cf       	rjmp	.-20     	; 0x3138 <__ultoa_invert+0x58>
    314c:	46 2f       	mov	r20, r22
    314e:	4f 70       	andi	r20, 0x0F	; 15
    3150:	40 5d       	subi	r20, 0xD0	; 208
    3152:	4a 33       	cpi	r20, 0x3A	; 58
    3154:	18 f0       	brcs	.+6      	; 0x315c <__ultoa_invert+0x7c>
    3156:	49 5d       	subi	r20, 0xD9	; 217
    3158:	31 fd       	sbrc	r19, 1
    315a:	40 52       	subi	r20, 0x20	; 32
    315c:	41 93       	st	Z+, r20
    315e:	02 d0       	rcall	.+4      	; 0x3164 <__ultoa_invert+0x84>
    3160:	a9 f7       	brne	.-22     	; 0x314c <__ultoa_invert+0x6c>
    3162:	ea cf       	rjmp	.-44     	; 0x3138 <__ultoa_invert+0x58>
    3164:	b4 e0       	ldi	r27, 0x04	; 4
    3166:	a6 95       	lsr	r26
    3168:	97 95       	ror	r25
    316a:	87 95       	ror	r24
    316c:	77 95       	ror	r23
    316e:	67 95       	ror	r22
    3170:	ba 95       	dec	r27
    3172:	c9 f7       	brne	.-14     	; 0x3166 <__ultoa_invert+0x86>
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	61 05       	cpc	r22, r1
    3178:	71 05       	cpc	r23, r1
    317a:	08 95       	ret
    317c:	9b 01       	movw	r18, r22
    317e:	ac 01       	movw	r20, r24
    3180:	0a 2e       	mov	r0, r26
    3182:	06 94       	lsr	r0
    3184:	57 95       	ror	r21
    3186:	47 95       	ror	r20
    3188:	37 95       	ror	r19
    318a:	27 95       	ror	r18
    318c:	ba 95       	dec	r27
    318e:	c9 f7       	brne	.-14     	; 0x3182 <__ultoa_invert+0xa2>
    3190:	62 0f       	add	r22, r18
    3192:	73 1f       	adc	r23, r19
    3194:	84 1f       	adc	r24, r20
    3196:	95 1f       	adc	r25, r21
    3198:	a0 1d       	adc	r26, r0
    319a:	08 95       	ret

0000319c <_exit>:
    319c:	f8 94       	cli

0000319e <__stop_program>:
    319e:	ff cf       	rjmp	.-2      	; 0x319e <__stop_program>
